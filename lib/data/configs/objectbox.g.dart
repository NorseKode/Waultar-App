// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../core/inodes/media_documents.dart';
import '../../core/inodes/profile_document.dart';
import '../../core/inodes/service_document.dart';
import '../../core/inodes/tree_nodes.dart';
import '../../data/entities/misc/appsettings_objectbox.dart';
import '../../data/entities/misc/service_objectbox.dart';
import '../../data/entities/timebuckets/buckets.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 8097564286630812572),
      name: 'AppSettingsObjectBox',
      lastPropertyId: const IdUid(2, 5332569137623765870),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3902383955984227371),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5332569137623765870),
            name: 'darkmode',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 8308368956874486291),
      name: 'DataCategory',
      lastPropertyId: const IdUid(6, 4462445459480383413),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 391364783849632015),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3791719577791664712),
            name: 'count',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3127989216325957884),
            name: 'matchingFoldersFacebook',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6676317269804865201),
            name: 'matchingFoldersInstagram',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8462586113981225197),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 5348888800008541255),
            relationTarget: 'ProfileDocument'),
        ModelProperty(
            id: const IdUid(6, 4462445459480383413),
            name: 'dbCategory',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'dataPointNames',
            srcEntity: 'DataPointName',
            srcField: 'dataCategory')
      ]),
  ModelEntity(
      id: const IdUid(3, 3962882156831397769),
      name: 'DataPoint',
      lastPropertyId: const IdUid(10, 4212249441690024613),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3439209096555212516),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7377310945483394825),
            name: 'dataPointNameId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 4871297375457885596),
            relationTarget: 'DataPointName'),
        ModelProperty(
            id: const IdUid(3, 6501898992068136081),
            name: 'stringName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3179775806323905534),
            name: 'sentimentScore',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6294847748804335939),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 3524362779302378717),
            relationTarget: 'DataCategory'),
        ModelProperty(
            id: const IdUid(6, 2889337772881630211),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 5508963989433204389),
            relationTarget: 'ProfileDocument'),
        ModelProperty(
            id: const IdUid(7, 6737915053633780149),
            name: 'searchStrings',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6422660359075933),
            name: 'values',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8643101031598800901),
            name: 'createdAt',
            type: 12,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 4212249441690024613),
            name: 'dbCreatedAt',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 2100764751536286915),
            name: 'images',
            targetId: const IdUid(8, 6614061471328305028)),
        ModelRelation(
            id: const IdUid(2, 4214533565827646562),
            name: 'videos',
            targetId: const IdUid(14, 539787779520751207)),
        ModelRelation(
            id: const IdUid(3, 7254044051323940659),
            name: 'files',
            targetId: const IdUid(6, 3668008939251339074)),
        ModelRelation(
            id: const IdUid(4, 7801620573997577603),
            name: 'links',
            targetId: const IdUid(9, 5429063635170546566))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 8335080717448740911),
      name: 'DataPointName',
      lastPropertyId: const IdUid(6, 5528930418294919249),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 734251845371913286),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2481147061153350086),
            name: 'count',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4688835205178158112),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8515334184056282292),
            name: 'dataCategoryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(5, 7946853086245758966),
            relationTarget: 'DataCategory'),
        ModelProperty(
            id: const IdUid(5, 5129501601954278236),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(6, 6288670239438401495),
            relationTarget: 'ProfileDocument'),
        ModelProperty(
            id: const IdUid(6, 5528930418294919249),
            name: 'parentId',
            type: 11,
            flags: 520,
            indexId: const IdUid(7, 8890081531347574278),
            relationTarget: 'DataPointName')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(5, 124958990936113749),
            name: 'children',
            targetId: const IdUid(4, 8335080717448740911))
      ],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'dataPoints',
            srcEntity: 'DataPoint',
            srcField: 'dataPointName')
      ]),
  ModelEntity(
      id: const IdUid(5, 8606932274051400122),
      name: 'DayBucket',
      lastPropertyId: const IdUid(6, 7774159556134642180),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7967317964048422200),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3693154598533594505),
            name: 'day',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8257772459062456261),
            name: 'total',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 346739575311969336),
            name: 'monthId',
            type: 11,
            flags: 520,
            indexId: const IdUid(8, 4249019897024693869),
            relationTarget: 'MonthBucket'),
        ModelProperty(
            id: const IdUid(5, 3447676363005237305),
            name: 'dbCategoryMap',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7774159556134642180),
            name: 'dbServiceMap',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(6, 5253374395680435837),
            name: 'hours',
            targetId: const IdUid(7, 6403609134326175620)),
        ModelRelation(
            id: const IdUid(7, 7011188989096344085),
            name: 'dataPoints',
            targetId: const IdUid(3, 3962882156831397769))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 3668008939251339074),
      name: 'FileDocument',
      lastPropertyId: const IdUid(8, 2104459541907493050),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7344779167939085744),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1484017558519771799),
            name: 'uri',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4987496781679555051),
            name: 'data',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3519490970116927634),
            name: 'searchString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 981587543715856386),
            name: 'thumbnail',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 864980043940355792),
            name: 'serviceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(9, 5650797977168897594),
            relationTarget: 'ServiceDocument'),
        ModelProperty(
            id: const IdUid(7, 4479912789355865836),
            name: 'relatedDatapointId',
            type: 11,
            flags: 520,
            indexId: const IdUid(10, 5601557708573549491),
            relationTarget: 'DataPoint'),
        ModelProperty(
            id: const IdUid(8, 2104459541907493050),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(11, 3058410957253157987),
            relationTarget: 'ProfileDocument')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 6403609134326175620),
      name: 'HourBucket',
      lastPropertyId: const IdUid(6, 5723864762908072749),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5211705691589228718),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3098458458575126276),
            name: 'hour',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1531565296149672550),
            name: 'total',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2925905980549128838),
            name: 'dayId',
            type: 11,
            flags: 520,
            indexId: const IdUid(12, 1689731156666724790),
            relationTarget: 'DayBucket'),
        ModelProperty(
            id: const IdUid(5, 6904456282149423463),
            name: 'dbCategoryMap',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5723864762908072749),
            name: 'dbServiceMap',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(8, 2294650229241473165),
            name: 'dataPoints',
            targetId: const IdUid(3, 3962882156831397769))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 6614061471328305028),
      name: 'ImageDocument',
      lastPropertyId: const IdUid(9, 3150655929711720680),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5271772591087899471),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8005012848738682987),
            name: 'uri',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1482869543187451795),
            name: 'data',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8704278582610121544),
            name: 'searchString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 288008164798845187),
            name: 'mediaTags',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5468794887725028025),
            name: 'mediaTagScores',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 952263439791173294),
            name: 'serviceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(13, 5108863501223895506),
            relationTarget: 'ServiceDocument'),
        ModelProperty(
            id: const IdUid(8, 1198249710715996915),
            name: 'relatedDatapointId',
            type: 11,
            flags: 520,
            indexId: const IdUid(14, 2841838129164579490),
            relationTarget: 'DataPoint'),
        ModelProperty(
            id: const IdUid(9, 3150655929711720680),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(15, 235193472666341216),
            relationTarget: 'ProfileDocument')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 5429063635170546566),
      name: 'LinkDocument',
      lastPropertyId: const IdUid(7, 7001115377869711984),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7151693253979593613),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7527986107697838990),
            name: 'uri',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 656667053221240467),
            name: 'data',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2409061666159327700),
            name: 'searchString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5784107130655004675),
            name: 'serviceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(16, 5779748696513436348),
            relationTarget: 'ServiceDocument'),
        ModelProperty(
            id: const IdUid(6, 3544286410106248524),
            name: 'relatedDatapointId',
            type: 11,
            flags: 520,
            indexId: const IdUid(17, 8358467805299746136),
            relationTarget: 'DataPoint'),
        ModelProperty(
            id: const IdUid(7, 7001115377869711984),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(18, 1222022353231232373),
            relationTarget: 'ProfileDocument')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(10, 6868666884464372938),
      name: 'MonthBucket',
      lastPropertyId: const IdUid(6, 8314929891730984427),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5189497735352554745),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6094863372483974590),
            name: 'month',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8874187039897457858),
            name: 'total',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6287903953891055428),
            name: 'yearId',
            type: 11,
            flags: 520,
            indexId: const IdUid(19, 5380270339038335407),
            relationTarget: 'YearBucket'),
        ModelProperty(
            id: const IdUid(5, 4848289476023364976),
            name: 'dbCategoryMap',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8314929891730984427),
            name: 'dbServiceMap',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(9, 1233088243142829705),
            name: 'days',
            targetId: const IdUid(5, 8606932274051400122))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(11, 4319529502292110525),
      name: 'ProfileDocument',
      lastPropertyId: const IdUid(4, 9109488356769227671),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8033639630731713756),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2328373598104357564),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4777654427747403065),
            name: 'serviceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(20, 7443373411795335286),
            relationTarget: 'ServiceDocument'),
        ModelProperty(
            id: const IdUid(4, 9109488356769227671),
            name: 'profilePictureId',
            type: 11,
            flags: 520,
            indexId: const IdUid(21, 7946519466137260434),
            relationTarget: 'ImageDocument')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(10, 9132738578469249628),
            name: 'dataPoints',
            targetId: const IdUid(3, 3962882156831397769))
      ],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'categories', srcEntity: 'DataCategory', srcField: 'profile')
      ]),
  ModelEntity(
      id: const IdUid(12, 7096277732175001862),
      name: 'ServiceDocument',
      lastPropertyId: const IdUid(5, 1810001009917525151),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3284003566154317025),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4298641779856396634),
            name: 'serviceName',
            type: 9,
            flags: 2080,
            indexId: const IdUid(22, 5640317858253838854)),
        ModelProperty(
            id: const IdUid(3, 4138385822047463622),
            name: 'companyName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7733326928849552564),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1810001009917525151),
            name: 'totalDatapoints',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(13, 3207545815720817566),
      name: 'ServiceObjectBox',
      lastPropertyId: const IdUid(4, 1928184170686559565),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3328608839838269264),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 421465966754884817),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(23, 8403516831134638485)),
        ModelProperty(
            id: const IdUid(3, 5600518555049191543),
            name: 'company',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1928184170686559565),
            name: 'image',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(14, 539787779520751207),
      name: 'VideoDocument',
      lastPropertyId: const IdUid(8, 2051132254632094314),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7876175947210625420),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4688318794947689063),
            name: 'uri',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2867871036997615433),
            name: 'data',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4007588793250434448),
            name: 'searchString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5529403292030493798),
            name: 'thumbnail',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1186934037947244407),
            name: 'serviceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(24, 1025448321149461617),
            relationTarget: 'ServiceDocument'),
        ModelProperty(
            id: const IdUid(7, 7554429615678628818),
            name: 'relatedDatapointId',
            type: 11,
            flags: 520,
            indexId: const IdUid(25, 1280660058926383139),
            relationTarget: 'DataPoint'),
        ModelProperty(
            id: const IdUid(8, 2051132254632094314),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(26, 3731474996414701774),
            relationTarget: 'ProfileDocument')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(15, 3919759095602587932),
      name: 'YearBucket',
      lastPropertyId: const IdUid(5, 2892223650945041242),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8227500068525960062),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 9011717027652357777),
            name: 'year',
            type: 6,
            flags: 40,
            indexId: const IdUid(27, 4431609372551251303)),
        ModelProperty(
            id: const IdUid(3, 5394112684603272690),
            name: 'total',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1418685556560418970),
            name: 'dbCategoryMap',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2892223650945041242),
            name: 'dbServiceMap',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(11, 5668650299620218123),
            name: 'months',
            targetId: const IdUid(10, 6868666884464372938))
      ],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(15, 3919759095602587932),
      lastIndexId: const IdUid(27, 4431609372551251303),
      lastRelationId: const IdUid(11, 5668650299620218123),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    AppSettingsObjectBox: EntityDefinition<AppSettingsObjectBox>(
        model: _entities[0],
        toOneRelations: (AppSettingsObjectBox object) => [],
        toManyRelations: (AppSettingsObjectBox object) => {},
        getId: (AppSettingsObjectBox object) => object.id,
        setId: (AppSettingsObjectBox object, int id) {
          object.id = id;
        },
        objectToFB: (AppSettingsObjectBox object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.darkmode);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AppSettingsObjectBox(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false));

          return object;
        }),
    DataCategory: EntityDefinition<DataCategory>(
        model: _entities[1],
        toOneRelations: (DataCategory object) => [object.profile],
        toManyRelations: (DataCategory object) => {
              RelInfo<DataPointName>.toOneBacklink(4, object.id,
                      (DataPointName srcObject) => srcObject.dataCategory):
                  object.dataPointNames
            },
        getId: (DataCategory object) => object.id,
        setId: (DataCategory object, int id) {
          object.id = id;
        },
        objectToFB: (DataCategory object, fb.Builder fbb) {
          final matchingFoldersFacebookOffset = fbb.writeList(object
              .matchingFoldersFacebook
              .map(fbb.writeString)
              .toList(growable: false));
          final matchingFoldersInstagramOffset = fbb.writeList(object
              .matchingFoldersInstagram
              .map(fbb.writeString)
              .toList(growable: false));
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.count);
          fbb.addOffset(2, matchingFoldersFacebookOffset);
          fbb.addOffset(3, matchingFoldersInstagramOffset);
          fbb.addInt64(4, object.profile.targetId);
          fbb.addInt64(5, object.dbCategory);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DataCategory(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              count: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              matchingFoldersFacebook: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGet(buffer, rootOffset, 8, []),
              matchingFoldersInstagram: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGet(buffer, rootOffset, 10, []))
            ..dbCategory =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.profile.attach(store);
          InternalToManyAccess.setRelInfo(
              object.dataPointNames,
              store,
              RelInfo<DataPointName>.toOneBacklink(4, object.id,
                  (DataPointName srcObject) => srcObject.dataCategory),
              store.box<DataCategory>());
          return object;
        }),
    DataPoint: EntityDefinition<DataPoint>(
        model: _entities[2],
        toOneRelations: (DataPoint object) =>
            [object.dataPointName, object.category, object.profile],
        toManyRelations: (DataPoint object) => {
              RelInfo<DataPoint>.toMany(1, object.id): object.images,
              RelInfo<DataPoint>.toMany(2, object.id): object.videos,
              RelInfo<DataPoint>.toMany(3, object.id): object.files,
              RelInfo<DataPoint>.toMany(4, object.id): object.links
            },
        getId: (DataPoint object) => object.id,
        setId: (DataPoint object, int id) {
          object.id = id;
        },
        objectToFB: (DataPoint object, fb.Builder fbb) {
          final stringNameOffset = fbb.writeString(object.stringName);
          final searchStringsOffset = fbb.writeList(object.searchStrings
              .map(fbb.writeString)
              .toList(growable: false));
          final valuesOffset = fbb.writeString(object.values);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.dataPointName.targetId);
          fbb.addOffset(2, stringNameOffset);
          fbb.addFloat64(3, object.sentimentScore);
          fbb.addInt64(4, object.category.targetId);
          fbb.addInt64(5, object.profile.targetId);
          fbb.addOffset(6, searchStringsOffset);
          fbb.addOffset(7, valuesOffset);
          fbb.addInt64(8, object.createdAt.microsecondsSinceEpoch * 1000);
          fbb.addInt64(9, object.dbCreatedAt);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DataPoint(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              sentimentScore:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0))
            ..stringName = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..searchStrings = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 16, [])
            ..values = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 18, '')
            ..createdAt = DateTime.fromMicrosecondsSinceEpoch(
                (const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0) /
                        1000)
                    .round())
            ..dbCreatedAt =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.dataPointName.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.dataPointName.attach(store);
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.category.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.profile.attach(store);
          InternalToManyAccess.setRelInfo(object.images, store,
              RelInfo<DataPoint>.toMany(1, object.id), store.box<DataPoint>());
          InternalToManyAccess.setRelInfo(object.videos, store,
              RelInfo<DataPoint>.toMany(2, object.id), store.box<DataPoint>());
          InternalToManyAccess.setRelInfo(object.files, store,
              RelInfo<DataPoint>.toMany(3, object.id), store.box<DataPoint>());
          InternalToManyAccess.setRelInfo(object.links, store,
              RelInfo<DataPoint>.toMany(4, object.id), store.box<DataPoint>());
          return object;
        }),
    DataPointName: EntityDefinition<DataPointName>(
        model: _entities[3],
        toOneRelations: (DataPointName object) =>
            [object.dataCategory, object.profile, object.parent],
        toManyRelations: (DataPointName object) => {
              RelInfo<DataPointName>.toMany(5, object.id): object.children,
              RelInfo<DataPoint>.toOneBacklink(2, object.id,
                      (DataPoint srcObject) => srcObject.dataPointName):
                  object.dataPoints
            },
        getId: (DataPointName object) => object.id,
        setId: (DataPointName object, int id) {
          object.id = id;
        },
        objectToFB: (DataPointName object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.count);
          fbb.addOffset(2, nameOffset);
          fbb.addInt64(3, object.dataCategory.targetId);
          fbb.addInt64(4, object.profile.targetId);
          fbb.addInt64(5, object.parent.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DataPointName(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              count: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''));
          object.dataCategory.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.dataCategory.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.profile.attach(store);
          object.parent.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.parent.attach(store);
          InternalToManyAccess.setRelInfo(
              object.children,
              store,
              RelInfo<DataPointName>.toMany(5, object.id),
              store.box<DataPointName>());
          InternalToManyAccess.setRelInfo(
              object.dataPoints,
              store,
              RelInfo<DataPoint>.toOneBacklink(2, object.id,
                  (DataPoint srcObject) => srcObject.dataPointName),
              store.box<DataPointName>());
          return object;
        }),
    DayBucket: EntityDefinition<DayBucket>(
        model: _entities[4],
        toOneRelations: (DayBucket object) => [object.month],
        toManyRelations: (DayBucket object) => {
              RelInfo<DayBucket>.toMany(6, object.id): object.hours,
              RelInfo<DayBucket>.toMany(7, object.id): object.dataPoints
            },
        getId: (DayBucket object) => object.id,
        setId: (DayBucket object, int id) {
          object.id = id;
        },
        objectToFB: (DayBucket object, fb.Builder fbb) {
          final dbCategoryMapOffset = fbb.writeString(object.dbCategoryMap);
          final dbServiceMapOffset = fbb.writeString(object.dbServiceMap);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.day);
          fbb.addInt64(2, object.total);
          fbb.addInt64(3, object.month.targetId);
          fbb.addOffset(4, dbCategoryMapOffset);
          fbb.addOffset(5, dbServiceMapOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DayBucket(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              total: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              day: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0))
            ..dbCategoryMap = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..dbServiceMap = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '');
          object.month.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.month.attach(store);
          InternalToManyAccess.setRelInfo(object.hours, store,
              RelInfo<DayBucket>.toMany(6, object.id), store.box<DayBucket>());
          InternalToManyAccess.setRelInfo(object.dataPoints, store,
              RelInfo<DayBucket>.toMany(7, object.id), store.box<DayBucket>());
          return object;
        }),
    FileDocument: EntityDefinition<FileDocument>(
        model: _entities[5],
        toOneRelations: (FileDocument object) =>
            [object.service, object.relatedDatapoint, object.profile],
        toManyRelations: (FileDocument object) => {},
        getId: (FileDocument object) => object.id,
        setId: (FileDocument object, int id) {
          object.id = id;
        },
        objectToFB: (FileDocument object, fb.Builder fbb) {
          final uriOffset = fbb.writeString(object.uri);
          final dataOffset = fbb.writeString(object.data);
          final searchStringOffset = fbb.writeString(object.searchString);
          final thumbnailOffset = object.thumbnail == null
              ? null
              : fbb.writeString(object.thumbnail!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uriOffset);
          fbb.addOffset(2, dataOffset);
          fbb.addOffset(3, searchStringOffset);
          fbb.addOffset(4, thumbnailOffset);
          fbb.addInt64(5, object.service.targetId);
          fbb.addInt64(6, object.relatedDatapoint.targetId);
          fbb.addInt64(7, object.profile.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = FileDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              uri: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              data: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              thumbnail: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              searchString: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));
          object.service.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.service.attach(store);
          object.relatedDatapoint.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.relatedDatapoint.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.profile.attach(store);
          return object;
        }),
    HourBucket: EntityDefinition<HourBucket>(
        model: _entities[6],
        toOneRelations: (HourBucket object) => [object.day],
        toManyRelations: (HourBucket object) =>
            {RelInfo<HourBucket>.toMany(8, object.id): object.dataPoints},
        getId: (HourBucket object) => object.id,
        setId: (HourBucket object, int id) {
          object.id = id;
        },
        objectToFB: (HourBucket object, fb.Builder fbb) {
          final dbCategoryMapOffset = fbb.writeString(object.dbCategoryMap);
          final dbServiceMapOffset = fbb.writeString(object.dbServiceMap);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.hour);
          fbb.addInt64(2, object.total);
          fbb.addInt64(3, object.day.targetId);
          fbb.addOffset(4, dbCategoryMapOffset);
          fbb.addOffset(5, dbServiceMapOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = HourBucket(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              total: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              hour: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0))
            ..dbCategoryMap = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..dbServiceMap = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '');
          object.day.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.day.attach(store);
          InternalToManyAccess.setRelInfo(
              object.dataPoints,
              store,
              RelInfo<HourBucket>.toMany(8, object.id),
              store.box<HourBucket>());
          return object;
        }),
    ImageDocument: EntityDefinition<ImageDocument>(
        model: _entities[7],
        toOneRelations: (ImageDocument object) =>
            [object.service, object.relatedDatapoint, object.profile],
        toManyRelations: (ImageDocument object) => {},
        getId: (ImageDocument object) => object.id,
        setId: (ImageDocument object, int id) {
          object.id = id;
        },
        objectToFB: (ImageDocument object, fb.Builder fbb) {
          final uriOffset = fbb.writeString(object.uri);
          final dataOffset = fbb.writeString(object.data);
          final searchStringOffset = fbb.writeString(object.searchString);
          final mediaTagsOffset = fbb.writeString(object.mediaTags);
          final mediaTagScoresOffset = fbb.writeList(object.mediaTagScores
              .map(fbb.writeString)
              .toList(growable: false));
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uriOffset);
          fbb.addOffset(2, dataOffset);
          fbb.addOffset(3, searchStringOffset);
          fbb.addOffset(4, mediaTagsOffset);
          fbb.addOffset(5, mediaTagScoresOffset);
          fbb.addInt64(6, object.service.targetId);
          fbb.addInt64(7, object.relatedDatapoint.targetId);
          fbb.addInt64(8, object.profile.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ImageDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              uri: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              data: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              searchString: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''))
            ..mediaTags = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..mediaTagScores = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 14, []);
          object.service.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.service.attach(store);
          object.relatedDatapoint.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.relatedDatapoint.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.profile.attach(store);
          return object;
        }),
    LinkDocument: EntityDefinition<LinkDocument>(
        model: _entities[8],
        toOneRelations: (LinkDocument object) =>
            [object.service, object.relatedDatapoint, object.profile],
        toManyRelations: (LinkDocument object) => {},
        getId: (LinkDocument object) => object.id,
        setId: (LinkDocument object, int id) {
          object.id = id;
        },
        objectToFB: (LinkDocument object, fb.Builder fbb) {
          final uriOffset = fbb.writeString(object.uri);
          final dataOffset = fbb.writeString(object.data);
          final searchStringOffset = object.searchString == null
              ? null
              : fbb.writeString(object.searchString!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uriOffset);
          fbb.addOffset(2, dataOffset);
          fbb.addOffset(3, searchStringOffset);
          fbb.addInt64(4, object.service.targetId);
          fbb.addInt64(5, object.relatedDatapoint.targetId);
          fbb.addInt64(6, object.profile.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = LinkDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              uri: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              data: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              searchString: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10));
          object.service.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.service.attach(store);
          object.relatedDatapoint.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.relatedDatapoint.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.profile.attach(store);
          return object;
        }),
    MonthBucket: EntityDefinition<MonthBucket>(
        model: _entities[9],
        toOneRelations: (MonthBucket object) => [object.year],
        toManyRelations: (MonthBucket object) =>
            {RelInfo<MonthBucket>.toMany(9, object.id): object.days},
        getId: (MonthBucket object) => object.id,
        setId: (MonthBucket object, int id) {
          object.id = id;
        },
        objectToFB: (MonthBucket object, fb.Builder fbb) {
          final dbCategoryMapOffset = fbb.writeString(object.dbCategoryMap);
          final dbServiceMapOffset = fbb.writeString(object.dbServiceMap);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.month);
          fbb.addInt64(2, object.total);
          fbb.addInt64(3, object.year.targetId);
          fbb.addOffset(4, dbCategoryMapOffset);
          fbb.addOffset(5, dbServiceMapOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = MonthBucket(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              total: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              month: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0))
            ..dbCategoryMap = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..dbServiceMap = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '');
          object.year.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.year.attach(store);
          InternalToManyAccess.setRelInfo(
              object.days,
              store,
              RelInfo<MonthBucket>.toMany(9, object.id),
              store.box<MonthBucket>());
          return object;
        }),
    ProfileDocument: EntityDefinition<ProfileDocument>(
        model: _entities[10],
        toOneRelations: (ProfileDocument object) =>
            [object.service, object.profilePicture],
        toManyRelations: (ProfileDocument object) => {
              RelInfo<ProfileDocument>.toMany(10, object.id): object.dataPoints,
              RelInfo<DataCategory>.toOneBacklink(5, object.id,
                      (DataCategory srcObject) => srcObject.profile):
                  object.categories
            },
        getId: (ProfileDocument object) => object.id,
        setId: (ProfileDocument object, int id) {
          object.id = id;
        },
        objectToFB: (ProfileDocument object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.service.targetId);
          fbb.addInt64(3, object.profilePicture.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProfileDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));
          object.service.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.service.attach(store);
          object.profilePicture.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.profilePicture.attach(store);
          InternalToManyAccess.setRelInfo(
              object.dataPoints,
              store,
              RelInfo<ProfileDocument>.toMany(10, object.id),
              store.box<ProfileDocument>());
          InternalToManyAccess.setRelInfo(
              object.categories,
              store,
              RelInfo<DataCategory>.toOneBacklink(
                  5, object.id, (DataCategory srcObject) => srcObject.profile),
              store.box<ProfileDocument>());
          return object;
        }),
    ServiceDocument: EntityDefinition<ServiceDocument>(
        model: _entities[11],
        toOneRelations: (ServiceDocument object) => [],
        toManyRelations: (ServiceDocument object) => {},
        getId: (ServiceDocument object) => object.id,
        setId: (ServiceDocument object, int id) {
          object.id = id;
        },
        objectToFB: (ServiceDocument object, fb.Builder fbb) {
          final serviceNameOffset = fbb.writeString(object.serviceName);
          final companyNameOffset = fbb.writeString(object.companyName);
          final imageOffset = fbb.writeString(object.image);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, serviceNameOffset);
          fbb.addOffset(2, companyNameOffset);
          fbb.addOffset(3, imageOffset);
          fbb.addInt64(4, object.totalDatapoints);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ServiceDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              serviceName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              companyName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              image: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              totalDatapoints:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));

          return object;
        }),
    ServiceObjectBox: EntityDefinition<ServiceObjectBox>(
        model: _entities[12],
        toOneRelations: (ServiceObjectBox object) => [],
        toManyRelations: (ServiceObjectBox object) => {},
        getId: (ServiceObjectBox object) => object.id,
        setId: (ServiceObjectBox object, int id) {
          object.id = id;
        },
        objectToFB: (ServiceObjectBox object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final companyOffset = fbb.writeString(object.company);
          final imageOffset = fbb.writeString(object.image);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, companyOffset);
          fbb.addOffset(3, imageOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ServiceObjectBox(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              company: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              image: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));

          return object;
        }),
    VideoDocument: EntityDefinition<VideoDocument>(
        model: _entities[13],
        toOneRelations: (VideoDocument object) =>
            [object.service, object.relatedDatapoint, object.profile],
        toManyRelations: (VideoDocument object) => {},
        getId: (VideoDocument object) => object.id,
        setId: (VideoDocument object, int id) {
          object.id = id;
        },
        objectToFB: (VideoDocument object, fb.Builder fbb) {
          final uriOffset = fbb.writeString(object.uri);
          final dataOffset = fbb.writeString(object.data);
          final searchStringOffset = fbb.writeString(object.searchString);
          final thumbnailOffset = object.thumbnail == null
              ? null
              : fbb.writeString(object.thumbnail!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uriOffset);
          fbb.addOffset(2, dataOffset);
          fbb.addOffset(3, searchStringOffset);
          fbb.addOffset(4, thumbnailOffset);
          fbb.addInt64(5, object.service.targetId);
          fbb.addInt64(6, object.relatedDatapoint.targetId);
          fbb.addInt64(7, object.profile.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = VideoDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              uri: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              data: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              thumbnail: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              searchString: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));
          object.service.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.service.attach(store);
          object.relatedDatapoint.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.relatedDatapoint.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.profile.attach(store);
          return object;
        }),
    YearBucket: EntityDefinition<YearBucket>(
        model: _entities[14],
        toOneRelations: (YearBucket object) => [],
        toManyRelations: (YearBucket object) =>
            {RelInfo<YearBucket>.toMany(11, object.id): object.months},
        getId: (YearBucket object) => object.id,
        setId: (YearBucket object, int id) {
          object.id = id;
        },
        objectToFB: (YearBucket object, fb.Builder fbb) {
          final dbCategoryMapOffset = fbb.writeString(object.dbCategoryMap);
          final dbServiceMapOffset = fbb.writeString(object.dbServiceMap);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.year);
          fbb.addInt64(2, object.total);
          fbb.addOffset(3, dbCategoryMapOffset);
          fbb.addOffset(4, dbServiceMapOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = YearBucket(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              total: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              year: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0))
            ..dbCategoryMap = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..dbServiceMap = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '');
          InternalToManyAccess.setRelInfo(
              object.months,
              store,
              RelInfo<YearBucket>.toMany(11, object.id),
              store.box<YearBucket>());
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [AppSettingsObjectBox] entity fields to define ObjectBox queries.
class AppSettingsObjectBox_ {
  /// see [AppSettingsObjectBox.id]
  static final id =
      QueryIntegerProperty<AppSettingsObjectBox>(_entities[0].properties[0]);

  /// see [AppSettingsObjectBox.darkmode]
  static final darkmode =
      QueryBooleanProperty<AppSettingsObjectBox>(_entities[0].properties[1]);
}

/// [DataCategory] entity fields to define ObjectBox queries.
class DataCategory_ {
  /// see [DataCategory.id]
  static final id =
      QueryIntegerProperty<DataCategory>(_entities[1].properties[0]);

  /// see [DataCategory.count]
  static final count =
      QueryIntegerProperty<DataCategory>(_entities[1].properties[1]);

  /// see [DataCategory.matchingFoldersFacebook]
  static final matchingFoldersFacebook =
      QueryStringVectorProperty<DataCategory>(_entities[1].properties[2]);

  /// see [DataCategory.matchingFoldersInstagram]
  static final matchingFoldersInstagram =
      QueryStringVectorProperty<DataCategory>(_entities[1].properties[3]);

  /// see [DataCategory.profile]
  static final profile = QueryRelationToOne<DataCategory, ProfileDocument>(
      _entities[1].properties[4]);

  /// see [DataCategory.dbCategory]
  static final dbCategory =
      QueryIntegerProperty<DataCategory>(_entities[1].properties[5]);
}

/// [DataPoint] entity fields to define ObjectBox queries.
class DataPoint_ {
  /// see [DataPoint.id]
  static final id = QueryIntegerProperty<DataPoint>(_entities[2].properties[0]);

  /// see [DataPoint.dataPointName]
  static final dataPointName =
      QueryRelationToOne<DataPoint, DataPointName>(_entities[2].properties[1]);

  /// see [DataPoint.stringName]
  static final stringName =
      QueryStringProperty<DataPoint>(_entities[2].properties[2]);

  /// see [DataPoint.sentimentScore]
  static final sentimentScore =
      QueryDoubleProperty<DataPoint>(_entities[2].properties[3]);

  /// see [DataPoint.category]
  static final category =
      QueryRelationToOne<DataPoint, DataCategory>(_entities[2].properties[4]);

  /// see [DataPoint.profile]
  static final profile = QueryRelationToOne<DataPoint, ProfileDocument>(
      _entities[2].properties[5]);

  /// see [DataPoint.searchStrings]
  static final searchStrings =
      QueryStringVectorProperty<DataPoint>(_entities[2].properties[6]);

  /// see [DataPoint.values]
  static final values =
      QueryStringProperty<DataPoint>(_entities[2].properties[7]);

  /// see [DataPoint.createdAt]
  static final createdAt =
      QueryIntegerProperty<DataPoint>(_entities[2].properties[8]);

  /// see [DataPoint.dbCreatedAt]
  static final dbCreatedAt =
      QueryIntegerProperty<DataPoint>(_entities[2].properties[9]);

  /// see [DataPoint.images]
  static final images =
      QueryRelationToMany<DataPoint, ImageDocument>(_entities[2].relations[0]);

  /// see [DataPoint.videos]
  static final videos =
      QueryRelationToMany<DataPoint, VideoDocument>(_entities[2].relations[1]);

  /// see [DataPoint.files]
  static final files =
      QueryRelationToMany<DataPoint, FileDocument>(_entities[2].relations[2]);

  /// see [DataPoint.links]
  static final links =
      QueryRelationToMany<DataPoint, LinkDocument>(_entities[2].relations[3]);
}

/// [DataPointName] entity fields to define ObjectBox queries.
class DataPointName_ {
  /// see [DataPointName.id]
  static final id =
      QueryIntegerProperty<DataPointName>(_entities[3].properties[0]);

  /// see [DataPointName.count]
  static final count =
      QueryIntegerProperty<DataPointName>(_entities[3].properties[1]);

  /// see [DataPointName.name]
  static final name =
      QueryStringProperty<DataPointName>(_entities[3].properties[2]);

  /// see [DataPointName.dataCategory]
  static final dataCategory = QueryRelationToOne<DataPointName, DataCategory>(
      _entities[3].properties[3]);

  /// see [DataPointName.profile]
  static final profile = QueryRelationToOne<DataPointName, ProfileDocument>(
      _entities[3].properties[4]);

  /// see [DataPointName.parent]
  static final parent = QueryRelationToOne<DataPointName, DataPointName>(
      _entities[3].properties[5]);

  /// see [DataPointName.children]
  static final children = QueryRelationToMany<DataPointName, DataPointName>(
      _entities[3].relations[0]);
}

/// [DayBucket] entity fields to define ObjectBox queries.
class DayBucket_ {
  /// see [DayBucket.id]
  static final id = QueryIntegerProperty<DayBucket>(_entities[4].properties[0]);

  /// see [DayBucket.day]
  static final day =
      QueryIntegerProperty<DayBucket>(_entities[4].properties[1]);

  /// see [DayBucket.total]
  static final total =
      QueryIntegerProperty<DayBucket>(_entities[4].properties[2]);

  /// see [DayBucket.month]
  static final month =
      QueryRelationToOne<DayBucket, MonthBucket>(_entities[4].properties[3]);

  /// see [DayBucket.dbCategoryMap]
  static final dbCategoryMap =
      QueryStringProperty<DayBucket>(_entities[4].properties[4]);

  /// see [DayBucket.dbServiceMap]
  static final dbServiceMap =
      QueryStringProperty<DayBucket>(_entities[4].properties[5]);

  /// see [DayBucket.hours]
  static final hours =
      QueryRelationToMany<DayBucket, HourBucket>(_entities[4].relations[0]);

  /// see [DayBucket.dataPoints]
  static final dataPoints =
      QueryRelationToMany<DayBucket, DataPoint>(_entities[4].relations[1]);
}

/// [FileDocument] entity fields to define ObjectBox queries.
class FileDocument_ {
  /// see [FileDocument.id]
  static final id =
      QueryIntegerProperty<FileDocument>(_entities[5].properties[0]);

  /// see [FileDocument.uri]
  static final uri =
      QueryStringProperty<FileDocument>(_entities[5].properties[1]);

  /// see [FileDocument.data]
  static final data =
      QueryStringProperty<FileDocument>(_entities[5].properties[2]);

  /// see [FileDocument.searchString]
  static final searchString =
      QueryStringProperty<FileDocument>(_entities[5].properties[3]);

  /// see [FileDocument.thumbnail]
  static final thumbnail =
      QueryStringProperty<FileDocument>(_entities[5].properties[4]);

  /// see [FileDocument.service]
  static final service = QueryRelationToOne<FileDocument, ServiceDocument>(
      _entities[5].properties[5]);

  /// see [FileDocument.relatedDatapoint]
  static final relatedDatapoint =
      QueryRelationToOne<FileDocument, DataPoint>(_entities[5].properties[6]);

  /// see [FileDocument.profile]
  static final profile = QueryRelationToOne<FileDocument, ProfileDocument>(
      _entities[5].properties[7]);
}

/// [HourBucket] entity fields to define ObjectBox queries.
class HourBucket_ {
  /// see [HourBucket.id]
  static final id =
      QueryIntegerProperty<HourBucket>(_entities[6].properties[0]);

  /// see [HourBucket.hour]
  static final hour =
      QueryIntegerProperty<HourBucket>(_entities[6].properties[1]);

  /// see [HourBucket.total]
  static final total =
      QueryIntegerProperty<HourBucket>(_entities[6].properties[2]);

  /// see [HourBucket.day]
  static final day =
      QueryRelationToOne<HourBucket, DayBucket>(_entities[6].properties[3]);

  /// see [HourBucket.dbCategoryMap]
  static final dbCategoryMap =
      QueryStringProperty<HourBucket>(_entities[6].properties[4]);

  /// see [HourBucket.dbServiceMap]
  static final dbServiceMap =
      QueryStringProperty<HourBucket>(_entities[6].properties[5]);

  /// see [HourBucket.dataPoints]
  static final dataPoints =
      QueryRelationToMany<HourBucket, DataPoint>(_entities[6].relations[0]);
}

/// [ImageDocument] entity fields to define ObjectBox queries.
class ImageDocument_ {
  /// see [ImageDocument.id]
  static final id =
      QueryIntegerProperty<ImageDocument>(_entities[7].properties[0]);

  /// see [ImageDocument.uri]
  static final uri =
      QueryStringProperty<ImageDocument>(_entities[7].properties[1]);

  /// see [ImageDocument.data]
  static final data =
      QueryStringProperty<ImageDocument>(_entities[7].properties[2]);

  /// see [ImageDocument.searchString]
  static final searchString =
      QueryStringProperty<ImageDocument>(_entities[7].properties[3]);

  /// see [ImageDocument.mediaTags]
  static final mediaTags =
      QueryStringProperty<ImageDocument>(_entities[7].properties[4]);

  /// see [ImageDocument.mediaTagScores]
  static final mediaTagScores =
      QueryStringVectorProperty<ImageDocument>(_entities[7].properties[5]);

  /// see [ImageDocument.service]
  static final service = QueryRelationToOne<ImageDocument, ServiceDocument>(
      _entities[7].properties[6]);

  /// see [ImageDocument.relatedDatapoint]
  static final relatedDatapoint =
      QueryRelationToOne<ImageDocument, DataPoint>(_entities[7].properties[7]);

  /// see [ImageDocument.profile]
  static final profile = QueryRelationToOne<ImageDocument, ProfileDocument>(
      _entities[7].properties[8]);
}

/// [LinkDocument] entity fields to define ObjectBox queries.
class LinkDocument_ {
  /// see [LinkDocument.id]
  static final id =
      QueryIntegerProperty<LinkDocument>(_entities[8].properties[0]);

  /// see [LinkDocument.uri]
  static final uri =
      QueryStringProperty<LinkDocument>(_entities[8].properties[1]);

  /// see [LinkDocument.data]
  static final data =
      QueryStringProperty<LinkDocument>(_entities[8].properties[2]);

  /// see [LinkDocument.searchString]
  static final searchString =
      QueryStringProperty<LinkDocument>(_entities[8].properties[3]);

  /// see [LinkDocument.service]
  static final service = QueryRelationToOne<LinkDocument, ServiceDocument>(
      _entities[8].properties[4]);

  /// see [LinkDocument.relatedDatapoint]
  static final relatedDatapoint =
      QueryRelationToOne<LinkDocument, DataPoint>(_entities[8].properties[5]);

  /// see [LinkDocument.profile]
  static final profile = QueryRelationToOne<LinkDocument, ProfileDocument>(
      _entities[8].properties[6]);
}

/// [MonthBucket] entity fields to define ObjectBox queries.
class MonthBucket_ {
  /// see [MonthBucket.id]
  static final id =
      QueryIntegerProperty<MonthBucket>(_entities[9].properties[0]);

  /// see [MonthBucket.month]
  static final month =
      QueryIntegerProperty<MonthBucket>(_entities[9].properties[1]);

  /// see [MonthBucket.total]
  static final total =
      QueryIntegerProperty<MonthBucket>(_entities[9].properties[2]);

  /// see [MonthBucket.year]
  static final year =
      QueryRelationToOne<MonthBucket, YearBucket>(_entities[9].properties[3]);

  /// see [MonthBucket.dbCategoryMap]
  static final dbCategoryMap =
      QueryStringProperty<MonthBucket>(_entities[9].properties[4]);

  /// see [MonthBucket.dbServiceMap]
  static final dbServiceMap =
      QueryStringProperty<MonthBucket>(_entities[9].properties[5]);

  /// see [MonthBucket.days]
  static final days =
      QueryRelationToMany<MonthBucket, DayBucket>(_entities[9].relations[0]);
}

/// [ProfileDocument] entity fields to define ObjectBox queries.
class ProfileDocument_ {
  /// see [ProfileDocument.id]
  static final id =
      QueryIntegerProperty<ProfileDocument>(_entities[10].properties[0]);

  /// see [ProfileDocument.name]
  static final name =
      QueryStringProperty<ProfileDocument>(_entities[10].properties[1]);

  /// see [ProfileDocument.service]
  static final service = QueryRelationToOne<ProfileDocument, ServiceDocument>(
      _entities[10].properties[2]);

  /// see [ProfileDocument.profilePicture]
  static final profilePicture =
      QueryRelationToOne<ProfileDocument, ImageDocument>(
          _entities[10].properties[3]);

  /// see [ProfileDocument.dataPoints]
  static final dataPoints = QueryRelationToMany<ProfileDocument, DataPoint>(
      _entities[10].relations[0]);
}

/// [ServiceDocument] entity fields to define ObjectBox queries.
class ServiceDocument_ {
  /// see [ServiceDocument.id]
  static final id =
      QueryIntegerProperty<ServiceDocument>(_entities[11].properties[0]);

  /// see [ServiceDocument.serviceName]
  static final serviceName =
      QueryStringProperty<ServiceDocument>(_entities[11].properties[1]);

  /// see [ServiceDocument.companyName]
  static final companyName =
      QueryStringProperty<ServiceDocument>(_entities[11].properties[2]);

  /// see [ServiceDocument.image]
  static final image =
      QueryStringProperty<ServiceDocument>(_entities[11].properties[3]);

  /// see [ServiceDocument.totalDatapoints]
  static final totalDatapoints =
      QueryIntegerProperty<ServiceDocument>(_entities[11].properties[4]);
}

/// [ServiceObjectBox] entity fields to define ObjectBox queries.
class ServiceObjectBox_ {
  /// see [ServiceObjectBox.id]
  static final id =
      QueryIntegerProperty<ServiceObjectBox>(_entities[12].properties[0]);

  /// see [ServiceObjectBox.name]
  static final name =
      QueryStringProperty<ServiceObjectBox>(_entities[12].properties[1]);

  /// see [ServiceObjectBox.company]
  static final company =
      QueryStringProperty<ServiceObjectBox>(_entities[12].properties[2]);

  /// see [ServiceObjectBox.image]
  static final image =
      QueryStringProperty<ServiceObjectBox>(_entities[12].properties[3]);
}

/// [VideoDocument] entity fields to define ObjectBox queries.
class VideoDocument_ {
  /// see [VideoDocument.id]
  static final id =
      QueryIntegerProperty<VideoDocument>(_entities[13].properties[0]);

  /// see [VideoDocument.uri]
  static final uri =
      QueryStringProperty<VideoDocument>(_entities[13].properties[1]);

  /// see [VideoDocument.data]
  static final data =
      QueryStringProperty<VideoDocument>(_entities[13].properties[2]);

  /// see [VideoDocument.searchString]
  static final searchString =
      QueryStringProperty<VideoDocument>(_entities[13].properties[3]);

  /// see [VideoDocument.thumbnail]
  static final thumbnail =
      QueryStringProperty<VideoDocument>(_entities[13].properties[4]);

  /// see [VideoDocument.service]
  static final service = QueryRelationToOne<VideoDocument, ServiceDocument>(
      _entities[13].properties[5]);

  /// see [VideoDocument.relatedDatapoint]
  static final relatedDatapoint =
      QueryRelationToOne<VideoDocument, DataPoint>(_entities[13].properties[6]);

  /// see [VideoDocument.profile]
  static final profile = QueryRelationToOne<VideoDocument, ProfileDocument>(
      _entities[13].properties[7]);
}

/// [YearBucket] entity fields to define ObjectBox queries.
class YearBucket_ {
  /// see [YearBucket.id]
  static final id =
      QueryIntegerProperty<YearBucket>(_entities[14].properties[0]);

  /// see [YearBucket.year]
  static final year =
      QueryIntegerProperty<YearBucket>(_entities[14].properties[1]);

  /// see [YearBucket.total]
  static final total =
      QueryIntegerProperty<YearBucket>(_entities[14].properties[2]);

  /// see [YearBucket.dbCategoryMap]
  static final dbCategoryMap =
      QueryStringProperty<YearBucket>(_entities[14].properties[3]);

  /// see [YearBucket.dbServiceMap]
  static final dbServiceMap =
      QueryStringProperty<YearBucket>(_entities[14].properties[4]);

  /// see [YearBucket.months]
  static final months =
      QueryRelationToMany<YearBucket, MonthBucket>(_entities[14].relations[0]);
}
