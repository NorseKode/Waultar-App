// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../core/inodes/media_documents.dart';
import '../../core/inodes/service_document.dart';
import '../../core/inodes/tree_nodes.dart';
import '../../data/entities/misc/appsettings_objectbox.dart';
import '../../data/entities/misc/email_objectbox.dart';
import '../../data/entities/misc/reaction_objectbox.dart';
import '../../data/entities/misc/service_objectbox.dart';
import '../../data/entities/profile/profile_objectbox.dart';
import '../../data/entities/timebuckets/buckets.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 7834056261123030721),
      name: 'AppSettingsObjectBox',
      lastPropertyId: const IdUid(2, 7429737648341446733),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4260287520316928885),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7429737648341446733),
            name: 'darkmode',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 2545602216735526240),
      name: 'DataCategory',
      lastPropertyId: const IdUid(5, 3662926731988330108),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4382496973631760426),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1407337580568509695),
            name: 'count',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 279239772432166158),
            name: 'matchingFoldersFacebook',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5019787714920913049),
            name: 'matchingFoldersInstagram',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3662926731988330108),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(1, 2763432892669994482))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'dataPointNames',
            srcEntity: 'DataPointName',
            srcField: 'dataCategory')
      ]),
  ModelEntity(
      id: const IdUid(3, 8917222235638113917),
      name: 'DataPoint',
      lastPropertyId: const IdUid(8, 5303201488439730472),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1524650851661221954),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8361052232288450448),
            name: 'dataPointNameId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 7918162212752227580),
            relationTarget: 'DataPointName'),
        ModelProperty(
            id: const IdUid(3, 3885310298478337305),
            name: 'stringName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 253481547321659222),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 5328805702971075363),
            relationTarget: 'DataCategory'),
        ModelProperty(
            id: const IdUid(5, 5412148764396366548),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 8742666576367420543),
            relationTarget: 'ProfileDocument'),
        ModelProperty(
            id: const IdUid(6, 8788405237340705196),
            name: 'serviceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(5, 7517539489618019806),
            relationTarget: 'ServiceDocument'),
        ModelProperty(
            id: const IdUid(7, 910866957045995673),
            name: 'searchStrings',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5303201488439730472),
            name: 'values',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 4844995491182220536),
            name: 'images',
            targetId: const IdUid(8, 929679072474116873)),
        ModelRelation(
            id: const IdUid(2, 2453434773487975698),
            name: 'videos',
            targetId: const IdUid(15, 4364972941220304426)),
        ModelRelation(
            id: const IdUid(3, 5159634725271178746),
            name: 'files',
            targetId: const IdUid(7, 8888039493341285647)),
        ModelRelation(
            id: const IdUid(4, 7926535157289037075),
            name: 'links',
            targetId: const IdUid(9, 5070913239699987641))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 4429740613497062739),
      name: 'DataPointName',
      lastPropertyId: const IdUid(6, 5478597536402906313),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4789748198917769552),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1752438545678876816),
            name: 'count',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1281563185998049457),
            name: 'name',
            type: 9,
            flags: 2048,
            indexId: const IdUid(6, 6270092616399386543)),
        ModelProperty(
            id: const IdUid(4, 8489703768447969323),
            name: 'dataCategoryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(7, 2179143009846975786),
            relationTarget: 'DataCategory'),
        ModelProperty(
            id: const IdUid(5, 8889119504123107285),
            name: 'serviceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(8, 8900183732427399912),
            relationTarget: 'ServiceDocument'),
        ModelProperty(
            id: const IdUid(6, 5478597536402906313),
            name: 'parentId',
            type: 11,
            flags: 520,
            indexId: const IdUid(9, 2309196373960669133),
            relationTarget: 'DataPointName')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(5, 7354150577313853320),
            name: 'children',
            targetId: const IdUid(4, 4429740613497062739))
      ],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'dataPoints',
            srcEntity: 'DataPoint',
            srcField: 'dataPointName')
      ]),
  ModelEntity(
      id: const IdUid(5, 6568047444139187321),
      name: 'DayBucket',
      lastPropertyId: const IdUid(5, 2757289361892922634),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 749897835865338679),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6293283804882938509),
            name: 'day',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1880271629768708773),
            name: 'total',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6159913838161706207),
            name: 'stringMap',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2757289361892922634),
            name: 'monthId',
            type: 11,
            flags: 520,
            indexId: const IdUid(10, 6848227179313182502),
            relationTarget: 'MonthBucket')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(6, 421835247011885928),
            name: 'dataPoints',
            targetId: const IdUid(3, 8917222235638113917))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 424427798034902871),
      name: 'EmailObjectBox',
      lastPropertyId: const IdUid(4, 436176906306225571),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2497604278635270152),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4516390840286587539),
            name: 'raw',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7998610040078270712),
            name: 'email',
            type: 9,
            flags: 2080,
            indexId: const IdUid(11, 5717138475009070798)),
        ModelProperty(
            id: const IdUid(4, 436176906306225571),
            name: 'isCurrent',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 8888039493341285647),
      name: 'FileDocument',
      lastPropertyId: const IdUid(8, 5836615945263555556),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5521038941145810746),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7990012305659672778),
            name: 'uri',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3842296585016437893),
            name: 'data',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5389677674453005380),
            name: 'searchString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2867259214656669003),
            name: 'thumbnail',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7333030129801828360),
            name: 'serviceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(12, 3085230917494681413),
            relationTarget: 'ServiceDocument'),
        ModelProperty(
            id: const IdUid(7, 9176177641035532213),
            name: 'relatedDatapointId',
            type: 11,
            flags: 520,
            indexId: const IdUid(13, 4405613472248298170),
            relationTarget: 'DataPoint'),
        ModelProperty(
            id: const IdUid(8, 5836615945263555556),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(14, 1526241638409875592),
            relationTarget: 'ProfileDocument')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 929679072474116873),
      name: 'ImageDocument',
      lastPropertyId: const IdUid(10, 5586850334699011783),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 9096923578556519169),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8841324803287737473),
            name: 'uri',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7727727049886519506),
            name: 'data',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2339855497449570291),
            name: 'searchString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5917066791779948339),
            name: 'mediaTags',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2815796083201255252),
            name: 'serviceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(15, 3339759489608494721),
            relationTarget: 'ServiceDocument'),
        ModelProperty(
            id: const IdUid(7, 5317353096560042498),
            name: 'relatedDatapointId',
            type: 11,
            flags: 520,
            indexId: const IdUid(16, 4866476154543393534),
            relationTarget: 'DataPoint'),
        ModelProperty(
            id: const IdUid(8, 8910046944829696543),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(17, 2489648934869665688),
            relationTarget: 'ProfileDocument'),
        ModelProperty(
            id: const IdUid(10, 5586850334699011783),
            name: 'mediaTagScores',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 5070913239699987641),
      name: 'LinkDocument',
      lastPropertyId: const IdUid(7, 1609672003337020073),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1930173086024396811),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8260158427446838366),
            name: 'uri',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8058493046900094092),
            name: 'data',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3792682541312257666),
            name: 'searchString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 178186312082720254),
            name: 'serviceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(18, 5375862390545947415),
            relationTarget: 'ServiceDocument'),
        ModelProperty(
            id: const IdUid(6, 7458334489993557593),
            name: 'relatedDatapointId',
            type: 11,
            flags: 520,
            indexId: const IdUid(19, 1536430007319696509),
            relationTarget: 'DataPoint'),
        ModelProperty(
            id: const IdUid(7, 1609672003337020073),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(20, 1507053255183568980),
            relationTarget: 'ProfileDocument')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(10, 2909110349470444480),
      name: 'MonthBucket',
      lastPropertyId: const IdUid(5, 1209414230391737880),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3332334462264608825),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4066151381732926328),
            name: 'month',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3133208343913367579),
            name: 'total',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2314761643972792169),
            name: 'stringMap',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1209414230391737880),
            name: 'yearId',
            type: 11,
            flags: 520,
            indexId: const IdUid(21, 2411177024708518689),
            relationTarget: 'YearBucket')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(7, 4147423090795211811),
            name: 'days',
            targetId: const IdUid(5, 6568047444139187321))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(11, 3972033701716504517),
      name: 'ProfileDocument',
      lastPropertyId: const IdUid(5, 2878982237984571059),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2694095092031849040),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 582248991328757634),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2266933653095379999),
            name: 'serviceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(22, 5559977771359147006),
            relationTarget: 'ServiceDocument'),
        ModelProperty(
            id: const IdUid(4, 1926110177736995999),
            name: 'dataPointId',
            type: 11,
            flags: 520,
            indexId: const IdUid(23, 5779440867012389900),
            relationTarget: 'DataPoint'),
        ModelProperty(
            id: const IdUid(5, 2878982237984571059),
            name: 'profilePictureId',
            type: 11,
            flags: 520,
            indexId: const IdUid(24, 8668902141469102487),
            relationTarget: 'ImageDocument')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(12, 5321399500116833041),
      name: 'ReactionObjectBox',
      lastPropertyId: const IdUid(3, 5936911026582914942),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5950301148866187688),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6673107260521646984),
            name: 'raw',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5936911026582914942),
            name: 'reaction',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(13, 1051235736584635768),
      name: 'ServiceDocument',
      lastPropertyId: const IdUid(5, 5417604347211876276),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5215523805482725993),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 330934592702895584),
            name: 'serviceName',
            type: 9,
            flags: 2080,
            indexId: const IdUid(25, 1476099992741202099)),
        ModelProperty(
            id: const IdUid(3, 5644215672965894306),
            name: 'companyName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4076588914349425547),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5417604347211876276),
            name: 'totalDatapoints',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(14, 3303166402623103877),
      name: 'ServiceObjectBox',
      lastPropertyId: const IdUid(4, 4067435649050047939),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8543531469443642455),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1116685999377107600),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(26, 2920768722753174378)),
        ModelProperty(
            id: const IdUid(3, 6830457839039626609),
            name: 'company',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4067435649050047939),
            name: 'image',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(15, 4364972941220304426),
      name: 'VideoDocument',
      lastPropertyId: const IdUid(8, 3552541685079998469),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3118687607068204575),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 960994666291660095),
            name: 'uri',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3818738281247970387),
            name: 'data',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2182277957391018347),
            name: 'searchString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3314798003408567899),
            name: 'thumbnail',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 9193290295732356496),
            name: 'serviceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(27, 4098853128607014784),
            relationTarget: 'ServiceDocument'),
        ModelProperty(
            id: const IdUid(7, 4568273811622905878),
            name: 'relatedDatapointId',
            type: 11,
            flags: 520,
            indexId: const IdUid(28, 4218717420577058424),
            relationTarget: 'DataPoint'),
        ModelProperty(
            id: const IdUid(8, 3552541685079998469),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(29, 7802097212354069056),
            relationTarget: 'ProfileDocument')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(16, 6008206371282824188),
      name: 'YearBucket',
      lastPropertyId: const IdUid(4, 2460629711739615524),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6255499028338332714),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 834327685216546209),
            name: 'year',
            type: 6,
            flags: 40,
            indexId: const IdUid(30, 1048652513632810362)),
        ModelProperty(
            id: const IdUid(3, 1138135022952926539),
            name: 'total',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2460629711739615524),
            name: 'stringMap',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(8, 699962379342970965),
            name: 'months',
            targetId: const IdUid(10, 2909110349470444480))
      ],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(16, 6008206371282824188),
      lastIndexId: const IdUid(30, 1048652513632810362),
      lastRelationId: const IdUid(8, 699962379342970965),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [4127890459176941997],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    AppSettingsObjectBox: EntityDefinition<AppSettingsObjectBox>(
        model: _entities[0],
        toOneRelations: (AppSettingsObjectBox object) => [],
        toManyRelations: (AppSettingsObjectBox object) => {},
        getId: (AppSettingsObjectBox object) => object.id,
        setId: (AppSettingsObjectBox object, int id) {
          object.id = id;
        },
        objectToFB: (AppSettingsObjectBox object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.darkmode);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AppSettingsObjectBox(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false));

          return object;
        }),
    DataCategory: EntityDefinition<DataCategory>(
        model: _entities[1],
        toOneRelations: (DataCategory object) => [],
        toManyRelations: (DataCategory object) => {
              RelInfo<DataPointName>.toOneBacklink(4, object.id,
                      (DataPointName srcObject) => srcObject.dataCategory):
                  object.dataPointNames
            },
        getId: (DataCategory object) => object.id,
        setId: (DataCategory object, int id) {
          object.id = id;
        },
        objectToFB: (DataCategory object, fb.Builder fbb) {
          final matchingFoldersFacebookOffset = fbb.writeList(object
              .matchingFoldersFacebook
              .map(fbb.writeString)
              .toList(growable: false));
          final matchingFoldersInstagramOffset = fbb.writeList(object
              .matchingFoldersInstagram
              .map(fbb.writeString)
              .toList(growable: false));
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.count);
          fbb.addOffset(2, matchingFoldersFacebookOffset);
          fbb.addOffset(3, matchingFoldersInstagramOffset);
          fbb.addOffset(4, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DataCategory(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              count: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              matchingFoldersFacebook: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGet(buffer, rootOffset, 8, []),
              matchingFoldersInstagram: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGet(buffer, rootOffset, 10, []));
          InternalToManyAccess.setRelInfo(
              object.dataPointNames,
              store,
              RelInfo<DataPointName>.toOneBacklink(4, object.id,
                  (DataPointName srcObject) => srcObject.dataCategory),
              store.box<DataCategory>());
          return object;
        }),
    DataPoint: EntityDefinition<DataPoint>(
        model: _entities[2],
        toOneRelations: (DataPoint object) => [
              object.dataPointName,
              object.category,
              object.profile,
              object.service
            ],
        toManyRelations: (DataPoint object) => {
              RelInfo<DataPoint>.toMany(1, object.id): object.images,
              RelInfo<DataPoint>.toMany(2, object.id): object.videos,
              RelInfo<DataPoint>.toMany(3, object.id): object.files,
              RelInfo<DataPoint>.toMany(4, object.id): object.links
            },
        getId: (DataPoint object) => object.id,
        setId: (DataPoint object, int id) {
          object.id = id;
        },
        objectToFB: (DataPoint object, fb.Builder fbb) {
          final stringNameOffset = fbb.writeString(object.stringName);
          final searchStringsOffset = fbb.writeList(object.searchStrings
              .map(fbb.writeString)
              .toList(growable: false));
          final valuesOffset = fbb.writeString(object.values);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.dataPointName.targetId);
          fbb.addOffset(2, stringNameOffset);
          fbb.addInt64(3, object.category.targetId);
          fbb.addInt64(4, object.profile.targetId);
          fbb.addInt64(5, object.service.targetId);
          fbb.addOffset(6, searchStringsOffset);
          fbb.addOffset(7, valuesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DataPoint(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0))
            ..stringName = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..searchStrings = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 16, [])
            ..values = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 18, '');
          object.dataPointName.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.dataPointName.attach(store);
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.category.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.profile.attach(store);
          object.service.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.service.attach(store);
          InternalToManyAccess.setRelInfo(object.images, store,
              RelInfo<DataPoint>.toMany(1, object.id), store.box<DataPoint>());
          InternalToManyAccess.setRelInfo(object.videos, store,
              RelInfo<DataPoint>.toMany(2, object.id), store.box<DataPoint>());
          InternalToManyAccess.setRelInfo(object.files, store,
              RelInfo<DataPoint>.toMany(3, object.id), store.box<DataPoint>());
          InternalToManyAccess.setRelInfo(object.links, store,
              RelInfo<DataPoint>.toMany(4, object.id), store.box<DataPoint>());
          return object;
        }),
    DataPointName: EntityDefinition<DataPointName>(
        model: _entities[3],
        toOneRelations: (DataPointName object) =>
            [object.dataCategory, object.service, object.parent],
        toManyRelations: (DataPointName object) => {
              RelInfo<DataPointName>.toMany(5, object.id): object.children,
              RelInfo<DataPoint>.toOneBacklink(2, object.id,
                      (DataPoint srcObject) => srcObject.dataPointName):
                  object.dataPoints
            },
        getId: (DataPointName object) => object.id,
        setId: (DataPointName object, int id) {
          object.id = id;
        },
        objectToFB: (DataPointName object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.count);
          fbb.addOffset(2, nameOffset);
          fbb.addInt64(3, object.dataCategory.targetId);
          fbb.addInt64(4, object.service.targetId);
          fbb.addInt64(5, object.parent.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DataPointName(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              count: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''));
          object.dataCategory.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.dataCategory.attach(store);
          object.service.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.service.attach(store);
          object.parent.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.parent.attach(store);
          InternalToManyAccess.setRelInfo(
              object.children,
              store,
              RelInfo<DataPointName>.toMany(5, object.id),
              store.box<DataPointName>());
          InternalToManyAccess.setRelInfo(
              object.dataPoints,
              store,
              RelInfo<DataPoint>.toOneBacklink(2, object.id,
                  (DataPoint srcObject) => srcObject.dataPointName),
              store.box<DataPointName>());
          return object;
        }),
    DayBucket: EntityDefinition<DayBucket>(
        model: _entities[4],
        toOneRelations: (DayBucket object) => [object.month],
        toManyRelations: (DayBucket object) =>
            {RelInfo<DayBucket>.toMany(6, object.id): object.dataPoints},
        getId: (DayBucket object) => object.id,
        setId: (DayBucket object, int id) {
          object.id = id;
        },
        objectToFB: (DayBucket object, fb.Builder fbb) {
          final stringMapOffset = fbb.writeString(object.stringMap);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.day);
          fbb.addInt64(2, object.total);
          fbb.addOffset(3, stringMapOffset);
          fbb.addInt64(4, object.month.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DayBucket(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              total: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              day: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              stringMap: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));
          object.month.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.month.attach(store);
          InternalToManyAccess.setRelInfo(object.dataPoints, store,
              RelInfo<DayBucket>.toMany(6, object.id), store.box<DayBucket>());
          return object;
        }),
    EmailObjectBox: EntityDefinition<EmailObjectBox>(
        model: _entities[5],
        toOneRelations: (EmailObjectBox object) => [],
        toManyRelations: (EmailObjectBox object) => {},
        getId: (EmailObjectBox object) => object.id,
        setId: (EmailObjectBox object, int id) {
          object.id = id;
        },
        objectToFB: (EmailObjectBox object, fb.Builder fbb) {
          final rawOffset = fbb.writeString(object.raw);
          final emailOffset = fbb.writeString(object.email);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, rawOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addBool(3, object.isCurrent);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = EmailObjectBox(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              raw: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              isCurrent: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 10, false));

          return object;
        }),
    FileDocument: EntityDefinition<FileDocument>(
        model: _entities[6],
        toOneRelations: (FileDocument object) =>
            [object.service, object.relatedDatapoint, object.profile],
        toManyRelations: (FileDocument object) => {},
        getId: (FileDocument object) => object.id,
        setId: (FileDocument object, int id) {
          object.id = id;
        },
        objectToFB: (FileDocument object, fb.Builder fbb) {
          final uriOffset = fbb.writeString(object.uri);
          final dataOffset = fbb.writeString(object.data);
          final searchStringOffset = fbb.writeString(object.searchString);
          final thumbnailOffset = object.thumbnail == null
              ? null
              : fbb.writeString(object.thumbnail!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uriOffset);
          fbb.addOffset(2, dataOffset);
          fbb.addOffset(3, searchStringOffset);
          fbb.addOffset(4, thumbnailOffset);
          fbb.addInt64(5, object.service.targetId);
          fbb.addInt64(6, object.relatedDatapoint.targetId);
          fbb.addInt64(7, object.profile.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = FileDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              uri: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              data: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              thumbnail: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              searchString: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));
          object.service.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.service.attach(store);
          object.relatedDatapoint.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.relatedDatapoint.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.profile.attach(store);
          return object;
        }),
    ImageDocument: EntityDefinition<ImageDocument>(
        model: _entities[7],
        toOneRelations: (ImageDocument object) =>
            [object.service, object.relatedDatapoint, object.profile],
        toManyRelations: (ImageDocument object) => {},
        getId: (ImageDocument object) => object.id,
        setId: (ImageDocument object, int id) {
          object.id = id;
        },
        objectToFB: (ImageDocument object, fb.Builder fbb) {
          final uriOffset = fbb.writeString(object.uri);
          final dataOffset = fbb.writeString(object.data);
          final searchStringOffset = fbb.writeString(object.searchString);
          final mediaTagsOffset = fbb.writeString(object.mediaTags);
          final mediaTagScoresOffset = fbb.writeList(object.mediaTagScores
              .map(fbb.writeString)
              .toList(growable: false));
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uriOffset);
          fbb.addOffset(2, dataOffset);
          fbb.addOffset(3, searchStringOffset);
          fbb.addOffset(4, mediaTagsOffset);
          fbb.addInt64(5, object.service.targetId);
          fbb.addInt64(6, object.relatedDatapoint.targetId);
          fbb.addInt64(7, object.profile.targetId);
          fbb.addOffset(9, mediaTagScoresOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ImageDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              uri: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              data: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              searchString: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''))
            ..mediaTags = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..mediaTagScores = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 22, []);
          object.service.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.service.attach(store);
          object.relatedDatapoint.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.relatedDatapoint.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.profile.attach(store);
          return object;
        }),
    LinkDocument: EntityDefinition<LinkDocument>(
        model: _entities[8],
        toOneRelations: (LinkDocument object) =>
            [object.service, object.relatedDatapoint, object.profile],
        toManyRelations: (LinkDocument object) => {},
        getId: (LinkDocument object) => object.id,
        setId: (LinkDocument object, int id) {
          object.id = id;
        },
        objectToFB: (LinkDocument object, fb.Builder fbb) {
          final uriOffset = fbb.writeString(object.uri);
          final dataOffset = fbb.writeString(object.data);
          final searchStringOffset = object.searchString == null
              ? null
              : fbb.writeString(object.searchString!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uriOffset);
          fbb.addOffset(2, dataOffset);
          fbb.addOffset(3, searchStringOffset);
          fbb.addInt64(4, object.service.targetId);
          fbb.addInt64(5, object.relatedDatapoint.targetId);
          fbb.addInt64(6, object.profile.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = LinkDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              uri: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              data: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              searchString: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10));
          object.service.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.service.attach(store);
          object.relatedDatapoint.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.relatedDatapoint.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.profile.attach(store);
          return object;
        }),
    MonthBucket: EntityDefinition<MonthBucket>(
        model: _entities[9],
        toOneRelations: (MonthBucket object) => [object.year],
        toManyRelations: (MonthBucket object) =>
            {RelInfo<MonthBucket>.toMany(7, object.id): object.days},
        getId: (MonthBucket object) => object.id,
        setId: (MonthBucket object, int id) {
          object.id = id;
        },
        objectToFB: (MonthBucket object, fb.Builder fbb) {
          final stringMapOffset = fbb.writeString(object.stringMap);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.month);
          fbb.addInt64(2, object.total);
          fbb.addOffset(3, stringMapOffset);
          fbb.addInt64(4, object.year.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = MonthBucket(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              total: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              month: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              stringMap: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));
          object.year.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.year.attach(store);
          InternalToManyAccess.setRelInfo(
              object.days,
              store,
              RelInfo<MonthBucket>.toMany(7, object.id),
              store.box<MonthBucket>());
          return object;
        }),
    ProfileDocument: EntityDefinition<ProfileDocument>(
        model: _entities[10],
        toOneRelations: (ProfileDocument object) =>
            [object.service, object.dataPoint, object.profilePicture],
        toManyRelations: (ProfileDocument object) => {},
        getId: (ProfileDocument object) => object.id,
        setId: (ProfileDocument object, int id) {
          object.id = id;
        },
        objectToFB: (ProfileDocument object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.service.targetId);
          fbb.addInt64(3, object.dataPoint.targetId);
          fbb.addInt64(4, object.profilePicture.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProfileDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));
          object.service.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.service.attach(store);
          object.dataPoint.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.dataPoint.attach(store);
          object.profilePicture.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.profilePicture.attach(store);
          return object;
        }),
    ReactionObjectBox: EntityDefinition<ReactionObjectBox>(
        model: _entities[11],
        toOneRelations: (ReactionObjectBox object) => [],
        toManyRelations: (ReactionObjectBox object) => {},
        getId: (ReactionObjectBox object) => object.id,
        setId: (ReactionObjectBox object, int id) {
          object.id = id;
        },
        objectToFB: (ReactionObjectBox object, fb.Builder fbb) {
          final rawOffset = fbb.writeString(object.raw);
          final reactionOffset = fbb.writeString(object.reaction);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, rawOffset);
          fbb.addOffset(2, reactionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ReactionObjectBox(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              raw: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              reaction: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''));

          return object;
        }),
    ServiceDocument: EntityDefinition<ServiceDocument>(
        model: _entities[12],
        toOneRelations: (ServiceDocument object) => [],
        toManyRelations: (ServiceDocument object) => {},
        getId: (ServiceDocument object) => object.id,
        setId: (ServiceDocument object, int id) {
          object.id = id;
        },
        objectToFB: (ServiceDocument object, fb.Builder fbb) {
          final serviceNameOffset = fbb.writeString(object.serviceName);
          final companyNameOffset = fbb.writeString(object.companyName);
          final imageOffset = fbb.writeString(object.image);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, serviceNameOffset);
          fbb.addOffset(2, companyNameOffset);
          fbb.addOffset(3, imageOffset);
          fbb.addInt64(4, object.totalDatapoints);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ServiceDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              serviceName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              companyName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              image: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              totalDatapoints:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));

          return object;
        }),
    ServiceObjectBox: EntityDefinition<ServiceObjectBox>(
        model: _entities[13],
        toOneRelations: (ServiceObjectBox object) => [],
        toManyRelations: (ServiceObjectBox object) => {},
        getId: (ServiceObjectBox object) => object.id,
        setId: (ServiceObjectBox object, int id) {
          object.id = id;
        },
        objectToFB: (ServiceObjectBox object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final companyOffset = fbb.writeString(object.company);
          final imageOffset = fbb.writeString(object.image);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, companyOffset);
          fbb.addOffset(3, imageOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ServiceObjectBox(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              company: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              image: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));

          return object;
        }),
    VideoDocument: EntityDefinition<VideoDocument>(
        model: _entities[14],
        toOneRelations: (VideoDocument object) =>
            [object.service, object.relatedDatapoint, object.profile],
        toManyRelations: (VideoDocument object) => {},
        getId: (VideoDocument object) => object.id,
        setId: (VideoDocument object, int id) {
          object.id = id;
        },
        objectToFB: (VideoDocument object, fb.Builder fbb) {
          final uriOffset = fbb.writeString(object.uri);
          final dataOffset = fbb.writeString(object.data);
          final searchStringOffset = fbb.writeString(object.searchString);
          final thumbnailOffset = object.thumbnail == null
              ? null
              : fbb.writeString(object.thumbnail!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uriOffset);
          fbb.addOffset(2, dataOffset);
          fbb.addOffset(3, searchStringOffset);
          fbb.addOffset(4, thumbnailOffset);
          fbb.addInt64(5, object.service.targetId);
          fbb.addInt64(6, object.relatedDatapoint.targetId);
          fbb.addInt64(7, object.profile.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = VideoDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              uri: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              data: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              thumbnail: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              searchString: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));
          object.service.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.service.attach(store);
          object.relatedDatapoint.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.relatedDatapoint.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.profile.attach(store);
          return object;
        }),
    YearBucket: EntityDefinition<YearBucket>(
        model: _entities[15],
        toOneRelations: (YearBucket object) => [],
        toManyRelations: (YearBucket object) =>
            {RelInfo<YearBucket>.toMany(8, object.id): object.months},
        getId: (YearBucket object) => object.id,
        setId: (YearBucket object, int id) {
          object.id = id;
        },
        objectToFB: (YearBucket object, fb.Builder fbb) {
          final stringMapOffset = fbb.writeString(object.stringMap);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.year);
          fbb.addInt64(2, object.total);
          fbb.addOffset(3, stringMapOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = YearBucket(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              total: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              year: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              stringMap: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));
          InternalToManyAccess.setRelInfo(
              object.months,
              store,
              RelInfo<YearBucket>.toMany(8, object.id),
              store.box<YearBucket>());
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [AppSettingsObjectBox] entity fields to define ObjectBox queries.
class AppSettingsObjectBox_ {
  /// see [AppSettingsObjectBox.id]
  static final id =
      QueryIntegerProperty<AppSettingsObjectBox>(_entities[0].properties[0]);

  /// see [AppSettingsObjectBox.darkmode]
  static final darkmode =
      QueryBooleanProperty<AppSettingsObjectBox>(_entities[0].properties[1]);
}

/// [DataCategory] entity fields to define ObjectBox queries.
class DataCategory_ {
  /// see [DataCategory.id]
  static final id =
      QueryIntegerProperty<DataCategory>(_entities[1].properties[0]);

  /// see [DataCategory.count]
  static final count =
      QueryIntegerProperty<DataCategory>(_entities[1].properties[1]);

  /// see [DataCategory.matchingFoldersFacebook]
  static final matchingFoldersFacebook =
      QueryStringVectorProperty<DataCategory>(_entities[1].properties[2]);

  /// see [DataCategory.matchingFoldersInstagram]
  static final matchingFoldersInstagram =
      QueryStringVectorProperty<DataCategory>(_entities[1].properties[3]);

  /// see [DataCategory.name]
  static final name =
      QueryStringProperty<DataCategory>(_entities[1].properties[4]);
}

/// [DataPoint] entity fields to define ObjectBox queries.
class DataPoint_ {
  /// see [DataPoint.id]
  static final id = QueryIntegerProperty<DataPoint>(_entities[2].properties[0]);

  /// see [DataPoint.dataPointName]
  static final dataPointName =
      QueryRelationToOne<DataPoint, DataPointName>(_entities[2].properties[1]);

  /// see [DataPoint.stringName]
  static final stringName =
      QueryStringProperty<DataPoint>(_entities[2].properties[2]);

  /// see [DataPoint.category]
  static final category =
      QueryRelationToOne<DataPoint, DataCategory>(_entities[2].properties[3]);

  /// see [DataPoint.profile]
  static final profile = QueryRelationToOne<DataPoint, ProfileDocument>(
      _entities[2].properties[4]);

  /// see [DataPoint.service]
  static final service = QueryRelationToOne<DataPoint, ServiceDocument>(
      _entities[2].properties[5]);

  /// see [DataPoint.searchStrings]
  static final searchStrings =
      QueryStringVectorProperty<DataPoint>(_entities[2].properties[6]);

  /// see [DataPoint.values]
  static final values =
      QueryStringProperty<DataPoint>(_entities[2].properties[7]);

  /// see [DataPoint.images]
  static final images =
      QueryRelationToMany<DataPoint, ImageDocument>(_entities[2].relations[0]);

  /// see [DataPoint.videos]
  static final videos =
      QueryRelationToMany<DataPoint, VideoDocument>(_entities[2].relations[1]);

  /// see [DataPoint.files]
  static final files =
      QueryRelationToMany<DataPoint, FileDocument>(_entities[2].relations[2]);

  /// see [DataPoint.links]
  static final links =
      QueryRelationToMany<DataPoint, LinkDocument>(_entities[2].relations[3]);
}

/// [DataPointName] entity fields to define ObjectBox queries.
class DataPointName_ {
  /// see [DataPointName.id]
  static final id =
      QueryIntegerProperty<DataPointName>(_entities[3].properties[0]);

  /// see [DataPointName.count]
  static final count =
      QueryIntegerProperty<DataPointName>(_entities[3].properties[1]);

  /// see [DataPointName.name]
  static final name =
      QueryStringProperty<DataPointName>(_entities[3].properties[2]);

  /// see [DataPointName.dataCategory]
  static final dataCategory = QueryRelationToOne<DataPointName, DataCategory>(
      _entities[3].properties[3]);

  /// see [DataPointName.service]
  static final service = QueryRelationToOne<DataPointName, ServiceDocument>(
      _entities[3].properties[4]);

  /// see [DataPointName.parent]
  static final parent = QueryRelationToOne<DataPointName, DataPointName>(
      _entities[3].properties[5]);

  /// see [DataPointName.children]
  static final children = QueryRelationToMany<DataPointName, DataPointName>(
      _entities[3].relations[0]);
}

/// [DayBucket] entity fields to define ObjectBox queries.
class DayBucket_ {
  /// see [DayBucket.id]
  static final id = QueryIntegerProperty<DayBucket>(_entities[4].properties[0]);

  /// see [DayBucket.day]
  static final day =
      QueryIntegerProperty<DayBucket>(_entities[4].properties[1]);

  /// see [DayBucket.total]
  static final total =
      QueryIntegerProperty<DayBucket>(_entities[4].properties[2]);

  /// see [DayBucket.stringMap]
  static final stringMap =
      QueryStringProperty<DayBucket>(_entities[4].properties[3]);

  /// see [DayBucket.month]
  static final month =
      QueryRelationToOne<DayBucket, MonthBucket>(_entities[4].properties[4]);

  /// see [DayBucket.dataPoints]
  static final dataPoints =
      QueryRelationToMany<DayBucket, DataPoint>(_entities[4].relations[0]);
}

/// [EmailObjectBox] entity fields to define ObjectBox queries.
class EmailObjectBox_ {
  /// see [EmailObjectBox.id]
  static final id =
      QueryIntegerProperty<EmailObjectBox>(_entities[5].properties[0]);

  /// see [EmailObjectBox.raw]
  static final raw =
      QueryStringProperty<EmailObjectBox>(_entities[5].properties[1]);

  /// see [EmailObjectBox.email]
  static final email =
      QueryStringProperty<EmailObjectBox>(_entities[5].properties[2]);

  /// see [EmailObjectBox.isCurrent]
  static final isCurrent =
      QueryBooleanProperty<EmailObjectBox>(_entities[5].properties[3]);
}

/// [FileDocument] entity fields to define ObjectBox queries.
class FileDocument_ {
  /// see [FileDocument.id]
  static final id =
      QueryIntegerProperty<FileDocument>(_entities[6].properties[0]);

  /// see [FileDocument.uri]
  static final uri =
      QueryStringProperty<FileDocument>(_entities[6].properties[1]);

  /// see [FileDocument.data]
  static final data =
      QueryStringProperty<FileDocument>(_entities[6].properties[2]);

  /// see [FileDocument.searchString]
  static final searchString =
      QueryStringProperty<FileDocument>(_entities[6].properties[3]);

  /// see [FileDocument.thumbnail]
  static final thumbnail =
      QueryStringProperty<FileDocument>(_entities[6].properties[4]);

  /// see [FileDocument.service]
  static final service = QueryRelationToOne<FileDocument, ServiceDocument>(
      _entities[6].properties[5]);

  /// see [FileDocument.relatedDatapoint]
  static final relatedDatapoint =
      QueryRelationToOne<FileDocument, DataPoint>(_entities[6].properties[6]);

  /// see [FileDocument.profile]
  static final profile = QueryRelationToOne<FileDocument, ProfileDocument>(
      _entities[6].properties[7]);
}

/// [ImageDocument] entity fields to define ObjectBox queries.
class ImageDocument_ {
  /// see [ImageDocument.id]
  static final id =
      QueryIntegerProperty<ImageDocument>(_entities[7].properties[0]);

  /// see [ImageDocument.uri]
  static final uri =
      QueryStringProperty<ImageDocument>(_entities[7].properties[1]);

  /// see [ImageDocument.data]
  static final data =
      QueryStringProperty<ImageDocument>(_entities[7].properties[2]);

  /// see [ImageDocument.searchString]
  static final searchString =
      QueryStringProperty<ImageDocument>(_entities[7].properties[3]);

  /// see [ImageDocument.mediaTags]
  static final mediaTags =
      QueryStringProperty<ImageDocument>(_entities[7].properties[4]);

  /// see [ImageDocument.service]
  static final service = QueryRelationToOne<ImageDocument, ServiceDocument>(
      _entities[7].properties[5]);

  /// see [ImageDocument.relatedDatapoint]
  static final relatedDatapoint =
      QueryRelationToOne<ImageDocument, DataPoint>(_entities[7].properties[6]);

  /// see [ImageDocument.profile]
  static final profile = QueryRelationToOne<ImageDocument, ProfileDocument>(
      _entities[7].properties[7]);

  /// see [ImageDocument.mediaTagScores]
  static final mediaTagScores =
      QueryStringVectorProperty<ImageDocument>(_entities[7].properties[8]);
}

/// [LinkDocument] entity fields to define ObjectBox queries.
class LinkDocument_ {
  /// see [LinkDocument.id]
  static final id =
      QueryIntegerProperty<LinkDocument>(_entities[8].properties[0]);

  /// see [LinkDocument.uri]
  static final uri =
      QueryStringProperty<LinkDocument>(_entities[8].properties[1]);

  /// see [LinkDocument.data]
  static final data =
      QueryStringProperty<LinkDocument>(_entities[8].properties[2]);

  /// see [LinkDocument.searchString]
  static final searchString =
      QueryStringProperty<LinkDocument>(_entities[8].properties[3]);

  /// see [LinkDocument.service]
  static final service = QueryRelationToOne<LinkDocument, ServiceDocument>(
      _entities[8].properties[4]);

  /// see [LinkDocument.relatedDatapoint]
  static final relatedDatapoint =
      QueryRelationToOne<LinkDocument, DataPoint>(_entities[8].properties[5]);

  /// see [LinkDocument.profile]
  static final profile = QueryRelationToOne<LinkDocument, ProfileDocument>(
      _entities[8].properties[6]);
}

/// [MonthBucket] entity fields to define ObjectBox queries.
class MonthBucket_ {
  /// see [MonthBucket.id]
  static final id =
      QueryIntegerProperty<MonthBucket>(_entities[9].properties[0]);

  /// see [MonthBucket.month]
  static final month =
      QueryIntegerProperty<MonthBucket>(_entities[9].properties[1]);

  /// see [MonthBucket.total]
  static final total =
      QueryIntegerProperty<MonthBucket>(_entities[9].properties[2]);

  /// see [MonthBucket.stringMap]
  static final stringMap =
      QueryStringProperty<MonthBucket>(_entities[9].properties[3]);

  /// see [MonthBucket.year]
  static final year =
      QueryRelationToOne<MonthBucket, YearBucket>(_entities[9].properties[4]);

  /// see [MonthBucket.days]
  static final days =
      QueryRelationToMany<MonthBucket, DayBucket>(_entities[9].relations[0]);
}

/// [ProfileDocument] entity fields to define ObjectBox queries.
class ProfileDocument_ {
  /// see [ProfileDocument.id]
  static final id =
      QueryIntegerProperty<ProfileDocument>(_entities[10].properties[0]);

  /// see [ProfileDocument.name]
  static final name =
      QueryStringProperty<ProfileDocument>(_entities[10].properties[1]);

  /// see [ProfileDocument.service]
  static final service = QueryRelationToOne<ProfileDocument, ServiceDocument>(
      _entities[10].properties[2]);

  /// see [ProfileDocument.dataPoint]
  static final dataPoint = QueryRelationToOne<ProfileDocument, DataPoint>(
      _entities[10].properties[3]);

  /// see [ProfileDocument.profilePicture]
  static final profilePicture =
      QueryRelationToOne<ProfileDocument, ImageDocument>(
          _entities[10].properties[4]);
}

/// [ReactionObjectBox] entity fields to define ObjectBox queries.
class ReactionObjectBox_ {
  /// see [ReactionObjectBox.id]
  static final id =
      QueryIntegerProperty<ReactionObjectBox>(_entities[11].properties[0]);

  /// see [ReactionObjectBox.raw]
  static final raw =
      QueryStringProperty<ReactionObjectBox>(_entities[11].properties[1]);

  /// see [ReactionObjectBox.reaction]
  static final reaction =
      QueryStringProperty<ReactionObjectBox>(_entities[11].properties[2]);
}

/// [ServiceDocument] entity fields to define ObjectBox queries.
class ServiceDocument_ {
  /// see [ServiceDocument.id]
  static final id =
      QueryIntegerProperty<ServiceDocument>(_entities[12].properties[0]);

  /// see [ServiceDocument.serviceName]
  static final serviceName =
      QueryStringProperty<ServiceDocument>(_entities[12].properties[1]);

  /// see [ServiceDocument.companyName]
  static final companyName =
      QueryStringProperty<ServiceDocument>(_entities[12].properties[2]);

  /// see [ServiceDocument.image]
  static final image =
      QueryStringProperty<ServiceDocument>(_entities[12].properties[3]);

  /// see [ServiceDocument.totalDatapoints]
  static final totalDatapoints =
      QueryIntegerProperty<ServiceDocument>(_entities[12].properties[4]);
}

/// [ServiceObjectBox] entity fields to define ObjectBox queries.
class ServiceObjectBox_ {
  /// see [ServiceObjectBox.id]
  static final id =
      QueryIntegerProperty<ServiceObjectBox>(_entities[13].properties[0]);

  /// see [ServiceObjectBox.name]
  static final name =
      QueryStringProperty<ServiceObjectBox>(_entities[13].properties[1]);

  /// see [ServiceObjectBox.company]
  static final company =
      QueryStringProperty<ServiceObjectBox>(_entities[13].properties[2]);

  /// see [ServiceObjectBox.image]
  static final image =
      QueryStringProperty<ServiceObjectBox>(_entities[13].properties[3]);
}

/// [VideoDocument] entity fields to define ObjectBox queries.
class VideoDocument_ {
  /// see [VideoDocument.id]
  static final id =
      QueryIntegerProperty<VideoDocument>(_entities[14].properties[0]);

  /// see [VideoDocument.uri]
  static final uri =
      QueryStringProperty<VideoDocument>(_entities[14].properties[1]);

  /// see [VideoDocument.data]
  static final data =
      QueryStringProperty<VideoDocument>(_entities[14].properties[2]);

  /// see [VideoDocument.searchString]
  static final searchString =
      QueryStringProperty<VideoDocument>(_entities[14].properties[3]);

  /// see [VideoDocument.thumbnail]
  static final thumbnail =
      QueryStringProperty<VideoDocument>(_entities[14].properties[4]);

  /// see [VideoDocument.service]
  static final service = QueryRelationToOne<VideoDocument, ServiceDocument>(
      _entities[14].properties[5]);

  /// see [VideoDocument.relatedDatapoint]
  static final relatedDatapoint =
      QueryRelationToOne<VideoDocument, DataPoint>(_entities[14].properties[6]);

  /// see [VideoDocument.profile]
  static final profile = QueryRelationToOne<VideoDocument, ProfileDocument>(
      _entities[14].properties[7]);
}

/// [YearBucket] entity fields to define ObjectBox queries.
class YearBucket_ {
  /// see [YearBucket.id]
  static final id =
      QueryIntegerProperty<YearBucket>(_entities[15].properties[0]);

  /// see [YearBucket.year]
  static final year =
      QueryIntegerProperty<YearBucket>(_entities[15].properties[1]);

  /// see [YearBucket.total]
  static final total =
      QueryIntegerProperty<YearBucket>(_entities[15].properties[2]);

  /// see [YearBucket.stringMap]
  static final stringMap =
      QueryStringProperty<YearBucket>(_entities[15].properties[3]);

  /// see [YearBucket.months]
  static final months =
      QueryRelationToMany<YearBucket, MonthBucket>(_entities[15].relations[0]);
}
