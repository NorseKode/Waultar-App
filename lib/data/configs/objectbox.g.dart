// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../data/entities/media/file_document.dart';
import '../../data/entities/media/image_document.dart';
import '../../data/entities/media/link_document.dart';
import '../../data/entities/media/video_document.dart';
import '../../data/entities/misc/appsettings_document.dart';
import '../../data/entities/misc/profile_document.dart';
import '../../data/entities/misc/service_document.dart';
import '../../data/entities/nodes/category_node.dart';
import '../../data/entities/nodes/datapoint_node.dart';
import '../../data/entities/nodes/name_node.dart';
import '../../data/entities/timebuckets/day_bucket.dart';
import '../../data/entities/timebuckets/hour_bucket.dart';
import '../../data/entities/timebuckets/month_bucket.dart';
import '../../data/entities/timebuckets/weekday_average_bucket.dart';
import '../../data/entities/timebuckets/year_bucket.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 7879485694211559641),
      name: 'AppSettingsDocument',
      lastPropertyId: const IdUid(2, 5563334172640939731),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8903400885556049770),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5563334172640939731),
            name: 'darkmode',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 6227790963719594404),
      name: 'DataCategory',
      lastPropertyId: const IdUid(6, 6696299298522822058),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 9078603086039294256),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 843462192855629714),
            name: 'count',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6221473322823774572),
            name: 'matchingFoldersFacebook',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8669075755904727258),
            name: 'matchingFoldersInstagram',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7096559499743136402),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 9026339188897759389),
            relationTarget: 'ProfileDocument'),
        ModelProperty(
            id: const IdUid(6, 6696299298522822058),
            name: 'dbCategory',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'dataPointNames',
            srcEntity: 'DataPointName',
            srcField: 'dataCategory')
      ]),
  ModelEntity(
      id: const IdUid(3, 4374491481459768802),
      name: 'DataPoint',
      lastPropertyId: const IdUid(12, 1283703450585391357),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4741203479009608619),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7627963687683887288),
            name: 'dataPointNameId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 8248039492923415790),
            relationTarget: 'DataPointName'),
        ModelProperty(
            id: const IdUid(3, 6186377053585030038),
            name: 'stringName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4488649855848939349),
            name: 'sentimentScore',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5723768795227232592),
            name: 'sentimentText',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1969927260887549396),
            name: 'timestamp',
            type: 12,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8675850651311888012),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 2982545276902198420),
            relationTarget: 'DataCategory'),
        ModelProperty(
            id: const IdUid(8, 2576601728754776394),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 8528652195059090334),
            relationTarget: 'ProfileDocument'),
        ModelProperty(
            id: const IdUid(9, 6551138399946445237),
            name: 'searchTerms',
            type: 9,
            flags: 2048,
            indexId: const IdUid(5, 8301387034206106991)),
        ModelProperty(
            id: const IdUid(10, 6714797166688876943),
            name: 'valuesJsonBytes',
            type: 23,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 6383467449542986843),
            name: 'createdAt',
            type: 12,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 1283703450585391357),
            name: 'dbCreatedAt',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 2150231472051366872),
            name: 'images',
            targetId: const IdUid(8, 4271765530370306066)),
        ModelRelation(
            id: const IdUid(2, 7337186807935037875),
            name: 'videos',
            targetId: const IdUid(13, 3468930913080398257)),
        ModelRelation(
            id: const IdUid(3, 3620061082633329741),
            name: 'files',
            targetId: const IdUid(6, 1099945285148974926)),
        ModelRelation(
            id: const IdUid(4, 4797256576375808808),
            name: 'links',
            targetId: const IdUid(9, 2516367657216504128))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 8060343360803120013),
      name: 'DataPointName',
      lastPropertyId: const IdUid(6, 8820550197918159975),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8994731591685421224),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8867922632480176331),
            name: 'count',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7817699981729247723),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5027945192862583151),
            name: 'dataCategoryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(6, 7904580906492625134),
            relationTarget: 'DataCategory'),
        ModelProperty(
            id: const IdUid(5, 8229406696482457304),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(7, 9018233960518366820),
            relationTarget: 'ProfileDocument'),
        ModelProperty(
            id: const IdUid(6, 8820550197918159975),
            name: 'parentId',
            type: 11,
            flags: 520,
            indexId: const IdUid(8, 3971693183234776732),
            relationTarget: 'DataPointName')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'dataPoints',
            srcEntity: 'DataPoint',
            srcField: 'dataPointName'),
        ModelBacklink(
            name: 'children', srcEntity: 'DataPointName', srcField: 'parent')
      ]),
  ModelEntity(
      id: const IdUid(5, 5721235379011222817),
      name: 'DayBucket',
      lastPropertyId: const IdUid(10, 2298353077241642945),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 685273853992914611),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 646988010910893091),
            name: 'day',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8558093203348685878),
            name: 'weekDay',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4511261753288359445),
            name: 'dateTime',
            type: 12,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3127161236807283102),
            name: 'total',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2940604922261253548),
            name: 'monthId',
            type: 11,
            flags: 520,
            indexId: const IdUid(9, 6047700211032567801),
            relationTarget: 'MonthBucket'),
        ModelProperty(
            id: const IdUid(7, 6706694748028358427),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(10, 6547340769471702726),
            relationTarget: 'ProfileDocument'),
        ModelProperty(
            id: const IdUid(8, 6777509310387133832),
            name: 'dbDateTime',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5058447989450479137),
            name: 'dbCategorySentimentAverage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2298353077241642945),
            name: 'dbCategoryMap',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(5, 2718899582762393734),
            name: 'hours',
            targetId: const IdUid(7, 4806127929325375887)),
        ModelRelation(
            id: const IdUid(6, 2352795109517969533),
            name: 'dataPoints',
            targetId: const IdUid(3, 4374491481459768802))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 1099945285148974926),
      name: 'FileDocument',
      lastPropertyId: const IdUid(7, 5177265132085601697),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2335141094918165711),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5746885598880173853),
            name: 'uri',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3958881533902305016),
            name: 'data',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4651840973486862148),
            name: 'searchString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3985261336965103215),
            name: 'thumbnail',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7795508460038367943),
            name: 'relatedDatapointId',
            type: 11,
            flags: 520,
            indexId: const IdUid(11, 1957859879095771032),
            relationTarget: 'DataPoint'),
        ModelProperty(
            id: const IdUid(7, 5177265132085601697),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(12, 8570929865247363844),
            relationTarget: 'ProfileDocument')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 4806127929325375887),
      name: 'HourBucket',
      lastPropertyId: const IdUid(9, 4255372156519344542),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6163079115248668773),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3153926299614574183),
            name: 'hour',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1972182121865739295),
            name: 'dateTime',
            type: 12,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7867336867749948615),
            name: 'total',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1297874419158847306),
            name: 'dayId',
            type: 11,
            flags: 520,
            indexId: const IdUid(13, 8710040966927718431),
            relationTarget: 'DayBucket'),
        ModelProperty(
            id: const IdUid(6, 3303839833757792258),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(14, 7701825460293731673),
            relationTarget: 'ProfileDocument'),
        ModelProperty(
            id: const IdUid(7, 3384250003866206657),
            name: 'dbDateTime',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1168965388651061472),
            name: 'dbCategorySentimentAverage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4255372156519344542),
            name: 'dbCategoryMap',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(7, 7881674857152974500),
            name: 'dataPoints',
            targetId: const IdUid(3, 4374491481459768802))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 4271765530370306066),
      name: 'ImageDocument',
      lastPropertyId: const IdUid(8, 4251531309050115443),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 600380078495037485),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2921101101607140094),
            name: 'uri',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2905410255291856122),
            name: 'data',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1909966103130693636),
            name: 'searchString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8663534761533491611),
            name: 'mediaTags',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8771404909807619559),
            name: 'mediaTagScores',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8361850124458670210),
            name: 'relatedDatapointId',
            type: 11,
            flags: 520,
            indexId: const IdUid(15, 7527758283497455910),
            relationTarget: 'DataPoint'),
        ModelProperty(
            id: const IdUid(8, 4251531309050115443),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(16, 8231716754651723908),
            relationTarget: 'ProfileDocument')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 2516367657216504128),
      name: 'LinkDocument',
      lastPropertyId: const IdUid(6, 86391939594519149),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3968922899390479723),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4979842958884808289),
            name: 'uri',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6139578540076379863),
            name: 'data',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5330187882791594806),
            name: 'searchString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 912141736407213218),
            name: 'relatedDatapointId',
            type: 11,
            flags: 520,
            indexId: const IdUid(17, 7024185371144843104),
            relationTarget: 'DataPoint'),
        ModelProperty(
            id: const IdUid(6, 86391939594519149),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(18, 4822054370681705416),
            relationTarget: 'ProfileDocument')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(10, 5825903331054423314),
      name: 'MonthBucket',
      lastPropertyId: const IdUid(9, 8547448972814752437),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5160738262174192881),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2462878321058072692),
            name: 'month',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5226878936460638115),
            name: 'dateTime',
            type: 12,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6181798576087119283),
            name: 'total',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 826869602128783199),
            name: 'yearId',
            type: 11,
            flags: 520,
            indexId: const IdUid(19, 6292200629681830320),
            relationTarget: 'YearBucket'),
        ModelProperty(
            id: const IdUid(6, 6535692579885754144),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(20, 7266920322571583651),
            relationTarget: 'ProfileDocument'),
        ModelProperty(
            id: const IdUid(7, 3125565762748996818),
            name: 'dbDateTime',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1598771013300697362),
            name: 'dbCategorySentimentAverage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8547448972814752437),
            name: 'dbCategoryMap',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(8, 1058672130034703748),
            name: 'days',
            targetId: const IdUid(5, 5721235379011222817)),
        ModelRelation(
            id: const IdUid(9, 1013894023273101014),
            name: 'dataPoints',
            targetId: const IdUid(3, 4374491481459768802))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(11, 196236837499128912),
      name: 'ProfileDocument',
      lastPropertyId: const IdUid(5, 4141503754267751886),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6548016851371819613),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6849759743465720614),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1043166167926759427),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4757629863326884251),
            name: 'serviceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(21, 1027733158749118573),
            relationTarget: 'ServiceDocument'),
        ModelProperty(
            id: const IdUid(5, 4141503754267751886),
            name: 'profilePictureId',
            type: 11,
            flags: 520,
            indexId: const IdUid(22, 3003450731584387015),
            relationTarget: 'ImageDocument')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(10, 2513472625522091088),
            name: 'dataPoints',
            targetId: const IdUid(3, 4374491481459768802))
      ],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'categories', srcEntity: 'DataCategory', srcField: 'profile')
      ]),
  ModelEntity(
      id: const IdUid(12, 4539212527560336489),
      name: 'ServiceDocument',
      lastPropertyId: const IdUid(5, 5312565258172356098),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4429999966894416317),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 219503219145216004),
            name: 'serviceName',
            type: 9,
            flags: 2080,
            indexId: const IdUid(23, 4207027570892529501)),
        ModelProperty(
            id: const IdUid(3, 631715606709410924),
            name: 'companyName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3710487543358841757),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5312565258172356098),
            name: 'totalDatapoints',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(13, 3468930913080398257),
      name: 'VideoDocument',
      lastPropertyId: const IdUid(7, 8198151455163581224),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1907346319339380664),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6742593193651768581),
            name: 'uri',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6781569042514330377),
            name: 'data',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3508140264219984276),
            name: 'searchString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6924823571969725965),
            name: 'thumbnail',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8921050592518776867),
            name: 'relatedDatapointId',
            type: 11,
            flags: 520,
            indexId: const IdUid(24, 4133220879129237225),
            relationTarget: 'DataPoint'),
        ModelProperty(
            id: const IdUid(7, 8198151455163581224),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(25, 4422226110581794139),
            relationTarget: 'ProfileDocument')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(14, 1858142589943961308),
      name: 'WeekDayAverageComputed',
      lastPropertyId: const IdUid(4, 622639922094850246),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2361661467557873127),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6021811046887174501),
            name: 'weekDay',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8980613138111994440),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(26, 8308563523998168670),
            relationTarget: 'ProfileDocument'),
        ModelProperty(
            id: const IdUid(4, 622639922094850246),
            name: 'dbAverageCategoryMap',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(15, 4583057337339645685),
      name: 'YearBucket',
      lastPropertyId: const IdUid(8, 2556553776692186568),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1189664146672401342),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5966377491365982304),
            name: 'year',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2267267605644415192),
            name: 'dateTime',
            type: 12,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2048071155095192494),
            name: 'total',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7454198893150984111),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(27, 1271576821557099702),
            relationTarget: 'ProfileDocument'),
        ModelProperty(
            id: const IdUid(6, 6383870072893458129),
            name: 'dbDateTime',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1260885929972150230),
            name: 'dbCategorySentimentAverage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2556553776692186568),
            name: 'dbCategoryMap',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(11, 5079473741620385727),
            name: 'months',
            targetId: const IdUid(10, 5825903331054423314)),
        ModelRelation(
            id: const IdUid(12, 906166454314641792),
            name: 'dataPoints',
            targetId: const IdUid(3, 4374491481459768802))
      ],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(15, 4583057337339645685),
      lastIndexId: const IdUid(27, 1271576821557099702),
      lastRelationId: const IdUid(12, 906166454314641792),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    AppSettingsDocument: EntityDefinition<AppSettingsDocument>(
        model: _entities[0],
        toOneRelations: (AppSettingsDocument object) => [],
        toManyRelations: (AppSettingsDocument object) => {},
        getId: (AppSettingsDocument object) => object.id,
        setId: (AppSettingsDocument object, int id) {
          object.id = id;
        },
        objectToFB: (AppSettingsDocument object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.darkmode);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AppSettingsDocument(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false));

          return object;
        }),
    DataCategory: EntityDefinition<DataCategory>(
        model: _entities[1],
        toOneRelations: (DataCategory object) => [object.profile],
        toManyRelations: (DataCategory object) => {
              RelInfo<DataPointName>.toOneBacklink(4, object.id,
                      (DataPointName srcObject) => srcObject.dataCategory):
                  object.dataPointNames
            },
        getId: (DataCategory object) => object.id,
        setId: (DataCategory object, int id) {
          object.id = id;
        },
        objectToFB: (DataCategory object, fb.Builder fbb) {
          final matchingFoldersFacebookOffset = fbb.writeList(object
              .matchingFoldersFacebook
              .map(fbb.writeString)
              .toList(growable: false));
          final matchingFoldersInstagramOffset = fbb.writeList(object
              .matchingFoldersInstagram
              .map(fbb.writeString)
              .toList(growable: false));
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.count);
          fbb.addOffset(2, matchingFoldersFacebookOffset);
          fbb.addOffset(3, matchingFoldersInstagramOffset);
          fbb.addInt64(4, object.profile.targetId);
          fbb.addInt64(5, object.dbCategory);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DataCategory(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              count: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              matchingFoldersFacebook: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGet(buffer, rootOffset, 8, []),
              matchingFoldersInstagram: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGet(buffer, rootOffset, 10, []))
            ..dbCategory =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.profile.attach(store);
          InternalToManyAccess.setRelInfo(
              object.dataPointNames,
              store,
              RelInfo<DataPointName>.toOneBacklink(4, object.id,
                  (DataPointName srcObject) => srcObject.dataCategory),
              store.box<DataCategory>());
          return object;
        }),
    DataPoint: EntityDefinition<DataPoint>(
        model: _entities[2],
        toOneRelations: (DataPoint object) =>
            [object.dataPointName, object.category, object.profile],
        toManyRelations: (DataPoint object) => {
              RelInfo<DataPoint>.toMany(1, object.id): object.images,
              RelInfo<DataPoint>.toMany(2, object.id): object.videos,
              RelInfo<DataPoint>.toMany(3, object.id): object.files,
              RelInfo<DataPoint>.toMany(4, object.id): object.links
            },
        getId: (DataPoint object) => object.id,
        setId: (DataPoint object, int id) {
          object.id = id;
        },
        objectToFB: (DataPoint object, fb.Builder fbb) {
          final stringNameOffset = fbb.writeString(object.stringName);
          final sentimentTextOffset = object.sentimentText == null
              ? null
              : fbb.writeString(object.sentimentText!);
          final searchTermsOffset = fbb.writeString(object.searchTerms);
          final valuesJsonBytesOffset =
              fbb.writeListInt8(object.valuesJsonBytes);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.dataPointName.targetId);
          fbb.addOffset(2, stringNameOffset);
          fbb.addFloat64(3, object.sentimentScore);
          fbb.addOffset(4, sentimentTextOffset);
          fbb.addInt64(
              5,
              object.timestamp == null
                  ? null
                  : object.timestamp!.microsecondsSinceEpoch * 1000);
          fbb.addInt64(6, object.category.targetId);
          fbb.addInt64(7, object.profile.targetId);
          fbb.addOffset(8, searchTermsOffset);
          fbb.addOffset(9, valuesJsonBytesOffset);
          fbb.addInt64(10, object.createdAt.microsecondsSinceEpoch * 1000);
          fbb.addInt64(11, object.dbCreatedAt);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final timestampValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final object = DataPoint(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              searchTerms: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''))
            ..stringName = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..sentimentScore = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 10)
            ..sentimentText = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..timestamp = timestampValue == null
                ? null
                : DateTime.fromMicrosecondsSinceEpoch(
                    (timestampValue / 1000).round())
            ..valuesJsonBytes =
                const fb.ListReader<int>(fb.Int8Reader(), lazy: false)
                    .vTableGet(buffer, rootOffset, 22, [])
            ..createdAt = DateTime.fromMicrosecondsSinceEpoch(
                (const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0) /
                        1000)
                    .round())
            ..dbCreatedAt =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.dataPointName.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.dataPointName.attach(store);
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.category.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.profile.attach(store);
          InternalToManyAccess.setRelInfo(object.images, store,
              RelInfo<DataPoint>.toMany(1, object.id), store.box<DataPoint>());
          InternalToManyAccess.setRelInfo(object.videos, store,
              RelInfo<DataPoint>.toMany(2, object.id), store.box<DataPoint>());
          InternalToManyAccess.setRelInfo(object.files, store,
              RelInfo<DataPoint>.toMany(3, object.id), store.box<DataPoint>());
          InternalToManyAccess.setRelInfo(object.links, store,
              RelInfo<DataPoint>.toMany(4, object.id), store.box<DataPoint>());
          return object;
        }),
    DataPointName: EntityDefinition<DataPointName>(
        model: _entities[3],
        toOneRelations: (DataPointName object) =>
            [object.dataCategory, object.profile, object.parent],
        toManyRelations: (DataPointName object) => {
              RelInfo<DataPoint>.toOneBacklink(2, object.id,
                      (DataPoint srcObject) => srcObject.dataPointName):
                  object.dataPoints,
              RelInfo<DataPointName>.toOneBacklink(6, object.id,
                      (DataPointName srcObject) => srcObject.parent):
                  object.children
            },
        getId: (DataPointName object) => object.id,
        setId: (DataPointName object, int id) {
          object.id = id;
        },
        objectToFB: (DataPointName object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.count);
          fbb.addOffset(2, nameOffset);
          fbb.addInt64(3, object.dataCategory.targetId);
          fbb.addInt64(4, object.profile.targetId);
          fbb.addInt64(5, object.parent.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DataPointName(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              count: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''));
          object.dataCategory.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.dataCategory.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.profile.attach(store);
          object.parent.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.parent.attach(store);
          InternalToManyAccess.setRelInfo(
              object.dataPoints,
              store,
              RelInfo<DataPoint>.toOneBacklink(2, object.id,
                  (DataPoint srcObject) => srcObject.dataPointName),
              store.box<DataPointName>());
          InternalToManyAccess.setRelInfo(
              object.children,
              store,
              RelInfo<DataPointName>.toOneBacklink(
                  6, object.id, (DataPointName srcObject) => srcObject.parent),
              store.box<DataPointName>());
          return object;
        }),
    DayBucket: EntityDefinition<DayBucket>(
        model: _entities[4],
        toOneRelations: (DayBucket object) => [object.month, object.profile],
        toManyRelations: (DayBucket object) => {
              RelInfo<DayBucket>.toMany(5, object.id): object.hours,
              RelInfo<DayBucket>.toMany(6, object.id): object.dataPoints
            },
        getId: (DayBucket object) => object.id,
        setId: (DayBucket object, int id) {
          object.id = id;
        },
        objectToFB: (DayBucket object, fb.Builder fbb) {
          final dbCategorySentimentAverageOffset =
              fbb.writeString(object.dbCategorySentimentAverage);
          final dbCategoryMapOffset = fbb.writeString(object.dbCategoryMap);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.day);
          fbb.addInt64(2, object.weekDay);
          fbb.addInt64(3, object.dateTime.microsecondsSinceEpoch * 1000);
          fbb.addInt64(4, object.total);
          fbb.addInt64(5, object.month.targetId);
          fbb.addInt64(6, object.profile.targetId);
          fbb.addInt64(7, object.dbDateTime);
          fbb.addOffset(8, dbCategorySentimentAverageOffset);
          fbb.addOffset(9, dbCategoryMapOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DayBucket(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              total:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              day: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              weekDay:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              dateTime: DateTime.fromMicrosecondsSinceEpoch(
                  (const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0) /
                          1000)
                      .round()))
            ..dbDateTime =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)
            ..dbCategorySentimentAverage =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 20, '')
            ..dbCategoryMap = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 22, '');
          object.month.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.month.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.profile.attach(store);
          InternalToManyAccess.setRelInfo(object.hours, store,
              RelInfo<DayBucket>.toMany(5, object.id), store.box<DayBucket>());
          InternalToManyAccess.setRelInfo(object.dataPoints, store,
              RelInfo<DayBucket>.toMany(6, object.id), store.box<DayBucket>());
          return object;
        }),
    FileDocument: EntityDefinition<FileDocument>(
        model: _entities[5],
        toOneRelations: (FileDocument object) =>
            [object.relatedDatapoint, object.profile],
        toManyRelations: (FileDocument object) => {},
        getId: (FileDocument object) => object.id,
        setId: (FileDocument object, int id) {
          object.id = id;
        },
        objectToFB: (FileDocument object, fb.Builder fbb) {
          final uriOffset = fbb.writeString(object.uri);
          final dataOffset = fbb.writeString(object.data);
          final searchStringOffset = fbb.writeString(object.searchString);
          final thumbnailOffset = object.thumbnail == null
              ? null
              : fbb.writeString(object.thumbnail!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uriOffset);
          fbb.addOffset(2, dataOffset);
          fbb.addOffset(3, searchStringOffset);
          fbb.addOffset(4, thumbnailOffset);
          fbb.addInt64(5, object.relatedDatapoint.targetId);
          fbb.addInt64(6, object.profile.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = FileDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              uri: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              data: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              thumbnail: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              searchString: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));
          object.relatedDatapoint.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.relatedDatapoint.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.profile.attach(store);
          return object;
        }),
    HourBucket: EntityDefinition<HourBucket>(
        model: _entities[6],
        toOneRelations: (HourBucket object) => [object.day, object.profile],
        toManyRelations: (HourBucket object) =>
            {RelInfo<HourBucket>.toMany(7, object.id): object.dataPoints},
        getId: (HourBucket object) => object.id,
        setId: (HourBucket object, int id) {
          object.id = id;
        },
        objectToFB: (HourBucket object, fb.Builder fbb) {
          final dbCategorySentimentAverageOffset =
              fbb.writeString(object.dbCategorySentimentAverage);
          final dbCategoryMapOffset = fbb.writeString(object.dbCategoryMap);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.hour);
          fbb.addInt64(2, object.dateTime.microsecondsSinceEpoch * 1000);
          fbb.addInt64(3, object.total);
          fbb.addInt64(4, object.day.targetId);
          fbb.addInt64(5, object.profile.targetId);
          fbb.addInt64(6, object.dbDateTime);
          fbb.addOffset(7, dbCategorySentimentAverageOffset);
          fbb.addOffset(8, dbCategoryMapOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = HourBucket(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              total:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
              hour: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              dateTime: DateTime.fromMicrosecondsSinceEpoch(
                  (const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0) /
                          1000)
                      .round()))
            ..dbDateTime =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)
            ..dbCategorySentimentAverage =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 18, '')
            ..dbCategoryMap = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 20, '');
          object.day.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.day.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.profile.attach(store);
          InternalToManyAccess.setRelInfo(
              object.dataPoints,
              store,
              RelInfo<HourBucket>.toMany(7, object.id),
              store.box<HourBucket>());
          return object;
        }),
    ImageDocument: EntityDefinition<ImageDocument>(
        model: _entities[7],
        toOneRelations: (ImageDocument object) =>
            [object.relatedDatapoint, object.profile],
        toManyRelations: (ImageDocument object) => {},
        getId: (ImageDocument object) => object.id,
        setId: (ImageDocument object, int id) {
          object.id = id;
        },
        objectToFB: (ImageDocument object, fb.Builder fbb) {
          final uriOffset = fbb.writeString(object.uri);
          final dataOffset = fbb.writeString(object.data);
          final searchStringOffset = fbb.writeString(object.searchString);
          final mediaTagsOffset = fbb.writeString(object.mediaTags);
          final mediaTagScoresOffset = fbb.writeList(object.mediaTagScores
              .map(fbb.writeString)
              .toList(growable: false));
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uriOffset);
          fbb.addOffset(2, dataOffset);
          fbb.addOffset(3, searchStringOffset);
          fbb.addOffset(4, mediaTagsOffset);
          fbb.addOffset(5, mediaTagScoresOffset);
          fbb.addInt64(6, object.relatedDatapoint.targetId);
          fbb.addInt64(7, object.profile.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ImageDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              uri: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              data: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              searchString: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''))
            ..mediaTags = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..mediaTagScores = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 14, []);
          object.relatedDatapoint.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.relatedDatapoint.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.profile.attach(store);
          return object;
        }),
    LinkDocument: EntityDefinition<LinkDocument>(
        model: _entities[8],
        toOneRelations: (LinkDocument object) =>
            [object.relatedDatapoint, object.profile],
        toManyRelations: (LinkDocument object) => {},
        getId: (LinkDocument object) => object.id,
        setId: (LinkDocument object, int id) {
          object.id = id;
        },
        objectToFB: (LinkDocument object, fb.Builder fbb) {
          final uriOffset = fbb.writeString(object.uri);
          final dataOffset = fbb.writeString(object.data);
          final searchStringOffset = object.searchString == null
              ? null
              : fbb.writeString(object.searchString!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uriOffset);
          fbb.addOffset(2, dataOffset);
          fbb.addOffset(3, searchStringOffset);
          fbb.addInt64(4, object.relatedDatapoint.targetId);
          fbb.addInt64(5, object.profile.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = LinkDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              uri: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              data: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              searchString: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10));
          object.relatedDatapoint.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.relatedDatapoint.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.profile.attach(store);
          return object;
        }),
    MonthBucket: EntityDefinition<MonthBucket>(
        model: _entities[9],
        toOneRelations: (MonthBucket object) => [object.year, object.profile],
        toManyRelations: (MonthBucket object) => {
              RelInfo<MonthBucket>.toMany(8, object.id): object.days,
              RelInfo<MonthBucket>.toMany(9, object.id): object.dataPoints
            },
        getId: (MonthBucket object) => object.id,
        setId: (MonthBucket object, int id) {
          object.id = id;
        },
        objectToFB: (MonthBucket object, fb.Builder fbb) {
          final dbCategorySentimentAverageOffset =
              fbb.writeString(object.dbCategorySentimentAverage);
          final dbCategoryMapOffset = fbb.writeString(object.dbCategoryMap);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.month);
          fbb.addInt64(2, object.dateTime.microsecondsSinceEpoch * 1000);
          fbb.addInt64(3, object.total);
          fbb.addInt64(4, object.year.targetId);
          fbb.addInt64(5, object.profile.targetId);
          fbb.addInt64(6, object.dbDateTime);
          fbb.addOffset(7, dbCategorySentimentAverageOffset);
          fbb.addOffset(8, dbCategoryMapOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = MonthBucket(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              total:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
              month: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              dateTime: DateTime.fromMicrosecondsSinceEpoch(
                  (const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0) /
                          1000)
                      .round()))
            ..dbDateTime =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)
            ..dbCategorySentimentAverage =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 18, '')
            ..dbCategoryMap = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 20, '');
          object.year.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.year.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.profile.attach(store);
          InternalToManyAccess.setRelInfo(
              object.days,
              store,
              RelInfo<MonthBucket>.toMany(8, object.id),
              store.box<MonthBucket>());
          InternalToManyAccess.setRelInfo(
              object.dataPoints,
              store,
              RelInfo<MonthBucket>.toMany(9, object.id),
              store.box<MonthBucket>());
          return object;
        }),
    ProfileDocument: EntityDefinition<ProfileDocument>(
        model: _entities[10],
        toOneRelations: (ProfileDocument object) =>
            [object.service, object.profilePicture],
        toManyRelations: (ProfileDocument object) => {
              RelInfo<ProfileDocument>.toMany(10, object.id): object.dataPoints,
              RelInfo<DataCategory>.toOneBacklink(5, object.id,
                      (DataCategory srcObject) => srcObject.profile):
                  object.categories
            },
        getId: (ProfileDocument object) => object.id,
        setId: (ProfileDocument object, int id) {
          object.id = id;
        },
        objectToFB: (ProfileDocument object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.created.millisecondsSinceEpoch);
          fbb.addInt64(3, object.service.targetId);
          fbb.addInt64(4, object.profilePicture.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProfileDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''))
            ..created = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          object.service.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.service.attach(store);
          object.profilePicture.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.profilePicture.attach(store);
          InternalToManyAccess.setRelInfo(
              object.dataPoints,
              store,
              RelInfo<ProfileDocument>.toMany(10, object.id),
              store.box<ProfileDocument>());
          InternalToManyAccess.setRelInfo(
              object.categories,
              store,
              RelInfo<DataCategory>.toOneBacklink(
                  5, object.id, (DataCategory srcObject) => srcObject.profile),
              store.box<ProfileDocument>());
          return object;
        }),
    ServiceDocument: EntityDefinition<ServiceDocument>(
        model: _entities[11],
        toOneRelations: (ServiceDocument object) => [],
        toManyRelations: (ServiceDocument object) => {},
        getId: (ServiceDocument object) => object.id,
        setId: (ServiceDocument object, int id) {
          object.id = id;
        },
        objectToFB: (ServiceDocument object, fb.Builder fbb) {
          final serviceNameOffset = fbb.writeString(object.serviceName);
          final companyNameOffset = fbb.writeString(object.companyName);
          final imageOffset = fbb.writeString(object.image);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, serviceNameOffset);
          fbb.addOffset(2, companyNameOffset);
          fbb.addOffset(3, imageOffset);
          fbb.addInt64(4, object.totalDatapoints);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ServiceDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              serviceName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              companyName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              image: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              totalDatapoints:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));

          return object;
        }),
    VideoDocument: EntityDefinition<VideoDocument>(
        model: _entities[12],
        toOneRelations: (VideoDocument object) =>
            [object.relatedDatapoint, object.profile],
        toManyRelations: (VideoDocument object) => {},
        getId: (VideoDocument object) => object.id,
        setId: (VideoDocument object, int id) {
          object.id = id;
        },
        objectToFB: (VideoDocument object, fb.Builder fbb) {
          final uriOffset = fbb.writeString(object.uri);
          final dataOffset = fbb.writeString(object.data);
          final searchStringOffset = fbb.writeString(object.searchString);
          final thumbnailOffset = object.thumbnail == null
              ? null
              : fbb.writeString(object.thumbnail!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uriOffset);
          fbb.addOffset(2, dataOffset);
          fbb.addOffset(3, searchStringOffset);
          fbb.addOffset(4, thumbnailOffset);
          fbb.addInt64(5, object.relatedDatapoint.targetId);
          fbb.addInt64(6, object.profile.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = VideoDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              uri: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              data: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              thumbnail: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              searchString: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));
          object.relatedDatapoint.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.relatedDatapoint.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.profile.attach(store);
          return object;
        }),
    WeekDayAverageComputed: EntityDefinition<WeekDayAverageComputed>(
        model: _entities[13],
        toOneRelations: (WeekDayAverageComputed object) => [object.profile],
        toManyRelations: (WeekDayAverageComputed object) => {},
        getId: (WeekDayAverageComputed object) => object.id,
        setId: (WeekDayAverageComputed object, int id) {
          object.id = id;
        },
        objectToFB: (WeekDayAverageComputed object, fb.Builder fbb) {
          final dbAverageCategoryMapOffset =
              fbb.writeString(object.dbAverageCategoryMap);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.weekDay);
          fbb.addInt64(2, object.profile.targetId);
          fbb.addOffset(3, dbAverageCategoryMapOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = WeekDayAverageComputed(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              weekDay:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0))
            ..dbAverageCategoryMap =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 10, '');
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.profile.attach(store);
          return object;
        }),
    YearBucket: EntityDefinition<YearBucket>(
        model: _entities[14],
        toOneRelations: (YearBucket object) => [object.profile],
        toManyRelations: (YearBucket object) => {
              RelInfo<YearBucket>.toMany(11, object.id): object.months,
              RelInfo<YearBucket>.toMany(12, object.id): object.dataPoints
            },
        getId: (YearBucket object) => object.id,
        setId: (YearBucket object, int id) {
          object.id = id;
        },
        objectToFB: (YearBucket object, fb.Builder fbb) {
          final dbCategorySentimentAverageOffset =
              fbb.writeString(object.dbCategorySentimentAverage);
          final dbCategoryMapOffset = fbb.writeString(object.dbCategoryMap);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.year);
          fbb.addInt64(2, object.dateTime.microsecondsSinceEpoch * 1000);
          fbb.addInt64(3, object.total);
          fbb.addInt64(4, object.profile.targetId);
          fbb.addInt64(5, object.dbDateTime);
          fbb.addOffset(6, dbCategorySentimentAverageOffset);
          fbb.addOffset(7, dbCategoryMapOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = YearBucket(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              total:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
              year: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              dateTime: DateTime.fromMicrosecondsSinceEpoch(
                  (const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0) /
                          1000)
                      .round()))
            ..dbDateTime =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)
            ..dbCategorySentimentAverage =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 16, '')
            ..dbCategoryMap = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 18, '');
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.profile.attach(store);
          InternalToManyAccess.setRelInfo(
              object.months,
              store,
              RelInfo<YearBucket>.toMany(11, object.id),
              store.box<YearBucket>());
          InternalToManyAccess.setRelInfo(
              object.dataPoints,
              store,
              RelInfo<YearBucket>.toMany(12, object.id),
              store.box<YearBucket>());
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [AppSettingsDocument] entity fields to define ObjectBox queries.
class AppSettingsDocument_ {
  /// see [AppSettingsDocument.id]
  static final id =
      QueryIntegerProperty<AppSettingsDocument>(_entities[0].properties[0]);

  /// see [AppSettingsDocument.darkmode]
  static final darkmode =
      QueryBooleanProperty<AppSettingsDocument>(_entities[0].properties[1]);
}

/// [DataCategory] entity fields to define ObjectBox queries.
class DataCategory_ {
  /// see [DataCategory.id]
  static final id =
      QueryIntegerProperty<DataCategory>(_entities[1].properties[0]);

  /// see [DataCategory.count]
  static final count =
      QueryIntegerProperty<DataCategory>(_entities[1].properties[1]);

  /// see [DataCategory.matchingFoldersFacebook]
  static final matchingFoldersFacebook =
      QueryStringVectorProperty<DataCategory>(_entities[1].properties[2]);

  /// see [DataCategory.matchingFoldersInstagram]
  static final matchingFoldersInstagram =
      QueryStringVectorProperty<DataCategory>(_entities[1].properties[3]);

  /// see [DataCategory.profile]
  static final profile = QueryRelationToOne<DataCategory, ProfileDocument>(
      _entities[1].properties[4]);

  /// see [DataCategory.dbCategory]
  static final dbCategory =
      QueryIntegerProperty<DataCategory>(_entities[1].properties[5]);
}

/// [DataPoint] entity fields to define ObjectBox queries.
class DataPoint_ {
  /// see [DataPoint.id]
  static final id = QueryIntegerProperty<DataPoint>(_entities[2].properties[0]);

  /// see [DataPoint.dataPointName]
  static final dataPointName =
      QueryRelationToOne<DataPoint, DataPointName>(_entities[2].properties[1]);

  /// see [DataPoint.stringName]
  static final stringName =
      QueryStringProperty<DataPoint>(_entities[2].properties[2]);

  /// see [DataPoint.sentimentScore]
  static final sentimentScore =
      QueryDoubleProperty<DataPoint>(_entities[2].properties[3]);

  /// see [DataPoint.sentimentText]
  static final sentimentText =
      QueryStringProperty<DataPoint>(_entities[2].properties[4]);

  /// see [DataPoint.timestamp]
  static final timestamp =
      QueryIntegerProperty<DataPoint>(_entities[2].properties[5]);

  /// see [DataPoint.category]
  static final category =
      QueryRelationToOne<DataPoint, DataCategory>(_entities[2].properties[6]);

  /// see [DataPoint.profile]
  static final profile = QueryRelationToOne<DataPoint, ProfileDocument>(
      _entities[2].properties[7]);

  /// see [DataPoint.searchTerms]
  static final searchTerms =
      QueryStringProperty<DataPoint>(_entities[2].properties[8]);

  /// see [DataPoint.valuesJsonBytes]
  static final valuesJsonBytes =
      QueryByteVectorProperty<DataPoint>(_entities[2].properties[9]);

  /// see [DataPoint.createdAt]
  static final createdAt =
      QueryIntegerProperty<DataPoint>(_entities[2].properties[10]);

  /// see [DataPoint.dbCreatedAt]
  static final dbCreatedAt =
      QueryIntegerProperty<DataPoint>(_entities[2].properties[11]);

  /// see [DataPoint.images]
  static final images =
      QueryRelationToMany<DataPoint, ImageDocument>(_entities[2].relations[0]);

  /// see [DataPoint.videos]
  static final videos =
      QueryRelationToMany<DataPoint, VideoDocument>(_entities[2].relations[1]);

  /// see [DataPoint.files]
  static final files =
      QueryRelationToMany<DataPoint, FileDocument>(_entities[2].relations[2]);

  /// see [DataPoint.links]
  static final links =
      QueryRelationToMany<DataPoint, LinkDocument>(_entities[2].relations[3]);
}

/// [DataPointName] entity fields to define ObjectBox queries.
class DataPointName_ {
  /// see [DataPointName.id]
  static final id =
      QueryIntegerProperty<DataPointName>(_entities[3].properties[0]);

  /// see [DataPointName.count]
  static final count =
      QueryIntegerProperty<DataPointName>(_entities[3].properties[1]);

  /// see [DataPointName.name]
  static final name =
      QueryStringProperty<DataPointName>(_entities[3].properties[2]);

  /// see [DataPointName.dataCategory]
  static final dataCategory = QueryRelationToOne<DataPointName, DataCategory>(
      _entities[3].properties[3]);

  /// see [DataPointName.profile]
  static final profile = QueryRelationToOne<DataPointName, ProfileDocument>(
      _entities[3].properties[4]);

  /// see [DataPointName.parent]
  static final parent = QueryRelationToOne<DataPointName, DataPointName>(
      _entities[3].properties[5]);
}

/// [DayBucket] entity fields to define ObjectBox queries.
class DayBucket_ {
  /// see [DayBucket.id]
  static final id = QueryIntegerProperty<DayBucket>(_entities[4].properties[0]);

  /// see [DayBucket.day]
  static final day =
      QueryIntegerProperty<DayBucket>(_entities[4].properties[1]);

  /// see [DayBucket.weekDay]
  static final weekDay =
      QueryIntegerProperty<DayBucket>(_entities[4].properties[2]);

  /// see [DayBucket.dateTime]
  static final dateTime =
      QueryIntegerProperty<DayBucket>(_entities[4].properties[3]);

  /// see [DayBucket.total]
  static final total =
      QueryIntegerProperty<DayBucket>(_entities[4].properties[4]);

  /// see [DayBucket.month]
  static final month =
      QueryRelationToOne<DayBucket, MonthBucket>(_entities[4].properties[5]);

  /// see [DayBucket.profile]
  static final profile = QueryRelationToOne<DayBucket, ProfileDocument>(
      _entities[4].properties[6]);

  /// see [DayBucket.dbDateTime]
  static final dbDateTime =
      QueryIntegerProperty<DayBucket>(_entities[4].properties[7]);

  /// see [DayBucket.dbCategorySentimentAverage]
  static final dbCategorySentimentAverage =
      QueryStringProperty<DayBucket>(_entities[4].properties[8]);

  /// see [DayBucket.dbCategoryMap]
  static final dbCategoryMap =
      QueryStringProperty<DayBucket>(_entities[4].properties[9]);

  /// see [DayBucket.hours]
  static final hours =
      QueryRelationToMany<DayBucket, HourBucket>(_entities[4].relations[0]);

  /// see [DayBucket.dataPoints]
  static final dataPoints =
      QueryRelationToMany<DayBucket, DataPoint>(_entities[4].relations[1]);
}

/// [FileDocument] entity fields to define ObjectBox queries.
class FileDocument_ {
  /// see [FileDocument.id]
  static final id =
      QueryIntegerProperty<FileDocument>(_entities[5].properties[0]);

  /// see [FileDocument.uri]
  static final uri =
      QueryStringProperty<FileDocument>(_entities[5].properties[1]);

  /// see [FileDocument.data]
  static final data =
      QueryStringProperty<FileDocument>(_entities[5].properties[2]);

  /// see [FileDocument.searchString]
  static final searchString =
      QueryStringProperty<FileDocument>(_entities[5].properties[3]);

  /// see [FileDocument.thumbnail]
  static final thumbnail =
      QueryStringProperty<FileDocument>(_entities[5].properties[4]);

  /// see [FileDocument.relatedDatapoint]
  static final relatedDatapoint =
      QueryRelationToOne<FileDocument, DataPoint>(_entities[5].properties[5]);

  /// see [FileDocument.profile]
  static final profile = QueryRelationToOne<FileDocument, ProfileDocument>(
      _entities[5].properties[6]);
}

/// [HourBucket] entity fields to define ObjectBox queries.
class HourBucket_ {
  /// see [HourBucket.id]
  static final id =
      QueryIntegerProperty<HourBucket>(_entities[6].properties[0]);

  /// see [HourBucket.hour]
  static final hour =
      QueryIntegerProperty<HourBucket>(_entities[6].properties[1]);

  /// see [HourBucket.dateTime]
  static final dateTime =
      QueryIntegerProperty<HourBucket>(_entities[6].properties[2]);

  /// see [HourBucket.total]
  static final total =
      QueryIntegerProperty<HourBucket>(_entities[6].properties[3]);

  /// see [HourBucket.day]
  static final day =
      QueryRelationToOne<HourBucket, DayBucket>(_entities[6].properties[4]);

  /// see [HourBucket.profile]
  static final profile = QueryRelationToOne<HourBucket, ProfileDocument>(
      _entities[6].properties[5]);

  /// see [HourBucket.dbDateTime]
  static final dbDateTime =
      QueryIntegerProperty<HourBucket>(_entities[6].properties[6]);

  /// see [HourBucket.dbCategorySentimentAverage]
  static final dbCategorySentimentAverage =
      QueryStringProperty<HourBucket>(_entities[6].properties[7]);

  /// see [HourBucket.dbCategoryMap]
  static final dbCategoryMap =
      QueryStringProperty<HourBucket>(_entities[6].properties[8]);

  /// see [HourBucket.dataPoints]
  static final dataPoints =
      QueryRelationToMany<HourBucket, DataPoint>(_entities[6].relations[0]);
}

/// [ImageDocument] entity fields to define ObjectBox queries.
class ImageDocument_ {
  /// see [ImageDocument.id]
  static final id =
      QueryIntegerProperty<ImageDocument>(_entities[7].properties[0]);

  /// see [ImageDocument.uri]
  static final uri =
      QueryStringProperty<ImageDocument>(_entities[7].properties[1]);

  /// see [ImageDocument.data]
  static final data =
      QueryStringProperty<ImageDocument>(_entities[7].properties[2]);

  /// see [ImageDocument.searchString]
  static final searchString =
      QueryStringProperty<ImageDocument>(_entities[7].properties[3]);

  /// see [ImageDocument.mediaTags]
  static final mediaTags =
      QueryStringProperty<ImageDocument>(_entities[7].properties[4]);

  /// see [ImageDocument.mediaTagScores]
  static final mediaTagScores =
      QueryStringVectorProperty<ImageDocument>(_entities[7].properties[5]);

  /// see [ImageDocument.relatedDatapoint]
  static final relatedDatapoint =
      QueryRelationToOne<ImageDocument, DataPoint>(_entities[7].properties[6]);

  /// see [ImageDocument.profile]
  static final profile = QueryRelationToOne<ImageDocument, ProfileDocument>(
      _entities[7].properties[7]);
}

/// [LinkDocument] entity fields to define ObjectBox queries.
class LinkDocument_ {
  /// see [LinkDocument.id]
  static final id =
      QueryIntegerProperty<LinkDocument>(_entities[8].properties[0]);

  /// see [LinkDocument.uri]
  static final uri =
      QueryStringProperty<LinkDocument>(_entities[8].properties[1]);

  /// see [LinkDocument.data]
  static final data =
      QueryStringProperty<LinkDocument>(_entities[8].properties[2]);

  /// see [LinkDocument.searchString]
  static final searchString =
      QueryStringProperty<LinkDocument>(_entities[8].properties[3]);

  /// see [LinkDocument.relatedDatapoint]
  static final relatedDatapoint =
      QueryRelationToOne<LinkDocument, DataPoint>(_entities[8].properties[4]);

  /// see [LinkDocument.profile]
  static final profile = QueryRelationToOne<LinkDocument, ProfileDocument>(
      _entities[8].properties[5]);
}

/// [MonthBucket] entity fields to define ObjectBox queries.
class MonthBucket_ {
  /// see [MonthBucket.id]
  static final id =
      QueryIntegerProperty<MonthBucket>(_entities[9].properties[0]);

  /// see [MonthBucket.month]
  static final month =
      QueryIntegerProperty<MonthBucket>(_entities[9].properties[1]);

  /// see [MonthBucket.dateTime]
  static final dateTime =
      QueryIntegerProperty<MonthBucket>(_entities[9].properties[2]);

  /// see [MonthBucket.total]
  static final total =
      QueryIntegerProperty<MonthBucket>(_entities[9].properties[3]);

  /// see [MonthBucket.year]
  static final year =
      QueryRelationToOne<MonthBucket, YearBucket>(_entities[9].properties[4]);

  /// see [MonthBucket.profile]
  static final profile = QueryRelationToOne<MonthBucket, ProfileDocument>(
      _entities[9].properties[5]);

  /// see [MonthBucket.dbDateTime]
  static final dbDateTime =
      QueryIntegerProperty<MonthBucket>(_entities[9].properties[6]);

  /// see [MonthBucket.dbCategorySentimentAverage]
  static final dbCategorySentimentAverage =
      QueryStringProperty<MonthBucket>(_entities[9].properties[7]);

  /// see [MonthBucket.dbCategoryMap]
  static final dbCategoryMap =
      QueryStringProperty<MonthBucket>(_entities[9].properties[8]);

  /// see [MonthBucket.days]
  static final days =
      QueryRelationToMany<MonthBucket, DayBucket>(_entities[9].relations[0]);

  /// see [MonthBucket.dataPoints]
  static final dataPoints =
      QueryRelationToMany<MonthBucket, DataPoint>(_entities[9].relations[1]);
}

/// [ProfileDocument] entity fields to define ObjectBox queries.
class ProfileDocument_ {
  /// see [ProfileDocument.id]
  static final id =
      QueryIntegerProperty<ProfileDocument>(_entities[10].properties[0]);

  /// see [ProfileDocument.name]
  static final name =
      QueryStringProperty<ProfileDocument>(_entities[10].properties[1]);

  /// see [ProfileDocument.created]
  static final created =
      QueryIntegerProperty<ProfileDocument>(_entities[10].properties[2]);

  /// see [ProfileDocument.service]
  static final service = QueryRelationToOne<ProfileDocument, ServiceDocument>(
      _entities[10].properties[3]);

  /// see [ProfileDocument.profilePicture]
  static final profilePicture =
      QueryRelationToOne<ProfileDocument, ImageDocument>(
          _entities[10].properties[4]);

  /// see [ProfileDocument.dataPoints]
  static final dataPoints = QueryRelationToMany<ProfileDocument, DataPoint>(
      _entities[10].relations[0]);
}

/// [ServiceDocument] entity fields to define ObjectBox queries.
class ServiceDocument_ {
  /// see [ServiceDocument.id]
  static final id =
      QueryIntegerProperty<ServiceDocument>(_entities[11].properties[0]);

  /// see [ServiceDocument.serviceName]
  static final serviceName =
      QueryStringProperty<ServiceDocument>(_entities[11].properties[1]);

  /// see [ServiceDocument.companyName]
  static final companyName =
      QueryStringProperty<ServiceDocument>(_entities[11].properties[2]);

  /// see [ServiceDocument.image]
  static final image =
      QueryStringProperty<ServiceDocument>(_entities[11].properties[3]);

  /// see [ServiceDocument.totalDatapoints]
  static final totalDatapoints =
      QueryIntegerProperty<ServiceDocument>(_entities[11].properties[4]);
}

/// [VideoDocument] entity fields to define ObjectBox queries.
class VideoDocument_ {
  /// see [VideoDocument.id]
  static final id =
      QueryIntegerProperty<VideoDocument>(_entities[12].properties[0]);

  /// see [VideoDocument.uri]
  static final uri =
      QueryStringProperty<VideoDocument>(_entities[12].properties[1]);

  /// see [VideoDocument.data]
  static final data =
      QueryStringProperty<VideoDocument>(_entities[12].properties[2]);

  /// see [VideoDocument.searchString]
  static final searchString =
      QueryStringProperty<VideoDocument>(_entities[12].properties[3]);

  /// see [VideoDocument.thumbnail]
  static final thumbnail =
      QueryStringProperty<VideoDocument>(_entities[12].properties[4]);

  /// see [VideoDocument.relatedDatapoint]
  static final relatedDatapoint =
      QueryRelationToOne<VideoDocument, DataPoint>(_entities[12].properties[5]);

  /// see [VideoDocument.profile]
  static final profile = QueryRelationToOne<VideoDocument, ProfileDocument>(
      _entities[12].properties[6]);
}

/// [WeekDayAverageComputed] entity fields to define ObjectBox queries.
class WeekDayAverageComputed_ {
  /// see [WeekDayAverageComputed.id]
  static final id =
      QueryIntegerProperty<WeekDayAverageComputed>(_entities[13].properties[0]);

  /// see [WeekDayAverageComputed.weekDay]
  static final weekDay =
      QueryIntegerProperty<WeekDayAverageComputed>(_entities[13].properties[1]);

  /// see [WeekDayAverageComputed.profile]
  static final profile =
      QueryRelationToOne<WeekDayAverageComputed, ProfileDocument>(
          _entities[13].properties[2]);

  /// see [WeekDayAverageComputed.dbAverageCategoryMap]
  static final dbAverageCategoryMap =
      QueryStringProperty<WeekDayAverageComputed>(_entities[13].properties[3]);
}

/// [YearBucket] entity fields to define ObjectBox queries.
class YearBucket_ {
  /// see [YearBucket.id]
  static final id =
      QueryIntegerProperty<YearBucket>(_entities[14].properties[0]);

  /// see [YearBucket.year]
  static final year =
      QueryIntegerProperty<YearBucket>(_entities[14].properties[1]);

  /// see [YearBucket.dateTime]
  static final dateTime =
      QueryIntegerProperty<YearBucket>(_entities[14].properties[2]);

  /// see [YearBucket.total]
  static final total =
      QueryIntegerProperty<YearBucket>(_entities[14].properties[3]);

  /// see [YearBucket.profile]
  static final profile = QueryRelationToOne<YearBucket, ProfileDocument>(
      _entities[14].properties[4]);

  /// see [YearBucket.dbDateTime]
  static final dbDateTime =
      QueryIntegerProperty<YearBucket>(_entities[14].properties[5]);

  /// see [YearBucket.dbCategorySentimentAverage]
  static final dbCategorySentimentAverage =
      QueryStringProperty<YearBucket>(_entities[14].properties[6]);

  /// see [YearBucket.dbCategoryMap]
  static final dbCategoryMap =
      QueryStringProperty<YearBucket>(_entities[14].properties[7]);

  /// see [YearBucket.months]
  static final months =
      QueryRelationToMany<YearBucket, MonthBucket>(_entities[14].relations[0]);

  /// see [YearBucket.dataPoints]
  static final dataPoints =
      QueryRelationToMany<YearBucket, DataPoint>(_entities[14].relations[1]);
}
