// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../data/entities/media/file_document.dart';
import '../../data/entities/media/image_document.dart';
import '../../data/entities/media/link_document.dart';
import '../../data/entities/media/video_document.dart';
import '../../data/entities/misc/appsettings_document.dart';
import '../../data/entities/misc/profile_document.dart';
import '../../data/entities/misc/service_document.dart';
import '../../data/entities/nodes/category_node.dart';
import '../../data/entities/nodes/datapoint_node.dart';
import '../../data/entities/nodes/name_node.dart';
import '../../data/entities/timebuckets/day_bucket.dart';
import '../../data/entities/timebuckets/hour_bucket.dart';
import '../../data/entities/timebuckets/month_bucket.dart';
import '../../data/entities/timebuckets/year_bucket.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 4988881927412331291),
      name: 'AppSettingsDocument',
      lastPropertyId: const IdUid(2, 4131294452130815404),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 352938025561151778),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4131294452130815404),
            name: 'darkmode',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 6038846461207389506),
      name: 'DataCategory',
      lastPropertyId: const IdUid(6, 4561239435909309913),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2066914286257791468),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4173079502596923450),
            name: 'count',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5685867962677535620),
            name: 'matchingFoldersFacebook',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1583951449404646979),
            name: 'matchingFoldersInstagram',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8918460156986407265),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 2893737950228371431),
            relationTarget: 'ProfileDocument'),
        ModelProperty(
            id: const IdUid(6, 4561239435909309913),
            name: 'dbCategory',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'dataPointNames',
            srcEntity: 'DataPointName',
            srcField: 'dataCategory')
      ]),
  ModelEntity(
      id: const IdUid(3, 8467492853650059893),
      name: 'DataPoint',
      lastPropertyId: const IdUid(11, 3809006904403888551),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4324358733585530119),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1121245948883557879),
            name: 'dataPointNameId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 5095894818946905849),
            relationTarget: 'DataPointName'),
        ModelProperty(
            id: const IdUid(3, 6959649011848535468),
            name: 'stringName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 751144620328293937),
            name: 'sentimentScore',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 720393320757114084),
            name: 'sentimentText',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7184058080023230414),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 1272623500082265637),
            relationTarget: 'DataCategory'),
        ModelProperty(
            id: const IdUid(7, 8406763367296130435),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 3428863369194921382),
            relationTarget: 'ProfileDocument'),
        ModelProperty(
            id: const IdUid(8, 7178720979089077815),
            name: 'searchTerms',
            type: 9,
            flags: 2048,
            indexId: const IdUid(5, 463429200672811669)),
        ModelProperty(
            id: const IdUid(9, 5641056577992004716),
            name: 'values',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 1390576934066995602),
            name: 'createdAt',
            type: 12,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 3809006904403888551),
            name: 'dbCreatedAt',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 5095972530144752148),
            name: 'images',
            targetId: const IdUid(8, 4080763288054085627)),
        ModelRelation(
            id: const IdUid(2, 2522801109804263353),
            name: 'videos',
            targetId: const IdUid(13, 8344611920630713000)),
        ModelRelation(
            id: const IdUid(3, 7745261861401440888),
            name: 'files',
            targetId: const IdUid(6, 7369732457471905327)),
        ModelRelation(
            id: const IdUid(4, 2789532759950271664),
            name: 'links',
            targetId: const IdUid(9, 2456039356349059593))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 1756657076943281062),
      name: 'DataPointName',
      lastPropertyId: const IdUid(6, 6222918074588534967),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8320498531753968150),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3333388500948353650),
            name: 'count',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2547452457532728897),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2179766346643485824),
            name: 'dataCategoryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(6, 1592188527747240082),
            relationTarget: 'DataCategory'),
        ModelProperty(
            id: const IdUid(5, 5462056720356632719),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(7, 8269854711404872428),
            relationTarget: 'ProfileDocument'),
        ModelProperty(
            id: const IdUid(6, 6222918074588534967),
            name: 'parentId',
            type: 11,
            flags: 520,
            indexId: const IdUid(8, 5329477971730196965),
            relationTarget: 'DataPointName')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'dataPoints',
            srcEntity: 'DataPoint',
            srcField: 'dataPointName'),
        ModelBacklink(
            name: 'children', srcEntity: 'DataPointName', srcField: 'parent')
      ]),
  ModelEntity(
      id: const IdUid(5, 3400447797065390625),
      name: 'DayBucket',
      lastPropertyId: const IdUid(10, 2679177240119806243),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 335632700757831572),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 447281429503778852),
            name: 'day',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2867763318316699002),
            name: 'weekDay',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 9103292769009164083),
            name: 'dateTime',
            type: 12,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8142285934218705099),
            name: 'total',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4043980678306974020),
            name: 'monthId',
            type: 11,
            flags: 520,
            indexId: const IdUid(9, 8431984768025131073),
            relationTarget: 'MonthBucket'),
        ModelProperty(
            id: const IdUid(7, 3996000674887545107),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(10, 7961271951669851627),
            relationTarget: 'ProfileDocument'),
        ModelProperty(
            id: const IdUid(8, 1207688829336495706),
            name: 'dbDateTime',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1674845257605049618),
            name: 'dbCategoryMap',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2679177240119806243),
            name: 'dbServiceMap',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(5, 6672048955711420866),
            name: 'hours',
            targetId: const IdUid(7, 7472009443197869544)),
        ModelRelation(
            id: const IdUid(6, 1295742876416349762),
            name: 'dataPoints',
            targetId: const IdUid(3, 8467492853650059893))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 7369732457471905327),
      name: 'FileDocument',
      lastPropertyId: const IdUid(7, 9087247778070380536),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3745474861623321804),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1402513177796529837),
            name: 'uri',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2294728853248688324),
            name: 'data',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8180190075283914170),
            name: 'searchString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8652969022117074948),
            name: 'thumbnail',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3892380686326187042),
            name: 'relatedDatapointId',
            type: 11,
            flags: 520,
            indexId: const IdUid(11, 6893855614477045322),
            relationTarget: 'DataPoint'),
        ModelProperty(
            id: const IdUid(7, 9087247778070380536),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(12, 3181494605408884181),
            relationTarget: 'ProfileDocument')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 7472009443197869544),
      name: 'HourBucket',
      lastPropertyId: const IdUid(9, 5385935575769146287),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5305995721789283902),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7330049107682927558),
            name: 'hour',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8632363853688536947),
            name: 'dateTime',
            type: 12,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8073022290844656945),
            name: 'total',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5214408868347985654),
            name: 'dayId',
            type: 11,
            flags: 520,
            indexId: const IdUid(13, 141709774279426581),
            relationTarget: 'DayBucket'),
        ModelProperty(
            id: const IdUid(6, 8767308946910943341),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(14, 6739916572838708279),
            relationTarget: 'ProfileDocument'),
        ModelProperty(
            id: const IdUid(7, 2983103388720994734),
            name: 'dbDateTime',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2550485302061976609),
            name: 'dbCategoryMap',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5385935575769146287),
            name: 'dbServiceMap',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(7, 1904765064224493498),
            name: 'dataPoints',
            targetId: const IdUid(3, 8467492853650059893))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 4080763288054085627),
      name: 'ImageDocument',
      lastPropertyId: const IdUid(8, 4176764307841068040),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2062836737790432632),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4181918331184070623),
            name: 'uri',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2531026985208156946),
            name: 'data',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7473483919139507253),
            name: 'searchString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6613770952879017137),
            name: 'mediaTags',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6399018607488632062),
            name: 'mediaTagScores',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7083557157942765520),
            name: 'relatedDatapointId',
            type: 11,
            flags: 520,
            indexId: const IdUid(15, 8464008648490163012),
            relationTarget: 'DataPoint'),
        ModelProperty(
            id: const IdUid(8, 4176764307841068040),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(16, 4158908643492933425),
            relationTarget: 'ProfileDocument')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 2456039356349059593),
      name: 'LinkDocument',
      lastPropertyId: const IdUid(6, 3387711914590113448),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7122166855502431317),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1287714245863546401),
            name: 'uri',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1645406483058539428),
            name: 'data',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6329584882068397123),
            name: 'searchString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 519209027279190410),
            name: 'relatedDatapointId',
            type: 11,
            flags: 520,
            indexId: const IdUid(17, 6547522865529276250),
            relationTarget: 'DataPoint'),
        ModelProperty(
            id: const IdUid(6, 3387711914590113448),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(18, 4032581843596146417),
            relationTarget: 'ProfileDocument')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(10, 1279055715132364075),
      name: 'MonthBucket',
      lastPropertyId: const IdUid(9, 1862250458887837441),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5555419681409543812),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6096293807322747204),
            name: 'month',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1112051353810854989),
            name: 'dateTime',
            type: 12,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8152268662843170770),
            name: 'total',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6976317719483965356),
            name: 'yearId',
            type: 11,
            flags: 520,
            indexId: const IdUid(19, 7133895193438386559),
            relationTarget: 'YearBucket'),
        ModelProperty(
            id: const IdUid(6, 8026307453401329322),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(20, 8349320686290885064),
            relationTarget: 'ProfileDocument'),
        ModelProperty(
            id: const IdUid(7, 8643720617526242062),
            name: 'dbDateTime',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7430245475918074037),
            name: 'dbCategoryMap',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1862250458887837441),
            name: 'dbServiceMap',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(8, 3907346699493606433),
            name: 'days',
            targetId: const IdUid(5, 3400447797065390625))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(11, 3056536844618295337),
      name: 'ProfileDocument',
      lastPropertyId: const IdUid(4, 8281775687524785301),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3218428116152720512),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5235128353844104880),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4484035683508708662),
            name: 'serviceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(21, 4785992626540470850),
            relationTarget: 'ServiceDocument'),
        ModelProperty(
            id: const IdUid(4, 8281775687524785301),
            name: 'profilePictureId',
            type: 11,
            flags: 520,
            indexId: const IdUid(22, 605751862938271484),
            relationTarget: 'ImageDocument')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(9, 9153115238673988561),
            name: 'dataPoints',
            targetId: const IdUid(3, 8467492853650059893))
      ],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'categories', srcEntity: 'DataCategory', srcField: 'profile')
      ]),
  ModelEntity(
      id: const IdUid(12, 3752550938760257558),
      name: 'ServiceDocument',
      lastPropertyId: const IdUid(5, 339259300375894511),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1357080746168716167),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7544528573142200224),
            name: 'serviceName',
            type: 9,
            flags: 2080,
            indexId: const IdUid(23, 5502414284267413149)),
        ModelProperty(
            id: const IdUid(3, 8323950533105929532),
            name: 'companyName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6588714472509886831),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 339259300375894511),
            name: 'totalDatapoints',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(13, 8344611920630713000),
      name: 'VideoDocument',
      lastPropertyId: const IdUid(7, 8657927686557513564),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4888341020373926573),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5612390303901571859),
            name: 'uri',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5001306830145071459),
            name: 'data',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8430982754493004325),
            name: 'searchString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7465727025285410860),
            name: 'thumbnail',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3081980996300743215),
            name: 'relatedDatapointId',
            type: 11,
            flags: 520,
            indexId: const IdUid(24, 3779558247742386984),
            relationTarget: 'DataPoint'),
        ModelProperty(
            id: const IdUid(7, 8657927686557513564),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(25, 6616179246772297598),
            relationTarget: 'ProfileDocument')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(14, 7538433076249109789),
      name: 'YearBucket',
      lastPropertyId: const IdUid(8, 492326733171450953),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8103722744620297077),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 817341877297472139),
            name: 'year',
            type: 6,
            flags: 40,
            indexId: const IdUid(26, 4123637323582263262)),
        ModelProperty(
            id: const IdUid(3, 4906196886611851615),
            name: 'dateTime',
            type: 12,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6234092419478647199),
            name: 'total',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1931484916230412675),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(27, 5474799876765562971),
            relationTarget: 'ProfileDocument'),
        ModelProperty(
            id: const IdUid(6, 6276645883839754943),
            name: 'dbDateTime',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4824679393777577068),
            name: 'dbCategoryMap',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 492326733171450953),
            name: 'dbServiceMap',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(10, 8258379157713928626),
            name: 'months',
            targetId: const IdUid(10, 1279055715132364075))
      ],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(14, 7538433076249109789),
      lastIndexId: const IdUid(27, 5474799876765562971),
      lastRelationId: const IdUid(10, 8258379157713928626),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    AppSettingsDocument: EntityDefinition<AppSettingsDocument>(
        model: _entities[0],
        toOneRelations: (AppSettingsDocument object) => [],
        toManyRelations: (AppSettingsDocument object) => {},
        getId: (AppSettingsDocument object) => object.id,
        setId: (AppSettingsDocument object, int id) {
          object.id = id;
        },
        objectToFB: (AppSettingsDocument object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.darkmode);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AppSettingsDocument(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false));

          return object;
        }),
    DataCategory: EntityDefinition<DataCategory>(
        model: _entities[1],
        toOneRelations: (DataCategory object) => [object.profile],
        toManyRelations: (DataCategory object) => {
              RelInfo<DataPointName>.toOneBacklink(4, object.id,
                      (DataPointName srcObject) => srcObject.dataCategory):
                  object.dataPointNames
            },
        getId: (DataCategory object) => object.id,
        setId: (DataCategory object, int id) {
          object.id = id;
        },
        objectToFB: (DataCategory object, fb.Builder fbb) {
          final matchingFoldersFacebookOffset = fbb.writeList(object
              .matchingFoldersFacebook
              .map(fbb.writeString)
              .toList(growable: false));
          final matchingFoldersInstagramOffset = fbb.writeList(object
              .matchingFoldersInstagram
              .map(fbb.writeString)
              .toList(growable: false));
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.count);
          fbb.addOffset(2, matchingFoldersFacebookOffset);
          fbb.addOffset(3, matchingFoldersInstagramOffset);
          fbb.addInt64(4, object.profile.targetId);
          fbb.addInt64(5, object.dbCategory);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DataCategory(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              count: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              matchingFoldersFacebook: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGet(buffer, rootOffset, 8, []),
              matchingFoldersInstagram: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGet(buffer, rootOffset, 10, []))
            ..dbCategory =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.profile.attach(store);
          InternalToManyAccess.setRelInfo(
              object.dataPointNames,
              store,
              RelInfo<DataPointName>.toOneBacklink(4, object.id,
                  (DataPointName srcObject) => srcObject.dataCategory),
              store.box<DataCategory>());
          return object;
        }),
    DataPoint: EntityDefinition<DataPoint>(
        model: _entities[2],
        toOneRelations: (DataPoint object) =>
            [object.dataPointName, object.category, object.profile],
        toManyRelations: (DataPoint object) => {
              RelInfo<DataPoint>.toMany(1, object.id): object.images,
              RelInfo<DataPoint>.toMany(2, object.id): object.videos,
              RelInfo<DataPoint>.toMany(3, object.id): object.files,
              RelInfo<DataPoint>.toMany(4, object.id): object.links
            },
        getId: (DataPoint object) => object.id,
        setId: (DataPoint object, int id) {
          object.id = id;
        },
        objectToFB: (DataPoint object, fb.Builder fbb) {
          final stringNameOffset = fbb.writeString(object.stringName);
          final sentimentTextOffset = object.sentimentText == null
              ? null
              : fbb.writeString(object.sentimentText!);
          final searchTermsOffset = fbb.writeString(object.searchTerms);
          final valuesOffset = fbb.writeString(object.values);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.dataPointName.targetId);
          fbb.addOffset(2, stringNameOffset);
          fbb.addFloat64(3, object.sentimentScore);
          fbb.addOffset(4, sentimentTextOffset);
          fbb.addInt64(5, object.category.targetId);
          fbb.addInt64(6, object.profile.targetId);
          fbb.addOffset(7, searchTermsOffset);
          fbb.addOffset(8, valuesOffset);
          fbb.addInt64(9, object.createdAt.microsecondsSinceEpoch * 1000);
          fbb.addInt64(10, object.dbCreatedAt);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DataPoint(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              sentimentScore: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 10),
              searchTerms: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''))
            ..stringName = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..sentimentText = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..values = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 20, '')
            ..createdAt = DateTime.fromMicrosecondsSinceEpoch(
                (const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0) /
                        1000)
                    .round())
            ..dbCreatedAt =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.dataPointName.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.dataPointName.attach(store);
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.category.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.profile.attach(store);
          InternalToManyAccess.setRelInfo(object.images, store,
              RelInfo<DataPoint>.toMany(1, object.id), store.box<DataPoint>());
          InternalToManyAccess.setRelInfo(object.videos, store,
              RelInfo<DataPoint>.toMany(2, object.id), store.box<DataPoint>());
          InternalToManyAccess.setRelInfo(object.files, store,
              RelInfo<DataPoint>.toMany(3, object.id), store.box<DataPoint>());
          InternalToManyAccess.setRelInfo(object.links, store,
              RelInfo<DataPoint>.toMany(4, object.id), store.box<DataPoint>());
          return object;
        }),
    DataPointName: EntityDefinition<DataPointName>(
        model: _entities[3],
        toOneRelations: (DataPointName object) =>
            [object.dataCategory, object.profile, object.parent],
        toManyRelations: (DataPointName object) => {
              RelInfo<DataPoint>.toOneBacklink(2, object.id,
                      (DataPoint srcObject) => srcObject.dataPointName):
                  object.dataPoints,
              RelInfo<DataPointName>.toOneBacklink(6, object.id,
                      (DataPointName srcObject) => srcObject.parent):
                  object.children
            },
        getId: (DataPointName object) => object.id,
        setId: (DataPointName object, int id) {
          object.id = id;
        },
        objectToFB: (DataPointName object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.count);
          fbb.addOffset(2, nameOffset);
          fbb.addInt64(3, object.dataCategory.targetId);
          fbb.addInt64(4, object.profile.targetId);
          fbb.addInt64(5, object.parent.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DataPointName(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              count: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''));
          object.dataCategory.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.dataCategory.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.profile.attach(store);
          object.parent.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.parent.attach(store);
          InternalToManyAccess.setRelInfo(
              object.dataPoints,
              store,
              RelInfo<DataPoint>.toOneBacklink(2, object.id,
                  (DataPoint srcObject) => srcObject.dataPointName),
              store.box<DataPointName>());
          InternalToManyAccess.setRelInfo(
              object.children,
              store,
              RelInfo<DataPointName>.toOneBacklink(
                  6, object.id, (DataPointName srcObject) => srcObject.parent),
              store.box<DataPointName>());
          return object;
        }),
    DayBucket: EntityDefinition<DayBucket>(
        model: _entities[4],
        toOneRelations: (DayBucket object) => [object.month, object.profile],
        toManyRelations: (DayBucket object) => {
              RelInfo<DayBucket>.toMany(5, object.id): object.hours,
              RelInfo<DayBucket>.toMany(6, object.id): object.dataPoints
            },
        getId: (DayBucket object) => object.id,
        setId: (DayBucket object, int id) {
          object.id = id;
        },
        objectToFB: (DayBucket object, fb.Builder fbb) {
          final dbCategoryMapOffset = fbb.writeString(object.dbCategoryMap);
          final dbServiceMapOffset = fbb.writeString(object.dbServiceMap);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.day);
          fbb.addInt64(2, object.weekDay);
          fbb.addInt64(3, object.dateTime.microsecondsSinceEpoch * 1000);
          fbb.addInt64(4, object.total);
          fbb.addInt64(5, object.month.targetId);
          fbb.addInt64(6, object.profile.targetId);
          fbb.addInt64(7, object.dbDateTime);
          fbb.addOffset(8, dbCategoryMapOffset);
          fbb.addOffset(9, dbServiceMapOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DayBucket(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              total:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              day: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              weekDay:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              dateTime: DateTime.fromMicrosecondsSinceEpoch(
                  (const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0) /
                          1000)
                      .round()))
            ..dbDateTime =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)
            ..dbCategoryMap = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 20, '')
            ..dbServiceMap = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 22, '');
          object.month.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.month.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.profile.attach(store);
          InternalToManyAccess.setRelInfo(object.hours, store,
              RelInfo<DayBucket>.toMany(5, object.id), store.box<DayBucket>());
          InternalToManyAccess.setRelInfo(object.dataPoints, store,
              RelInfo<DayBucket>.toMany(6, object.id), store.box<DayBucket>());
          return object;
        }),
    FileDocument: EntityDefinition<FileDocument>(
        model: _entities[5],
        toOneRelations: (FileDocument object) =>
            [object.relatedDatapoint, object.profile],
        toManyRelations: (FileDocument object) => {},
        getId: (FileDocument object) => object.id,
        setId: (FileDocument object, int id) {
          object.id = id;
        },
        objectToFB: (FileDocument object, fb.Builder fbb) {
          final uriOffset = fbb.writeString(object.uri);
          final dataOffset = fbb.writeString(object.data);
          final searchStringOffset = fbb.writeString(object.searchString);
          final thumbnailOffset = object.thumbnail == null
              ? null
              : fbb.writeString(object.thumbnail!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uriOffset);
          fbb.addOffset(2, dataOffset);
          fbb.addOffset(3, searchStringOffset);
          fbb.addOffset(4, thumbnailOffset);
          fbb.addInt64(5, object.relatedDatapoint.targetId);
          fbb.addInt64(6, object.profile.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = FileDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              uri: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              data: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              thumbnail: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              searchString: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));
          object.relatedDatapoint.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.relatedDatapoint.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.profile.attach(store);
          return object;
        }),
    HourBucket: EntityDefinition<HourBucket>(
        model: _entities[6],
        toOneRelations: (HourBucket object) => [object.day, object.profile],
        toManyRelations: (HourBucket object) =>
            {RelInfo<HourBucket>.toMany(7, object.id): object.dataPoints},
        getId: (HourBucket object) => object.id,
        setId: (HourBucket object, int id) {
          object.id = id;
        },
        objectToFB: (HourBucket object, fb.Builder fbb) {
          final dbCategoryMapOffset = fbb.writeString(object.dbCategoryMap);
          final dbServiceMapOffset = fbb.writeString(object.dbServiceMap);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.hour);
          fbb.addInt64(2, object.dateTime.microsecondsSinceEpoch * 1000);
          fbb.addInt64(3, object.total);
          fbb.addInt64(4, object.day.targetId);
          fbb.addInt64(5, object.profile.targetId);
          fbb.addInt64(6, object.dbDateTime);
          fbb.addOffset(7, dbCategoryMapOffset);
          fbb.addOffset(8, dbServiceMapOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = HourBucket(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              total:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
              hour: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              dateTime: DateTime.fromMicrosecondsSinceEpoch(
                  (const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0) /
                          1000)
                      .round()))
            ..dbDateTime =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)
            ..dbCategoryMap = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 18, '')
            ..dbServiceMap = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 20, '');
          object.day.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.day.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.profile.attach(store);
          InternalToManyAccess.setRelInfo(
              object.dataPoints,
              store,
              RelInfo<HourBucket>.toMany(7, object.id),
              store.box<HourBucket>());
          return object;
        }),
    ImageDocument: EntityDefinition<ImageDocument>(
        model: _entities[7],
        toOneRelations: (ImageDocument object) =>
            [object.relatedDatapoint, object.profile],
        toManyRelations: (ImageDocument object) => {},
        getId: (ImageDocument object) => object.id,
        setId: (ImageDocument object, int id) {
          object.id = id;
        },
        objectToFB: (ImageDocument object, fb.Builder fbb) {
          final uriOffset = fbb.writeString(object.uri);
          final dataOffset = fbb.writeString(object.data);
          final searchStringOffset = fbb.writeString(object.searchString);
          final mediaTagsOffset = fbb.writeString(object.mediaTags);
          final mediaTagScoresOffset = fbb.writeList(object.mediaTagScores
              .map(fbb.writeString)
              .toList(growable: false));
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uriOffset);
          fbb.addOffset(2, dataOffset);
          fbb.addOffset(3, searchStringOffset);
          fbb.addOffset(4, mediaTagsOffset);
          fbb.addOffset(5, mediaTagScoresOffset);
          fbb.addInt64(6, object.relatedDatapoint.targetId);
          fbb.addInt64(7, object.profile.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ImageDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              uri: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              data: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              searchString: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''))
            ..mediaTags = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..mediaTagScores = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 14, []);
          object.relatedDatapoint.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.relatedDatapoint.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.profile.attach(store);
          return object;
        }),
    LinkDocument: EntityDefinition<LinkDocument>(
        model: _entities[8],
        toOneRelations: (LinkDocument object) =>
            [object.relatedDatapoint, object.profile],
        toManyRelations: (LinkDocument object) => {},
        getId: (LinkDocument object) => object.id,
        setId: (LinkDocument object, int id) {
          object.id = id;
        },
        objectToFB: (LinkDocument object, fb.Builder fbb) {
          final uriOffset = fbb.writeString(object.uri);
          final dataOffset = fbb.writeString(object.data);
          final searchStringOffset = object.searchString == null
              ? null
              : fbb.writeString(object.searchString!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uriOffset);
          fbb.addOffset(2, dataOffset);
          fbb.addOffset(3, searchStringOffset);
          fbb.addInt64(4, object.relatedDatapoint.targetId);
          fbb.addInt64(5, object.profile.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = LinkDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              uri: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              data: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              searchString: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10));
          object.relatedDatapoint.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.relatedDatapoint.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.profile.attach(store);
          return object;
        }),
    MonthBucket: EntityDefinition<MonthBucket>(
        model: _entities[9],
        toOneRelations: (MonthBucket object) => [object.year, object.profile],
        toManyRelations: (MonthBucket object) =>
            {RelInfo<MonthBucket>.toMany(8, object.id): object.days},
        getId: (MonthBucket object) => object.id,
        setId: (MonthBucket object, int id) {
          object.id = id;
        },
        objectToFB: (MonthBucket object, fb.Builder fbb) {
          final dbCategoryMapOffset = fbb.writeString(object.dbCategoryMap);
          final dbServiceMapOffset = fbb.writeString(object.dbServiceMap);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.month);
          fbb.addInt64(2, object.dateTime.microsecondsSinceEpoch * 1000);
          fbb.addInt64(3, object.total);
          fbb.addInt64(4, object.year.targetId);
          fbb.addInt64(5, object.profile.targetId);
          fbb.addInt64(6, object.dbDateTime);
          fbb.addOffset(7, dbCategoryMapOffset);
          fbb.addOffset(8, dbServiceMapOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = MonthBucket(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              total:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
              month: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              dateTime: DateTime.fromMicrosecondsSinceEpoch(
                  (const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0) /
                          1000)
                      .round()))
            ..dbDateTime =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)
            ..dbCategoryMap = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 18, '')
            ..dbServiceMap = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 20, '');
          object.year.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.year.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.profile.attach(store);
          InternalToManyAccess.setRelInfo(
              object.days,
              store,
              RelInfo<MonthBucket>.toMany(8, object.id),
              store.box<MonthBucket>());
          return object;
        }),
    ProfileDocument: EntityDefinition<ProfileDocument>(
        model: _entities[10],
        toOneRelations: (ProfileDocument object) =>
            [object.service, object.profilePicture],
        toManyRelations: (ProfileDocument object) => {
              RelInfo<ProfileDocument>.toMany(9, object.id): object.dataPoints,
              RelInfo<DataCategory>.toOneBacklink(5, object.id,
                      (DataCategory srcObject) => srcObject.profile):
                  object.categories
            },
        getId: (ProfileDocument object) => object.id,
        setId: (ProfileDocument object, int id) {
          object.id = id;
        },
        objectToFB: (ProfileDocument object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.service.targetId);
          fbb.addInt64(3, object.profilePicture.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProfileDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));
          object.service.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.service.attach(store);
          object.profilePicture.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.profilePicture.attach(store);
          InternalToManyAccess.setRelInfo(
              object.dataPoints,
              store,
              RelInfo<ProfileDocument>.toMany(9, object.id),
              store.box<ProfileDocument>());
          InternalToManyAccess.setRelInfo(
              object.categories,
              store,
              RelInfo<DataCategory>.toOneBacklink(
                  5, object.id, (DataCategory srcObject) => srcObject.profile),
              store.box<ProfileDocument>());
          return object;
        }),
    ServiceDocument: EntityDefinition<ServiceDocument>(
        model: _entities[11],
        toOneRelations: (ServiceDocument object) => [],
        toManyRelations: (ServiceDocument object) => {},
        getId: (ServiceDocument object) => object.id,
        setId: (ServiceDocument object, int id) {
          object.id = id;
        },
        objectToFB: (ServiceDocument object, fb.Builder fbb) {
          final serviceNameOffset = fbb.writeString(object.serviceName);
          final companyNameOffset = fbb.writeString(object.companyName);
          final imageOffset = fbb.writeString(object.image);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, serviceNameOffset);
          fbb.addOffset(2, companyNameOffset);
          fbb.addOffset(3, imageOffset);
          fbb.addInt64(4, object.totalDatapoints);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ServiceDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              serviceName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              companyName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              image: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              totalDatapoints:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));

          return object;
        }),
    VideoDocument: EntityDefinition<VideoDocument>(
        model: _entities[12],
        toOneRelations: (VideoDocument object) =>
            [object.relatedDatapoint, object.profile],
        toManyRelations: (VideoDocument object) => {},
        getId: (VideoDocument object) => object.id,
        setId: (VideoDocument object, int id) {
          object.id = id;
        },
        objectToFB: (VideoDocument object, fb.Builder fbb) {
          final uriOffset = fbb.writeString(object.uri);
          final dataOffset = fbb.writeString(object.data);
          final searchStringOffset = fbb.writeString(object.searchString);
          final thumbnailOffset = object.thumbnail == null
              ? null
              : fbb.writeString(object.thumbnail!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uriOffset);
          fbb.addOffset(2, dataOffset);
          fbb.addOffset(3, searchStringOffset);
          fbb.addOffset(4, thumbnailOffset);
          fbb.addInt64(5, object.relatedDatapoint.targetId);
          fbb.addInt64(6, object.profile.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = VideoDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              uri: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              data: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              thumbnail: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              searchString: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));
          object.relatedDatapoint.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.relatedDatapoint.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.profile.attach(store);
          return object;
        }),
    YearBucket: EntityDefinition<YearBucket>(
        model: _entities[13],
        toOneRelations: (YearBucket object) => [object.profile],
        toManyRelations: (YearBucket object) =>
            {RelInfo<YearBucket>.toMany(10, object.id): object.months},
        getId: (YearBucket object) => object.id,
        setId: (YearBucket object, int id) {
          object.id = id;
        },
        objectToFB: (YearBucket object, fb.Builder fbb) {
          final dbCategoryMapOffset = fbb.writeString(object.dbCategoryMap);
          final dbServiceMapOffset = fbb.writeString(object.dbServiceMap);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.year);
          fbb.addInt64(2, object.dateTime.microsecondsSinceEpoch * 1000);
          fbb.addInt64(3, object.total);
          fbb.addInt64(4, object.profile.targetId);
          fbb.addInt64(5, object.dbDateTime);
          fbb.addOffset(6, dbCategoryMapOffset);
          fbb.addOffset(7, dbServiceMapOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = YearBucket(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              total:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
              year: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              dateTime: DateTime.fromMicrosecondsSinceEpoch(
                  (const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0) /
                          1000)
                      .round()))
            ..dbDateTime =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)
            ..dbCategoryMap = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 16, '')
            ..dbServiceMap = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 18, '');
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.profile.attach(store);
          InternalToManyAccess.setRelInfo(
              object.months,
              store,
              RelInfo<YearBucket>.toMany(10, object.id),
              store.box<YearBucket>());
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [AppSettingsDocument] entity fields to define ObjectBox queries.
class AppSettingsDocument_ {
  /// see [AppSettingsDocument.id]
  static final id =
      QueryIntegerProperty<AppSettingsDocument>(_entities[0].properties[0]);

  /// see [AppSettingsDocument.darkmode]
  static final darkmode =
      QueryBooleanProperty<AppSettingsDocument>(_entities[0].properties[1]);
}

/// [DataCategory] entity fields to define ObjectBox queries.
class DataCategory_ {
  /// see [DataCategory.id]
  static final id =
      QueryIntegerProperty<DataCategory>(_entities[1].properties[0]);

  /// see [DataCategory.count]
  static final count =
      QueryIntegerProperty<DataCategory>(_entities[1].properties[1]);

  /// see [DataCategory.matchingFoldersFacebook]
  static final matchingFoldersFacebook =
      QueryStringVectorProperty<DataCategory>(_entities[1].properties[2]);

  /// see [DataCategory.matchingFoldersInstagram]
  static final matchingFoldersInstagram =
      QueryStringVectorProperty<DataCategory>(_entities[1].properties[3]);

  /// see [DataCategory.profile]
  static final profile = QueryRelationToOne<DataCategory, ProfileDocument>(
      _entities[1].properties[4]);

  /// see [DataCategory.dbCategory]
  static final dbCategory =
      QueryIntegerProperty<DataCategory>(_entities[1].properties[5]);
}

/// [DataPoint] entity fields to define ObjectBox queries.
class DataPoint_ {
  /// see [DataPoint.id]
  static final id = QueryIntegerProperty<DataPoint>(_entities[2].properties[0]);

  /// see [DataPoint.dataPointName]
  static final dataPointName =
      QueryRelationToOne<DataPoint, DataPointName>(_entities[2].properties[1]);

  /// see [DataPoint.stringName]
  static final stringName =
      QueryStringProperty<DataPoint>(_entities[2].properties[2]);

  /// see [DataPoint.sentimentScore]
  static final sentimentScore =
      QueryDoubleProperty<DataPoint>(_entities[2].properties[3]);

  /// see [DataPoint.sentimentText]
  static final sentimentText =
      QueryStringProperty<DataPoint>(_entities[2].properties[4]);

  /// see [DataPoint.category]
  static final category =
      QueryRelationToOne<DataPoint, DataCategory>(_entities[2].properties[5]);

  /// see [DataPoint.profile]
  static final profile = QueryRelationToOne<DataPoint, ProfileDocument>(
      _entities[2].properties[6]);

  /// see [DataPoint.searchTerms]
  static final searchTerms =
      QueryStringProperty<DataPoint>(_entities[2].properties[7]);

  /// see [DataPoint.values]
  static final values =
      QueryStringProperty<DataPoint>(_entities[2].properties[8]);

  /// see [DataPoint.createdAt]
  static final createdAt =
      QueryIntegerProperty<DataPoint>(_entities[2].properties[9]);

  /// see [DataPoint.dbCreatedAt]
  static final dbCreatedAt =
      QueryIntegerProperty<DataPoint>(_entities[2].properties[10]);

  /// see [DataPoint.images]
  static final images =
      QueryRelationToMany<DataPoint, ImageDocument>(_entities[2].relations[0]);

  /// see [DataPoint.videos]
  static final videos =
      QueryRelationToMany<DataPoint, VideoDocument>(_entities[2].relations[1]);

  /// see [DataPoint.files]
  static final files =
      QueryRelationToMany<DataPoint, FileDocument>(_entities[2].relations[2]);

  /// see [DataPoint.links]
  static final links =
      QueryRelationToMany<DataPoint, LinkDocument>(_entities[2].relations[3]);
}

/// [DataPointName] entity fields to define ObjectBox queries.
class DataPointName_ {
  /// see [DataPointName.id]
  static final id =
      QueryIntegerProperty<DataPointName>(_entities[3].properties[0]);

  /// see [DataPointName.count]
  static final count =
      QueryIntegerProperty<DataPointName>(_entities[3].properties[1]);

  /// see [DataPointName.name]
  static final name =
      QueryStringProperty<DataPointName>(_entities[3].properties[2]);

  /// see [DataPointName.dataCategory]
  static final dataCategory = QueryRelationToOne<DataPointName, DataCategory>(
      _entities[3].properties[3]);

  /// see [DataPointName.profile]
  static final profile = QueryRelationToOne<DataPointName, ProfileDocument>(
      _entities[3].properties[4]);

  /// see [DataPointName.parent]
  static final parent = QueryRelationToOne<DataPointName, DataPointName>(
      _entities[3].properties[5]);
}

/// [DayBucket] entity fields to define ObjectBox queries.
class DayBucket_ {
  /// see [DayBucket.id]
  static final id = QueryIntegerProperty<DayBucket>(_entities[4].properties[0]);

  /// see [DayBucket.day]
  static final day =
      QueryIntegerProperty<DayBucket>(_entities[4].properties[1]);

  /// see [DayBucket.weekDay]
  static final weekDay =
      QueryIntegerProperty<DayBucket>(_entities[4].properties[2]);

  /// see [DayBucket.dateTime]
  static final dateTime =
      QueryIntegerProperty<DayBucket>(_entities[4].properties[3]);

  /// see [DayBucket.total]
  static final total =
      QueryIntegerProperty<DayBucket>(_entities[4].properties[4]);

  /// see [DayBucket.month]
  static final month =
      QueryRelationToOne<DayBucket, MonthBucket>(_entities[4].properties[5]);

  /// see [DayBucket.profile]
  static final profile = QueryRelationToOne<DayBucket, ProfileDocument>(
      _entities[4].properties[6]);

  /// see [DayBucket.dbDateTime]
  static final dbDateTime =
      QueryIntegerProperty<DayBucket>(_entities[4].properties[7]);

  /// see [DayBucket.dbCategoryMap]
  static final dbCategoryMap =
      QueryStringProperty<DayBucket>(_entities[4].properties[8]);

  /// see [DayBucket.dbServiceMap]
  static final dbServiceMap =
      QueryStringProperty<DayBucket>(_entities[4].properties[9]);

  /// see [DayBucket.hours]
  static final hours =
      QueryRelationToMany<DayBucket, HourBucket>(_entities[4].relations[0]);

  /// see [DayBucket.dataPoints]
  static final dataPoints =
      QueryRelationToMany<DayBucket, DataPoint>(_entities[4].relations[1]);
}

/// [FileDocument] entity fields to define ObjectBox queries.
class FileDocument_ {
  /// see [FileDocument.id]
  static final id =
      QueryIntegerProperty<FileDocument>(_entities[5].properties[0]);

  /// see [FileDocument.uri]
  static final uri =
      QueryStringProperty<FileDocument>(_entities[5].properties[1]);

  /// see [FileDocument.data]
  static final data =
      QueryStringProperty<FileDocument>(_entities[5].properties[2]);

  /// see [FileDocument.searchString]
  static final searchString =
      QueryStringProperty<FileDocument>(_entities[5].properties[3]);

  /// see [FileDocument.thumbnail]
  static final thumbnail =
      QueryStringProperty<FileDocument>(_entities[5].properties[4]);

  /// see [FileDocument.relatedDatapoint]
  static final relatedDatapoint =
      QueryRelationToOne<FileDocument, DataPoint>(_entities[5].properties[5]);

  /// see [FileDocument.profile]
  static final profile = QueryRelationToOne<FileDocument, ProfileDocument>(
      _entities[5].properties[6]);
}

/// [HourBucket] entity fields to define ObjectBox queries.
class HourBucket_ {
  /// see [HourBucket.id]
  static final id =
      QueryIntegerProperty<HourBucket>(_entities[6].properties[0]);

  /// see [HourBucket.hour]
  static final hour =
      QueryIntegerProperty<HourBucket>(_entities[6].properties[1]);

  /// see [HourBucket.dateTime]
  static final dateTime =
      QueryIntegerProperty<HourBucket>(_entities[6].properties[2]);

  /// see [HourBucket.total]
  static final total =
      QueryIntegerProperty<HourBucket>(_entities[6].properties[3]);

  /// see [HourBucket.day]
  static final day =
      QueryRelationToOne<HourBucket, DayBucket>(_entities[6].properties[4]);

  /// see [HourBucket.profile]
  static final profile = QueryRelationToOne<HourBucket, ProfileDocument>(
      _entities[6].properties[5]);

  /// see [HourBucket.dbDateTime]
  static final dbDateTime =
      QueryIntegerProperty<HourBucket>(_entities[6].properties[6]);

  /// see [HourBucket.dbCategoryMap]
  static final dbCategoryMap =
      QueryStringProperty<HourBucket>(_entities[6].properties[7]);

  /// see [HourBucket.dbServiceMap]
  static final dbServiceMap =
      QueryStringProperty<HourBucket>(_entities[6].properties[8]);

  /// see [HourBucket.dataPoints]
  static final dataPoints =
      QueryRelationToMany<HourBucket, DataPoint>(_entities[6].relations[0]);
}

/// [ImageDocument] entity fields to define ObjectBox queries.
class ImageDocument_ {
  /// see [ImageDocument.id]
  static final id =
      QueryIntegerProperty<ImageDocument>(_entities[7].properties[0]);

  /// see [ImageDocument.uri]
  static final uri =
      QueryStringProperty<ImageDocument>(_entities[7].properties[1]);

  /// see [ImageDocument.data]
  static final data =
      QueryStringProperty<ImageDocument>(_entities[7].properties[2]);

  /// see [ImageDocument.searchString]
  static final searchString =
      QueryStringProperty<ImageDocument>(_entities[7].properties[3]);

  /// see [ImageDocument.mediaTags]
  static final mediaTags =
      QueryStringProperty<ImageDocument>(_entities[7].properties[4]);

  /// see [ImageDocument.mediaTagScores]
  static final mediaTagScores =
      QueryStringVectorProperty<ImageDocument>(_entities[7].properties[5]);

  /// see [ImageDocument.relatedDatapoint]
  static final relatedDatapoint =
      QueryRelationToOne<ImageDocument, DataPoint>(_entities[7].properties[6]);

  /// see [ImageDocument.profile]
  static final profile = QueryRelationToOne<ImageDocument, ProfileDocument>(
      _entities[7].properties[7]);
}

/// [LinkDocument] entity fields to define ObjectBox queries.
class LinkDocument_ {
  /// see [LinkDocument.id]
  static final id =
      QueryIntegerProperty<LinkDocument>(_entities[8].properties[0]);

  /// see [LinkDocument.uri]
  static final uri =
      QueryStringProperty<LinkDocument>(_entities[8].properties[1]);

  /// see [LinkDocument.data]
  static final data =
      QueryStringProperty<LinkDocument>(_entities[8].properties[2]);

  /// see [LinkDocument.searchString]
  static final searchString =
      QueryStringProperty<LinkDocument>(_entities[8].properties[3]);

  /// see [LinkDocument.relatedDatapoint]
  static final relatedDatapoint =
      QueryRelationToOne<LinkDocument, DataPoint>(_entities[8].properties[4]);

  /// see [LinkDocument.profile]
  static final profile = QueryRelationToOne<LinkDocument, ProfileDocument>(
      _entities[8].properties[5]);
}

/// [MonthBucket] entity fields to define ObjectBox queries.
class MonthBucket_ {
  /// see [MonthBucket.id]
  static final id =
      QueryIntegerProperty<MonthBucket>(_entities[9].properties[0]);

  /// see [MonthBucket.month]
  static final month =
      QueryIntegerProperty<MonthBucket>(_entities[9].properties[1]);

  /// see [MonthBucket.dateTime]
  static final dateTime =
      QueryIntegerProperty<MonthBucket>(_entities[9].properties[2]);

  /// see [MonthBucket.total]
  static final total =
      QueryIntegerProperty<MonthBucket>(_entities[9].properties[3]);

  /// see [MonthBucket.year]
  static final year =
      QueryRelationToOne<MonthBucket, YearBucket>(_entities[9].properties[4]);

  /// see [MonthBucket.profile]
  static final profile = QueryRelationToOne<MonthBucket, ProfileDocument>(
      _entities[9].properties[5]);

  /// see [MonthBucket.dbDateTime]
  static final dbDateTime =
      QueryIntegerProperty<MonthBucket>(_entities[9].properties[6]);

  /// see [MonthBucket.dbCategoryMap]
  static final dbCategoryMap =
      QueryStringProperty<MonthBucket>(_entities[9].properties[7]);

  /// see [MonthBucket.dbServiceMap]
  static final dbServiceMap =
      QueryStringProperty<MonthBucket>(_entities[9].properties[8]);

  /// see [MonthBucket.days]
  static final days =
      QueryRelationToMany<MonthBucket, DayBucket>(_entities[9].relations[0]);
}

/// [ProfileDocument] entity fields to define ObjectBox queries.
class ProfileDocument_ {
  /// see [ProfileDocument.id]
  static final id =
      QueryIntegerProperty<ProfileDocument>(_entities[10].properties[0]);

  /// see [ProfileDocument.name]
  static final name =
      QueryStringProperty<ProfileDocument>(_entities[10].properties[1]);

  /// see [ProfileDocument.service]
  static final service = QueryRelationToOne<ProfileDocument, ServiceDocument>(
      _entities[10].properties[2]);

  /// see [ProfileDocument.profilePicture]
  static final profilePicture =
      QueryRelationToOne<ProfileDocument, ImageDocument>(
          _entities[10].properties[3]);

  /// see [ProfileDocument.dataPoints]
  static final dataPoints = QueryRelationToMany<ProfileDocument, DataPoint>(
      _entities[10].relations[0]);
}

/// [ServiceDocument] entity fields to define ObjectBox queries.
class ServiceDocument_ {
  /// see [ServiceDocument.id]
  static final id =
      QueryIntegerProperty<ServiceDocument>(_entities[11].properties[0]);

  /// see [ServiceDocument.serviceName]
  static final serviceName =
      QueryStringProperty<ServiceDocument>(_entities[11].properties[1]);

  /// see [ServiceDocument.companyName]
  static final companyName =
      QueryStringProperty<ServiceDocument>(_entities[11].properties[2]);

  /// see [ServiceDocument.image]
  static final image =
      QueryStringProperty<ServiceDocument>(_entities[11].properties[3]);

  /// see [ServiceDocument.totalDatapoints]
  static final totalDatapoints =
      QueryIntegerProperty<ServiceDocument>(_entities[11].properties[4]);
}

/// [VideoDocument] entity fields to define ObjectBox queries.
class VideoDocument_ {
  /// see [VideoDocument.id]
  static final id =
      QueryIntegerProperty<VideoDocument>(_entities[12].properties[0]);

  /// see [VideoDocument.uri]
  static final uri =
      QueryStringProperty<VideoDocument>(_entities[12].properties[1]);

  /// see [VideoDocument.data]
  static final data =
      QueryStringProperty<VideoDocument>(_entities[12].properties[2]);

  /// see [VideoDocument.searchString]
  static final searchString =
      QueryStringProperty<VideoDocument>(_entities[12].properties[3]);

  /// see [VideoDocument.thumbnail]
  static final thumbnail =
      QueryStringProperty<VideoDocument>(_entities[12].properties[4]);

  /// see [VideoDocument.relatedDatapoint]
  static final relatedDatapoint =
      QueryRelationToOne<VideoDocument, DataPoint>(_entities[12].properties[5]);

  /// see [VideoDocument.profile]
  static final profile = QueryRelationToOne<VideoDocument, ProfileDocument>(
      _entities[12].properties[6]);
}

/// [YearBucket] entity fields to define ObjectBox queries.
class YearBucket_ {
  /// see [YearBucket.id]
  static final id =
      QueryIntegerProperty<YearBucket>(_entities[13].properties[0]);

  /// see [YearBucket.year]
  static final year =
      QueryIntegerProperty<YearBucket>(_entities[13].properties[1]);

  /// see [YearBucket.dateTime]
  static final dateTime =
      QueryIntegerProperty<YearBucket>(_entities[13].properties[2]);

  /// see [YearBucket.total]
  static final total =
      QueryIntegerProperty<YearBucket>(_entities[13].properties[3]);

  /// see [YearBucket.profile]
  static final profile = QueryRelationToOne<YearBucket, ProfileDocument>(
      _entities[13].properties[4]);

  /// see [YearBucket.dbDateTime]
  static final dbDateTime =
      QueryIntegerProperty<YearBucket>(_entities[13].properties[5]);

  /// see [YearBucket.dbCategoryMap]
  static final dbCategoryMap =
      QueryStringProperty<YearBucket>(_entities[13].properties[6]);

  /// see [YearBucket.dbServiceMap]
  static final dbServiceMap =
      QueryStringProperty<YearBucket>(_entities[13].properties[7]);

  /// see [YearBucket.months]
  static final months =
      QueryRelationToMany<YearBucket, MonthBucket>(_entities[13].relations[0]);
}
