// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../data/entities/media/file_document.dart';
import '../../data/entities/media/image_document.dart';
import '../../data/entities/media/link_document.dart';
import '../../data/entities/media/video_document.dart';
import '../../data/entities/misc/appsettings_document.dart';
import '../../data/entities/misc/profile_document.dart';
import '../../data/entities/misc/service_document.dart';
import '../../data/entities/nodes/category_node.dart';
import '../../data/entities/nodes/datapoint_node.dart';
import '../../data/entities/nodes/name_node.dart';
import '../../data/entities/timebuckets/day_bucket.dart';
import '../../data/entities/timebuckets/hour_bucket.dart';
import '../../data/entities/timebuckets/month_bucket.dart';
import '../../data/entities/timebuckets/year_bucket.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 2572810954704600281),
      name: 'AppSettingsDocument',
      lastPropertyId: const IdUid(2, 7066389775684522522),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 859655308261361690),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7066389775684522522),
            name: 'darkmode',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 5058648612397903678),
      name: 'DataCategory',
      lastPropertyId: const IdUid(6, 4917310677803971723),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1708880589170482166),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2702520560904001084),
            name: 'count',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8339501691045943653),
            name: 'matchingFoldersFacebook',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1220687438945674252),
            name: 'matchingFoldersInstagram',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1566439430987611533),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 5977481002170614797),
            relationTarget: 'ProfileDocument'),
        ModelProperty(
            id: const IdUid(6, 4917310677803971723),
            name: 'dbCategory',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'dataPointNames',
            srcEntity: 'DataPointName',
            srcField: 'dataCategory')
      ]),
  ModelEntity(
      id: const IdUid(3, 7588201381205324912),
      name: 'DataPoint',
      lastPropertyId: const IdUid(11, 3141228638032248929),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5884756173994019210),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1976441936277593670),
            name: 'dataPointNameId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 844113529054179555),
            relationTarget: 'DataPointName'),
        ModelProperty(
            id: const IdUid(3, 7400669188048944810),
            name: 'stringName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5061591786894722129),
            name: 'sentimentScore',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 689114365278296180),
            name: 'sentimentText',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1419031784954665246),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 2829364391124208033),
            relationTarget: 'DataCategory'),
        ModelProperty(
            id: const IdUid(7, 3094968718471057967),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 3992337306720928726),
            relationTarget: 'ProfileDocument'),
        ModelProperty(
            id: const IdUid(8, 6345558192729512167),
            name: 'searchStrings',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 114729927144793184),
            name: 'values',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3518790856212002916),
            name: 'createdAt',
            type: 12,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 3141228638032248929),
            name: 'dbCreatedAt',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 3049162761157313758),
            name: 'images',
            targetId: const IdUid(8, 7496945384643008572)),
        ModelRelation(
            id: const IdUid(2, 1969689457816527969),
            name: 'videos',
            targetId: const IdUid(13, 8415537367644358546)),
        ModelRelation(
            id: const IdUid(3, 8373707476960920528),
            name: 'files',
            targetId: const IdUid(6, 1726070624969433234)),
        ModelRelation(
            id: const IdUid(4, 1622071894925376638),
            name: 'links',
            targetId: const IdUid(9, 2079604300516438053))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 1824872249918763027),
      name: 'DataPointName',
      lastPropertyId: const IdUid(6, 236112456074751659),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 330458341869040956),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1958900875529640544),
            name: 'count',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8365967144471683396),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 860113951645320486),
            name: 'dataCategoryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(5, 7498636858076544309),
            relationTarget: 'DataCategory'),
        ModelProperty(
            id: const IdUid(5, 4322796683379103741),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(6, 2193843360200383705),
            relationTarget: 'ProfileDocument'),
        ModelProperty(
            id: const IdUid(6, 236112456074751659),
            name: 'parentId',
            type: 11,
            flags: 520,
            indexId: const IdUid(7, 1507599150265700641),
            relationTarget: 'DataPointName')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(5, 373923637106282579),
            name: 'children',
            targetId: const IdUid(4, 1824872249918763027))
      ],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'dataPoints',
            srcEntity: 'DataPoint',
            srcField: 'dataPointName')
      ]),
  ModelEntity(
      id: const IdUid(5, 7456633653778396018),
      name: 'DayBucket',
      lastPropertyId: const IdUid(6, 4148370376086181327),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2805005600176034692),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7777017867200002909),
            name: 'day',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1415098051822324469),
            name: 'total',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1380228596985237406),
            name: 'monthId',
            type: 11,
            flags: 520,
            indexId: const IdUid(8, 2479974601937385700),
            relationTarget: 'MonthBucket'),
        ModelProperty(
            id: const IdUid(5, 3143772683277728717),
            name: 'dbCategoryMap',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4148370376086181327),
            name: 'dbServiceMap',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(6, 6292203425803677690),
            name: 'hours',
            targetId: const IdUid(7, 6413507691593405630)),
        ModelRelation(
            id: const IdUid(7, 3958971529330660058),
            name: 'dataPoints',
            targetId: const IdUid(3, 7588201381205324912))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 1726070624969433234),
      name: 'FileDocument',
      lastPropertyId: const IdUid(7, 161156516118477006),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7772811018736779053),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7076003789041571901),
            name: 'uri',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8807775581815992333),
            name: 'data',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2040239459014483342),
            name: 'searchString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1971897137338481807),
            name: 'thumbnail',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3039524191861169776),
            name: 'relatedDatapointId',
            type: 11,
            flags: 520,
            indexId: const IdUid(9, 4461948596147648440),
            relationTarget: 'DataPoint'),
        ModelProperty(
            id: const IdUid(7, 161156516118477006),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(10, 999129108204313189),
            relationTarget: 'ProfileDocument')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 6413507691593405630),
      name: 'HourBucket',
      lastPropertyId: const IdUid(6, 8262517060474434665),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5960727824587371937),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 519282328442198725),
            name: 'hour',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1881040114908586574),
            name: 'total',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5307178953048961754),
            name: 'dayId',
            type: 11,
            flags: 520,
            indexId: const IdUid(11, 7438376646635596609),
            relationTarget: 'DayBucket'),
        ModelProperty(
            id: const IdUid(5, 7663836195146367589),
            name: 'dbCategoryMap',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8262517060474434665),
            name: 'dbServiceMap',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(8, 8081973389742445004),
            name: 'dataPoints',
            targetId: const IdUid(3, 7588201381205324912))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 7496945384643008572),
      name: 'ImageDocument',
      lastPropertyId: const IdUid(8, 3346685458978474009),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8220988637697685496),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4632775564336953548),
            name: 'uri',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 9019825384864298735),
            name: 'data',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5198154111233643517),
            name: 'searchString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1473585359719707840),
            name: 'mediaTags',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5197990171550472287),
            name: 'mediaTagScores',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3010157958474477202),
            name: 'relatedDatapointId',
            type: 11,
            flags: 520,
            indexId: const IdUid(12, 2927522186007669716),
            relationTarget: 'DataPoint'),
        ModelProperty(
            id: const IdUid(8, 3346685458978474009),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(13, 4721710211866697949),
            relationTarget: 'ProfileDocument')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 2079604300516438053),
      name: 'LinkDocument',
      lastPropertyId: const IdUid(6, 521371539250941222),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6127657931898016259),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5289341206677574839),
            name: 'uri',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1279199801278305630),
            name: 'data',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2025181722961914079),
            name: 'searchString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4995317924178115841),
            name: 'relatedDatapointId',
            type: 11,
            flags: 520,
            indexId: const IdUid(14, 6279742706087974214),
            relationTarget: 'DataPoint'),
        ModelProperty(
            id: const IdUid(6, 521371539250941222),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(15, 552617011438432817),
            relationTarget: 'ProfileDocument')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(10, 8413181101107612304),
      name: 'MonthBucket',
      lastPropertyId: const IdUid(6, 7907776736404220578),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2557963495134946509),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4537420976653429923),
            name: 'month',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8459507759626776961),
            name: 'total',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3011993900516924538),
            name: 'yearId',
            type: 11,
            flags: 520,
            indexId: const IdUid(16, 6602403456908202233),
            relationTarget: 'YearBucket'),
        ModelProperty(
            id: const IdUid(5, 1750778895713197337),
            name: 'dbCategoryMap',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7907776736404220578),
            name: 'dbServiceMap',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(9, 6324931058379993605),
            name: 'days',
            targetId: const IdUid(5, 7456633653778396018))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(11, 5994998067884215195),
      name: 'ProfileDocument',
      lastPropertyId: const IdUid(4, 5757271755640106631),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2132207579570730211),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4488382445850060875),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8565482590041450058),
            name: 'serviceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(17, 8416071362202583307),
            relationTarget: 'ServiceDocument'),
        ModelProperty(
            id: const IdUid(4, 5757271755640106631),
            name: 'profilePictureId',
            type: 11,
            flags: 520,
            indexId: const IdUid(18, 6472271113405865196),
            relationTarget: 'ImageDocument')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(10, 5657546026270666999),
            name: 'dataPoints',
            targetId: const IdUid(3, 7588201381205324912))
      ],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'categories', srcEntity: 'DataCategory', srcField: 'profile')
      ]),
  ModelEntity(
      id: const IdUid(12, 6369977604026628545),
      name: 'ServiceDocument',
      lastPropertyId: const IdUid(5, 4500890243188079587),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4213729156230361305),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4032672970131904104),
            name: 'serviceName',
            type: 9,
            flags: 2080,
            indexId: const IdUid(19, 3634690877784358733)),
        ModelProperty(
            id: const IdUid(3, 2145310627129647951),
            name: 'companyName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7315001459299050338),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4500890243188079587),
            name: 'totalDatapoints',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(13, 8415537367644358546),
      name: 'VideoDocument',
      lastPropertyId: const IdUid(7, 7238950821870880351),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8238489995329220967),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4392832665490857699),
            name: 'uri',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3952682767229495236),
            name: 'data',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1239382179565895630),
            name: 'searchString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2686154356929026523),
            name: 'thumbnail',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8200160703077046394),
            name: 'relatedDatapointId',
            type: 11,
            flags: 520,
            indexId: const IdUid(20, 6726043527938705382),
            relationTarget: 'DataPoint'),
        ModelProperty(
            id: const IdUid(7, 7238950821870880351),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(21, 1921715029126291771),
            relationTarget: 'ProfileDocument')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(14, 6842741127472513515),
      name: 'YearBucket',
      lastPropertyId: const IdUid(5, 1020720536637722226),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3514294378012937162),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1792390489309255806),
            name: 'year',
            type: 6,
            flags: 40,
            indexId: const IdUid(22, 20441507491818302)),
        ModelProperty(
            id: const IdUid(3, 1307945325438803611),
            name: 'total',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4187228934215264639),
            name: 'dbCategoryMap',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1020720536637722226),
            name: 'dbServiceMap',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(11, 5964583696900742899),
            name: 'months',
            targetId: const IdUid(10, 8413181101107612304))
      ],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(14, 6842741127472513515),
      lastIndexId: const IdUid(22, 20441507491818302),
      lastRelationId: const IdUid(11, 5964583696900742899),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    AppSettingsDocument: EntityDefinition<AppSettingsDocument>(
        model: _entities[0],
        toOneRelations: (AppSettingsDocument object) => [],
        toManyRelations: (AppSettingsDocument object) => {},
        getId: (AppSettingsDocument object) => object.id,
        setId: (AppSettingsDocument object, int id) {
          object.id = id;
        },
        objectToFB: (AppSettingsDocument object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.darkmode);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AppSettingsDocument(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false));

          return object;
        }),
    DataCategory: EntityDefinition<DataCategory>(
        model: _entities[1],
        toOneRelations: (DataCategory object) => [object.profile],
        toManyRelations: (DataCategory object) => {
              RelInfo<DataPointName>.toOneBacklink(4, object.id,
                      (DataPointName srcObject) => srcObject.dataCategory):
                  object.dataPointNames
            },
        getId: (DataCategory object) => object.id,
        setId: (DataCategory object, int id) {
          object.id = id;
        },
        objectToFB: (DataCategory object, fb.Builder fbb) {
          final matchingFoldersFacebookOffset = fbb.writeList(object
              .matchingFoldersFacebook
              .map(fbb.writeString)
              .toList(growable: false));
          final matchingFoldersInstagramOffset = fbb.writeList(object
              .matchingFoldersInstagram
              .map(fbb.writeString)
              .toList(growable: false));
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.count);
          fbb.addOffset(2, matchingFoldersFacebookOffset);
          fbb.addOffset(3, matchingFoldersInstagramOffset);
          fbb.addInt64(4, object.profile.targetId);
          fbb.addInt64(5, object.dbCategory);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DataCategory(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              count: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              matchingFoldersFacebook: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGet(buffer, rootOffset, 8, []),
              matchingFoldersInstagram: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGet(buffer, rootOffset, 10, []))
            ..dbCategory =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.profile.attach(store);
          InternalToManyAccess.setRelInfo(
              object.dataPointNames,
              store,
              RelInfo<DataPointName>.toOneBacklink(4, object.id,
                  (DataPointName srcObject) => srcObject.dataCategory),
              store.box<DataCategory>());
          return object;
        }),
    DataPoint: EntityDefinition<DataPoint>(
        model: _entities[2],
        toOneRelations: (DataPoint object) =>
            [object.dataPointName, object.category, object.profile],
        toManyRelations: (DataPoint object) => {
              RelInfo<DataPoint>.toMany(1, object.id): object.images,
              RelInfo<DataPoint>.toMany(2, object.id): object.videos,
              RelInfo<DataPoint>.toMany(3, object.id): object.files,
              RelInfo<DataPoint>.toMany(4, object.id): object.links
            },
        getId: (DataPoint object) => object.id,
        setId: (DataPoint object, int id) {
          object.id = id;
        },
        objectToFB: (DataPoint object, fb.Builder fbb) {
          final stringNameOffset = fbb.writeString(object.stringName);
          final sentimentTextOffset = object.sentimentText == null
              ? null
              : fbb.writeString(object.sentimentText!);
          final searchStringsOffset = fbb.writeList(object.searchStrings
              .map(fbb.writeString)
              .toList(growable: false));
          final valuesOffset = fbb.writeString(object.values);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.dataPointName.targetId);
          fbb.addOffset(2, stringNameOffset);
          fbb.addFloat64(3, object.sentimentScore);
          fbb.addOffset(4, sentimentTextOffset);
          fbb.addInt64(5, object.category.targetId);
          fbb.addInt64(6, object.profile.targetId);
          fbb.addOffset(7, searchStringsOffset);
          fbb.addOffset(8, valuesOffset);
          fbb.addInt64(9, object.createdAt.microsecondsSinceEpoch * 1000);
          fbb.addInt64(10, object.dbCreatedAt);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DataPoint(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              sentimentScore: const fb.Float64Reader()
                  .vTableGetNullable(buffer, rootOffset, 10))
            ..stringName = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..sentimentText = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..searchStrings = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 18, [])
            ..values = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 20, '')
            ..createdAt = DateTime.fromMicrosecondsSinceEpoch(
                (const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0) /
                        1000)
                    .round())
            ..dbCreatedAt =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.dataPointName.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.dataPointName.attach(store);
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.category.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.profile.attach(store);
          InternalToManyAccess.setRelInfo(object.images, store,
              RelInfo<DataPoint>.toMany(1, object.id), store.box<DataPoint>());
          InternalToManyAccess.setRelInfo(object.videos, store,
              RelInfo<DataPoint>.toMany(2, object.id), store.box<DataPoint>());
          InternalToManyAccess.setRelInfo(object.files, store,
              RelInfo<DataPoint>.toMany(3, object.id), store.box<DataPoint>());
          InternalToManyAccess.setRelInfo(object.links, store,
              RelInfo<DataPoint>.toMany(4, object.id), store.box<DataPoint>());
          return object;
        }),
    DataPointName: EntityDefinition<DataPointName>(
        model: _entities[3],
        toOneRelations: (DataPointName object) =>
            [object.dataCategory, object.profile, object.parent],
        toManyRelations: (DataPointName object) => {
              RelInfo<DataPointName>.toMany(5, object.id): object.children,
              RelInfo<DataPoint>.toOneBacklink(2, object.id,
                      (DataPoint srcObject) => srcObject.dataPointName):
                  object.dataPoints
            },
        getId: (DataPointName object) => object.id,
        setId: (DataPointName object, int id) {
          object.id = id;
        },
        objectToFB: (DataPointName object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.count);
          fbb.addOffset(2, nameOffset);
          fbb.addInt64(3, object.dataCategory.targetId);
          fbb.addInt64(4, object.profile.targetId);
          fbb.addInt64(5, object.parent.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DataPointName(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              count: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''));
          object.dataCategory.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.dataCategory.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.profile.attach(store);
          object.parent.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.parent.attach(store);
          InternalToManyAccess.setRelInfo(
              object.children,
              store,
              RelInfo<DataPointName>.toMany(5, object.id),
              store.box<DataPointName>());
          InternalToManyAccess.setRelInfo(
              object.dataPoints,
              store,
              RelInfo<DataPoint>.toOneBacklink(2, object.id,
                  (DataPoint srcObject) => srcObject.dataPointName),
              store.box<DataPointName>());
          return object;
        }),
    DayBucket: EntityDefinition<DayBucket>(
        model: _entities[4],
        toOneRelations: (DayBucket object) => [object.month],
        toManyRelations: (DayBucket object) => {
              RelInfo<DayBucket>.toMany(6, object.id): object.hours,
              RelInfo<DayBucket>.toMany(7, object.id): object.dataPoints
            },
        getId: (DayBucket object) => object.id,
        setId: (DayBucket object, int id) {
          object.id = id;
        },
        objectToFB: (DayBucket object, fb.Builder fbb) {
          final dbCategoryMapOffset = fbb.writeString(object.dbCategoryMap);
          final dbServiceMapOffset = fbb.writeString(object.dbServiceMap);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.day);
          fbb.addInt64(2, object.total);
          fbb.addInt64(3, object.month.targetId);
          fbb.addOffset(4, dbCategoryMapOffset);
          fbb.addOffset(5, dbServiceMapOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DayBucket(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              total: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              day: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0))
            ..dbCategoryMap = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..dbServiceMap = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '');
          object.month.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.month.attach(store);
          InternalToManyAccess.setRelInfo(object.hours, store,
              RelInfo<DayBucket>.toMany(6, object.id), store.box<DayBucket>());
          InternalToManyAccess.setRelInfo(object.dataPoints, store,
              RelInfo<DayBucket>.toMany(7, object.id), store.box<DayBucket>());
          return object;
        }),
    FileDocument: EntityDefinition<FileDocument>(
        model: _entities[5],
        toOneRelations: (FileDocument object) =>
            [object.relatedDatapoint, object.profile],
        toManyRelations: (FileDocument object) => {},
        getId: (FileDocument object) => object.id,
        setId: (FileDocument object, int id) {
          object.id = id;
        },
        objectToFB: (FileDocument object, fb.Builder fbb) {
          final uriOffset = fbb.writeString(object.uri);
          final dataOffset = fbb.writeString(object.data);
          final searchStringOffset = fbb.writeString(object.searchString);
          final thumbnailOffset = object.thumbnail == null
              ? null
              : fbb.writeString(object.thumbnail!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uriOffset);
          fbb.addOffset(2, dataOffset);
          fbb.addOffset(3, searchStringOffset);
          fbb.addOffset(4, thumbnailOffset);
          fbb.addInt64(5, object.relatedDatapoint.targetId);
          fbb.addInt64(6, object.profile.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = FileDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              uri: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              data: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              thumbnail: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              searchString: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));
          object.relatedDatapoint.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.relatedDatapoint.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.profile.attach(store);
          return object;
        }),
    HourBucket: EntityDefinition<HourBucket>(
        model: _entities[6],
        toOneRelations: (HourBucket object) => [object.day],
        toManyRelations: (HourBucket object) =>
            {RelInfo<HourBucket>.toMany(8, object.id): object.dataPoints},
        getId: (HourBucket object) => object.id,
        setId: (HourBucket object, int id) {
          object.id = id;
        },
        objectToFB: (HourBucket object, fb.Builder fbb) {
          final dbCategoryMapOffset = fbb.writeString(object.dbCategoryMap);
          final dbServiceMapOffset = fbb.writeString(object.dbServiceMap);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.hour);
          fbb.addInt64(2, object.total);
          fbb.addInt64(3, object.day.targetId);
          fbb.addOffset(4, dbCategoryMapOffset);
          fbb.addOffset(5, dbServiceMapOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = HourBucket(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              total: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              hour: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0))
            ..dbCategoryMap = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..dbServiceMap = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '');
          object.day.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.day.attach(store);
          InternalToManyAccess.setRelInfo(
              object.dataPoints,
              store,
              RelInfo<HourBucket>.toMany(8, object.id),
              store.box<HourBucket>());
          return object;
        }),
    ImageDocument: EntityDefinition<ImageDocument>(
        model: _entities[7],
        toOneRelations: (ImageDocument object) =>
            [object.relatedDatapoint, object.profile],
        toManyRelations: (ImageDocument object) => {},
        getId: (ImageDocument object) => object.id,
        setId: (ImageDocument object, int id) {
          object.id = id;
        },
        objectToFB: (ImageDocument object, fb.Builder fbb) {
          final uriOffset = fbb.writeString(object.uri);
          final dataOffset = fbb.writeString(object.data);
          final searchStringOffset = fbb.writeString(object.searchString);
          final mediaTagsOffset = fbb.writeString(object.mediaTags);
          final mediaTagScoresOffset = fbb.writeList(object.mediaTagScores
              .map(fbb.writeString)
              .toList(growable: false));
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uriOffset);
          fbb.addOffset(2, dataOffset);
          fbb.addOffset(3, searchStringOffset);
          fbb.addOffset(4, mediaTagsOffset);
          fbb.addOffset(5, mediaTagScoresOffset);
          fbb.addInt64(6, object.relatedDatapoint.targetId);
          fbb.addInt64(7, object.profile.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ImageDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              uri: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              data: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              searchString: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''))
            ..mediaTags = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..mediaTagScores = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 14, []);
          object.relatedDatapoint.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.relatedDatapoint.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.profile.attach(store);
          return object;
        }),
    LinkDocument: EntityDefinition<LinkDocument>(
        model: _entities[8],
        toOneRelations: (LinkDocument object) =>
            [object.relatedDatapoint, object.profile],
        toManyRelations: (LinkDocument object) => {},
        getId: (LinkDocument object) => object.id,
        setId: (LinkDocument object, int id) {
          object.id = id;
        },
        objectToFB: (LinkDocument object, fb.Builder fbb) {
          final uriOffset = fbb.writeString(object.uri);
          final dataOffset = fbb.writeString(object.data);
          final searchStringOffset = object.searchString == null
              ? null
              : fbb.writeString(object.searchString!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uriOffset);
          fbb.addOffset(2, dataOffset);
          fbb.addOffset(3, searchStringOffset);
          fbb.addInt64(4, object.relatedDatapoint.targetId);
          fbb.addInt64(5, object.profile.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = LinkDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              uri: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              data: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              searchString: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10));
          object.relatedDatapoint.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.relatedDatapoint.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.profile.attach(store);
          return object;
        }),
    MonthBucket: EntityDefinition<MonthBucket>(
        model: _entities[9],
        toOneRelations: (MonthBucket object) => [object.year],
        toManyRelations: (MonthBucket object) =>
            {RelInfo<MonthBucket>.toMany(9, object.id): object.days},
        getId: (MonthBucket object) => object.id,
        setId: (MonthBucket object, int id) {
          object.id = id;
        },
        objectToFB: (MonthBucket object, fb.Builder fbb) {
          final dbCategoryMapOffset = fbb.writeString(object.dbCategoryMap);
          final dbServiceMapOffset = fbb.writeString(object.dbServiceMap);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.month);
          fbb.addInt64(2, object.total);
          fbb.addInt64(3, object.year.targetId);
          fbb.addOffset(4, dbCategoryMapOffset);
          fbb.addOffset(5, dbServiceMapOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = MonthBucket(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              total: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              month: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0))
            ..dbCategoryMap = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..dbServiceMap = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '');
          object.year.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.year.attach(store);
          InternalToManyAccess.setRelInfo(
              object.days,
              store,
              RelInfo<MonthBucket>.toMany(9, object.id),
              store.box<MonthBucket>());
          return object;
        }),
    ProfileDocument: EntityDefinition<ProfileDocument>(
        model: _entities[10],
        toOneRelations: (ProfileDocument object) =>
            [object.service, object.profilePicture],
        toManyRelations: (ProfileDocument object) => {
              RelInfo<ProfileDocument>.toMany(10, object.id): object.dataPoints,
              RelInfo<DataCategory>.toOneBacklink(5, object.id,
                      (DataCategory srcObject) => srcObject.profile):
                  object.categories
            },
        getId: (ProfileDocument object) => object.id,
        setId: (ProfileDocument object, int id) {
          object.id = id;
        },
        objectToFB: (ProfileDocument object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.service.targetId);
          fbb.addInt64(3, object.profilePicture.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProfileDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));
          object.service.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.service.attach(store);
          object.profilePicture.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.profilePicture.attach(store);
          InternalToManyAccess.setRelInfo(
              object.dataPoints,
              store,
              RelInfo<ProfileDocument>.toMany(10, object.id),
              store.box<ProfileDocument>());
          InternalToManyAccess.setRelInfo(
              object.categories,
              store,
              RelInfo<DataCategory>.toOneBacklink(
                  5, object.id, (DataCategory srcObject) => srcObject.profile),
              store.box<ProfileDocument>());
          return object;
        }),
    ServiceDocument: EntityDefinition<ServiceDocument>(
        model: _entities[11],
        toOneRelations: (ServiceDocument object) => [],
        toManyRelations: (ServiceDocument object) => {},
        getId: (ServiceDocument object) => object.id,
        setId: (ServiceDocument object, int id) {
          object.id = id;
        },
        objectToFB: (ServiceDocument object, fb.Builder fbb) {
          final serviceNameOffset = fbb.writeString(object.serviceName);
          final companyNameOffset = fbb.writeString(object.companyName);
          final imageOffset = fbb.writeString(object.image);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, serviceNameOffset);
          fbb.addOffset(2, companyNameOffset);
          fbb.addOffset(3, imageOffset);
          fbb.addInt64(4, object.totalDatapoints);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ServiceDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              serviceName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              companyName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              image: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              totalDatapoints:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));

          return object;
        }),
    VideoDocument: EntityDefinition<VideoDocument>(
        model: _entities[12],
        toOneRelations: (VideoDocument object) =>
            [object.relatedDatapoint, object.profile],
        toManyRelations: (VideoDocument object) => {},
        getId: (VideoDocument object) => object.id,
        setId: (VideoDocument object, int id) {
          object.id = id;
        },
        objectToFB: (VideoDocument object, fb.Builder fbb) {
          final uriOffset = fbb.writeString(object.uri);
          final dataOffset = fbb.writeString(object.data);
          final searchStringOffset = fbb.writeString(object.searchString);
          final thumbnailOffset = object.thumbnail == null
              ? null
              : fbb.writeString(object.thumbnail!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uriOffset);
          fbb.addOffset(2, dataOffset);
          fbb.addOffset(3, searchStringOffset);
          fbb.addOffset(4, thumbnailOffset);
          fbb.addInt64(5, object.relatedDatapoint.targetId);
          fbb.addInt64(6, object.profile.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = VideoDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              uri: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              data: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              thumbnail: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              searchString: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));
          object.relatedDatapoint.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.relatedDatapoint.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.profile.attach(store);
          return object;
        }),
    YearBucket: EntityDefinition<YearBucket>(
        model: _entities[13],
        toOneRelations: (YearBucket object) => [],
        toManyRelations: (YearBucket object) =>
            {RelInfo<YearBucket>.toMany(11, object.id): object.months},
        getId: (YearBucket object) => object.id,
        setId: (YearBucket object, int id) {
          object.id = id;
        },
        objectToFB: (YearBucket object, fb.Builder fbb) {
          final dbCategoryMapOffset = fbb.writeString(object.dbCategoryMap);
          final dbServiceMapOffset = fbb.writeString(object.dbServiceMap);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.year);
          fbb.addInt64(2, object.total);
          fbb.addOffset(3, dbCategoryMapOffset);
          fbb.addOffset(4, dbServiceMapOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = YearBucket(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              total: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              year: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0))
            ..dbCategoryMap = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..dbServiceMap = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '');
          InternalToManyAccess.setRelInfo(
              object.months,
              store,
              RelInfo<YearBucket>.toMany(11, object.id),
              store.box<YearBucket>());
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [AppSettingsDocument] entity fields to define ObjectBox queries.
class AppSettingsDocument_ {
  /// see [AppSettingsDocument.id]
  static final id =
      QueryIntegerProperty<AppSettingsDocument>(_entities[0].properties[0]);

  /// see [AppSettingsDocument.darkmode]
  static final darkmode =
      QueryBooleanProperty<AppSettingsDocument>(_entities[0].properties[1]);
}

/// [DataCategory] entity fields to define ObjectBox queries.
class DataCategory_ {
  /// see [DataCategory.id]
  static final id =
      QueryIntegerProperty<DataCategory>(_entities[1].properties[0]);

  /// see [DataCategory.count]
  static final count =
      QueryIntegerProperty<DataCategory>(_entities[1].properties[1]);

  /// see [DataCategory.matchingFoldersFacebook]
  static final matchingFoldersFacebook =
      QueryStringVectorProperty<DataCategory>(_entities[1].properties[2]);

  /// see [DataCategory.matchingFoldersInstagram]
  static final matchingFoldersInstagram =
      QueryStringVectorProperty<DataCategory>(_entities[1].properties[3]);

  /// see [DataCategory.profile]
  static final profile = QueryRelationToOne<DataCategory, ProfileDocument>(
      _entities[1].properties[4]);

  /// see [DataCategory.dbCategory]
  static final dbCategory =
      QueryIntegerProperty<DataCategory>(_entities[1].properties[5]);
}

/// [DataPoint] entity fields to define ObjectBox queries.
class DataPoint_ {
  /// see [DataPoint.id]
  static final id = QueryIntegerProperty<DataPoint>(_entities[2].properties[0]);

  /// see [DataPoint.dataPointName]
  static final dataPointName =
      QueryRelationToOne<DataPoint, DataPointName>(_entities[2].properties[1]);

  /// see [DataPoint.stringName]
  static final stringName =
      QueryStringProperty<DataPoint>(_entities[2].properties[2]);

  /// see [DataPoint.sentimentScore]
  static final sentimentScore =
      QueryDoubleProperty<DataPoint>(_entities[2].properties[3]);

  /// see [DataPoint.sentimentText]
  static final sentimentText =
      QueryStringProperty<DataPoint>(_entities[2].properties[4]);

  /// see [DataPoint.category]
  static final category =
      QueryRelationToOne<DataPoint, DataCategory>(_entities[2].properties[5]);

  /// see [DataPoint.profile]
  static final profile = QueryRelationToOne<DataPoint, ProfileDocument>(
      _entities[2].properties[6]);

  /// see [DataPoint.searchStrings]
  static final searchStrings =
      QueryStringVectorProperty<DataPoint>(_entities[2].properties[7]);

  /// see [DataPoint.values]
  static final values =
      QueryStringProperty<DataPoint>(_entities[2].properties[8]);

  /// see [DataPoint.createdAt]
  static final createdAt =
      QueryIntegerProperty<DataPoint>(_entities[2].properties[9]);

  /// see [DataPoint.dbCreatedAt]
  static final dbCreatedAt =
      QueryIntegerProperty<DataPoint>(_entities[2].properties[10]);

  /// see [DataPoint.images]
  static final images =
      QueryRelationToMany<DataPoint, ImageDocument>(_entities[2].relations[0]);

  /// see [DataPoint.videos]
  static final videos =
      QueryRelationToMany<DataPoint, VideoDocument>(_entities[2].relations[1]);

  /// see [DataPoint.files]
  static final files =
      QueryRelationToMany<DataPoint, FileDocument>(_entities[2].relations[2]);

  /// see [DataPoint.links]
  static final links =
      QueryRelationToMany<DataPoint, LinkDocument>(_entities[2].relations[3]);
}

/// [DataPointName] entity fields to define ObjectBox queries.
class DataPointName_ {
  /// see [DataPointName.id]
  static final id =
      QueryIntegerProperty<DataPointName>(_entities[3].properties[0]);

  /// see [DataPointName.count]
  static final count =
      QueryIntegerProperty<DataPointName>(_entities[3].properties[1]);

  /// see [DataPointName.name]
  static final name =
      QueryStringProperty<DataPointName>(_entities[3].properties[2]);

  /// see [DataPointName.dataCategory]
  static final dataCategory = QueryRelationToOne<DataPointName, DataCategory>(
      _entities[3].properties[3]);

  /// see [DataPointName.profile]
  static final profile = QueryRelationToOne<DataPointName, ProfileDocument>(
      _entities[3].properties[4]);

  /// see [DataPointName.parent]
  static final parent = QueryRelationToOne<DataPointName, DataPointName>(
      _entities[3].properties[5]);

  /// see [DataPointName.children]
  static final children = QueryRelationToMany<DataPointName, DataPointName>(
      _entities[3].relations[0]);
}

/// [DayBucket] entity fields to define ObjectBox queries.
class DayBucket_ {
  /// see [DayBucket.id]
  static final id = QueryIntegerProperty<DayBucket>(_entities[4].properties[0]);

  /// see [DayBucket.day]
  static final day =
      QueryIntegerProperty<DayBucket>(_entities[4].properties[1]);

  /// see [DayBucket.total]
  static final total =
      QueryIntegerProperty<DayBucket>(_entities[4].properties[2]);

  /// see [DayBucket.month]
  static final month =
      QueryRelationToOne<DayBucket, MonthBucket>(_entities[4].properties[3]);

  /// see [DayBucket.dbCategoryMap]
  static final dbCategoryMap =
      QueryStringProperty<DayBucket>(_entities[4].properties[4]);

  /// see [DayBucket.dbServiceMap]
  static final dbServiceMap =
      QueryStringProperty<DayBucket>(_entities[4].properties[5]);

  /// see [DayBucket.hours]
  static final hours =
      QueryRelationToMany<DayBucket, HourBucket>(_entities[4].relations[0]);

  /// see [DayBucket.dataPoints]
  static final dataPoints =
      QueryRelationToMany<DayBucket, DataPoint>(_entities[4].relations[1]);
}

/// [FileDocument] entity fields to define ObjectBox queries.
class FileDocument_ {
  /// see [FileDocument.id]
  static final id =
      QueryIntegerProperty<FileDocument>(_entities[5].properties[0]);

  /// see [FileDocument.uri]
  static final uri =
      QueryStringProperty<FileDocument>(_entities[5].properties[1]);

  /// see [FileDocument.data]
  static final data =
      QueryStringProperty<FileDocument>(_entities[5].properties[2]);

  /// see [FileDocument.searchString]
  static final searchString =
      QueryStringProperty<FileDocument>(_entities[5].properties[3]);

  /// see [FileDocument.thumbnail]
  static final thumbnail =
      QueryStringProperty<FileDocument>(_entities[5].properties[4]);

  /// see [FileDocument.relatedDatapoint]
  static final relatedDatapoint =
      QueryRelationToOne<FileDocument, DataPoint>(_entities[5].properties[5]);

  /// see [FileDocument.profile]
  static final profile = QueryRelationToOne<FileDocument, ProfileDocument>(
      _entities[5].properties[6]);
}

/// [HourBucket] entity fields to define ObjectBox queries.
class HourBucket_ {
  /// see [HourBucket.id]
  static final id =
      QueryIntegerProperty<HourBucket>(_entities[6].properties[0]);

  /// see [HourBucket.hour]
  static final hour =
      QueryIntegerProperty<HourBucket>(_entities[6].properties[1]);

  /// see [HourBucket.total]
  static final total =
      QueryIntegerProperty<HourBucket>(_entities[6].properties[2]);

  /// see [HourBucket.day]
  static final day =
      QueryRelationToOne<HourBucket, DayBucket>(_entities[6].properties[3]);

  /// see [HourBucket.dbCategoryMap]
  static final dbCategoryMap =
      QueryStringProperty<HourBucket>(_entities[6].properties[4]);

  /// see [HourBucket.dbServiceMap]
  static final dbServiceMap =
      QueryStringProperty<HourBucket>(_entities[6].properties[5]);

  /// see [HourBucket.dataPoints]
  static final dataPoints =
      QueryRelationToMany<HourBucket, DataPoint>(_entities[6].relations[0]);
}

/// [ImageDocument] entity fields to define ObjectBox queries.
class ImageDocument_ {
  /// see [ImageDocument.id]
  static final id =
      QueryIntegerProperty<ImageDocument>(_entities[7].properties[0]);

  /// see [ImageDocument.uri]
  static final uri =
      QueryStringProperty<ImageDocument>(_entities[7].properties[1]);

  /// see [ImageDocument.data]
  static final data =
      QueryStringProperty<ImageDocument>(_entities[7].properties[2]);

  /// see [ImageDocument.searchString]
  static final searchString =
      QueryStringProperty<ImageDocument>(_entities[7].properties[3]);

  /// see [ImageDocument.mediaTags]
  static final mediaTags =
      QueryStringProperty<ImageDocument>(_entities[7].properties[4]);

  /// see [ImageDocument.mediaTagScores]
  static final mediaTagScores =
      QueryStringVectorProperty<ImageDocument>(_entities[7].properties[5]);

  /// see [ImageDocument.relatedDatapoint]
  static final relatedDatapoint =
      QueryRelationToOne<ImageDocument, DataPoint>(_entities[7].properties[6]);

  /// see [ImageDocument.profile]
  static final profile = QueryRelationToOne<ImageDocument, ProfileDocument>(
      _entities[7].properties[7]);
}

/// [LinkDocument] entity fields to define ObjectBox queries.
class LinkDocument_ {
  /// see [LinkDocument.id]
  static final id =
      QueryIntegerProperty<LinkDocument>(_entities[8].properties[0]);

  /// see [LinkDocument.uri]
  static final uri =
      QueryStringProperty<LinkDocument>(_entities[8].properties[1]);

  /// see [LinkDocument.data]
  static final data =
      QueryStringProperty<LinkDocument>(_entities[8].properties[2]);

  /// see [LinkDocument.searchString]
  static final searchString =
      QueryStringProperty<LinkDocument>(_entities[8].properties[3]);

  /// see [LinkDocument.relatedDatapoint]
  static final relatedDatapoint =
      QueryRelationToOne<LinkDocument, DataPoint>(_entities[8].properties[4]);

  /// see [LinkDocument.profile]
  static final profile = QueryRelationToOne<LinkDocument, ProfileDocument>(
      _entities[8].properties[5]);
}

/// [MonthBucket] entity fields to define ObjectBox queries.
class MonthBucket_ {
  /// see [MonthBucket.id]
  static final id =
      QueryIntegerProperty<MonthBucket>(_entities[9].properties[0]);

  /// see [MonthBucket.month]
  static final month =
      QueryIntegerProperty<MonthBucket>(_entities[9].properties[1]);

  /// see [MonthBucket.total]
  static final total =
      QueryIntegerProperty<MonthBucket>(_entities[9].properties[2]);

  /// see [MonthBucket.year]
  static final year =
      QueryRelationToOne<MonthBucket, YearBucket>(_entities[9].properties[3]);

  /// see [MonthBucket.dbCategoryMap]
  static final dbCategoryMap =
      QueryStringProperty<MonthBucket>(_entities[9].properties[4]);

  /// see [MonthBucket.dbServiceMap]
  static final dbServiceMap =
      QueryStringProperty<MonthBucket>(_entities[9].properties[5]);

  /// see [MonthBucket.days]
  static final days =
      QueryRelationToMany<MonthBucket, DayBucket>(_entities[9].relations[0]);
}

/// [ProfileDocument] entity fields to define ObjectBox queries.
class ProfileDocument_ {
  /// see [ProfileDocument.id]
  static final id =
      QueryIntegerProperty<ProfileDocument>(_entities[10].properties[0]);

  /// see [ProfileDocument.name]
  static final name =
      QueryStringProperty<ProfileDocument>(_entities[10].properties[1]);

  /// see [ProfileDocument.service]
  static final service = QueryRelationToOne<ProfileDocument, ServiceDocument>(
      _entities[10].properties[2]);

  /// see [ProfileDocument.profilePicture]
  static final profilePicture =
      QueryRelationToOne<ProfileDocument, ImageDocument>(
          _entities[10].properties[3]);

  /// see [ProfileDocument.dataPoints]
  static final dataPoints = QueryRelationToMany<ProfileDocument, DataPoint>(
      _entities[10].relations[0]);
}

/// [ServiceDocument] entity fields to define ObjectBox queries.
class ServiceDocument_ {
  /// see [ServiceDocument.id]
  static final id =
      QueryIntegerProperty<ServiceDocument>(_entities[11].properties[0]);

  /// see [ServiceDocument.serviceName]
  static final serviceName =
      QueryStringProperty<ServiceDocument>(_entities[11].properties[1]);

  /// see [ServiceDocument.companyName]
  static final companyName =
      QueryStringProperty<ServiceDocument>(_entities[11].properties[2]);

  /// see [ServiceDocument.image]
  static final image =
      QueryStringProperty<ServiceDocument>(_entities[11].properties[3]);

  /// see [ServiceDocument.totalDatapoints]
  static final totalDatapoints =
      QueryIntegerProperty<ServiceDocument>(_entities[11].properties[4]);
}

/// [VideoDocument] entity fields to define ObjectBox queries.
class VideoDocument_ {
  /// see [VideoDocument.id]
  static final id =
      QueryIntegerProperty<VideoDocument>(_entities[12].properties[0]);

  /// see [VideoDocument.uri]
  static final uri =
      QueryStringProperty<VideoDocument>(_entities[12].properties[1]);

  /// see [VideoDocument.data]
  static final data =
      QueryStringProperty<VideoDocument>(_entities[12].properties[2]);

  /// see [VideoDocument.searchString]
  static final searchString =
      QueryStringProperty<VideoDocument>(_entities[12].properties[3]);

  /// see [VideoDocument.thumbnail]
  static final thumbnail =
      QueryStringProperty<VideoDocument>(_entities[12].properties[4]);

  /// see [VideoDocument.relatedDatapoint]
  static final relatedDatapoint =
      QueryRelationToOne<VideoDocument, DataPoint>(_entities[12].properties[5]);

  /// see [VideoDocument.profile]
  static final profile = QueryRelationToOne<VideoDocument, ProfileDocument>(
      _entities[12].properties[6]);
}

/// [YearBucket] entity fields to define ObjectBox queries.
class YearBucket_ {
  /// see [YearBucket.id]
  static final id =
      QueryIntegerProperty<YearBucket>(_entities[13].properties[0]);

  /// see [YearBucket.year]
  static final year =
      QueryIntegerProperty<YearBucket>(_entities[13].properties[1]);

  /// see [YearBucket.total]
  static final total =
      QueryIntegerProperty<YearBucket>(_entities[13].properties[2]);

  /// see [YearBucket.dbCategoryMap]
  static final dbCategoryMap =
      QueryStringProperty<YearBucket>(_entities[13].properties[3]);

  /// see [YearBucket.dbServiceMap]
  static final dbServiceMap =
      QueryStringProperty<YearBucket>(_entities[13].properties[4]);

  /// see [YearBucket.months]
  static final months =
      QueryRelationToMany<YearBucket, MonthBucket>(_entities[13].relations[0]);
}
