// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../core/inodes/media_documents.dart';
import '../../core/inodes/service_document.dart';
import '../../core/inodes/tree_nodes.dart';
import '../../data/entities/misc/appsettings_objectbox.dart';
import '../../data/entities/misc/email_objectbox.dart';
import '../../data/entities/misc/reaction_objectbox.dart';
import '../../data/entities/misc/service_objectbox.dart';
import '../../data/entities/profile/profile_objectbox.dart';
import '../../data/entities/timebuckets/buckets.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 4851150363265994636),
      name: 'AppSettingsObjectBox',
      lastPropertyId: const IdUid(2, 6451190763658478777),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 869986507385515587),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6451190763658478777),
            name: 'darkmode',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 5029553621448633603),
      name: 'DataCategory',
      lastPropertyId: const IdUid(4, 6550769385587791456),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5658244064592434199),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4192147275931769008),
            name: 'count',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7533556460295344751),
            name: 'matchingFolders',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6550769385587791456),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(5, 3264993711092467790))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'dataPointNames',
            srcEntity: 'DataPointName',
            srcField: 'dataCategory')
      ]),
  ModelEntity(
      id: const IdUid(7, 3043056634592448563),
      name: 'DataPoint',
      lastPropertyId: const IdUid(9, 272820457015455825),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5360434486300522582),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5816380713818839091),
            name: 'dataPointNameId',
            type: 11,
            flags: 520,
            indexId: const IdUid(6, 5222105298586027679),
            relationTarget: 'DataPointName'),
        ModelProperty(
            id: const IdUid(3, 6668447065054372649),
            name: 'stringName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5414500933135309244),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(7, 5149733545894406286),
            relationTarget: 'DataCategory'),
        ModelProperty(
            id: const IdUid(5, 8235633609206910962),
            name: 'serviceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(8, 7955869088216379633),
            relationTarget: 'ServiceDocument'),
        ModelProperty(
            id: const IdUid(7, 8197360495033113867),
            name: 'values',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2806132087800103354),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(51, 3256618416160863290),
            relationTarget: 'ProfileDocument'),
        ModelProperty(
            id: const IdUid(9, 272820457015455825),
            name: 'searchStrings',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(5, 1767516331485594052),
            name: 'images',
            targetId: const IdUid(33, 3199854896470237352)),
        ModelRelation(
            id: const IdUid(6, 4419558145873108374),
            name: 'videos',
            targetId: const IdUid(36, 3177292059338449348)),
        ModelRelation(
            id: const IdUid(7, 6434723904107441105),
            name: 'files',
            targetId: const IdUid(32, 6733607803340350093)),
        ModelRelation(
            id: const IdUid(22, 3122676908211013825),
            name: 'links',
            targetId: const IdUid(34, 6580086254301391016))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 8682398370349702667),
      name: 'DataPointName',
      lastPropertyId: const IdUid(6, 6445779001623233457),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8696914735176091631),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8951938561049885698),
            name: 'count',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8436467540786264961),
            name: 'name',
            type: 9,
            flags: 2048,
            indexId: const IdUid(10, 7724742582328167363)),
        ModelProperty(
            id: const IdUid(4, 3718420751572945421),
            name: 'dataCategoryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(11, 5197712635780349813),
            relationTarget: 'DataCategory'),
        ModelProperty(
            id: const IdUid(5, 8610212616701053573),
            name: 'parentId',
            type: 11,
            flags: 520,
            indexId: const IdUid(12, 7862172577974960991),
            relationTarget: 'DataPointName'),
        ModelProperty(
            id: const IdUid(6, 6445779001623233457),
            name: 'serviceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(53, 5577920349758892248),
            relationTarget: 'ServiceDocument')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(8, 7403722167535590696),
            name: 'children',
            targetId: const IdUid(8, 8682398370349702667))
      ],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'dataPoints',
            srcEntity: 'DataPoint',
            srcField: 'dataPointName')
      ]),
  ModelEntity(
      id: const IdUid(9, 683627476249142809),
      name: 'DayBucket',
      lastPropertyId: const IdUid(5, 3901175563312092669),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2053486095786796152),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8163763071789349713),
            name: 'day',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 9064018729705942370),
            name: 'total',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5534813858940160213),
            name: 'stringMap',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3901175563312092669),
            name: 'monthId',
            type: 11,
            flags: 520,
            indexId: const IdUid(13, 3019443127659063286),
            relationTarget: 'MonthBucket')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(23, 8928559096394660540),
            name: 'dataPoints',
            targetId: const IdUid(7, 3043056634592448563))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(10, 6166934233033795794),
      name: 'EmailObjectBox',
      lastPropertyId: const IdUid(4, 7954022458624841013),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6426759957400897620),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6849765194572509009),
            name: 'raw',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7980667924790715606),
            name: 'email',
            type: 9,
            flags: 2080,
            indexId: const IdUid(14, 1045259131264145257)),
        ModelProperty(
            id: const IdUid(4, 7954022458624841013),
            name: 'isCurrent',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(17, 8443743811430692582),
      name: 'MonthBucket',
      lastPropertyId: const IdUid(5, 8520298251366410788),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1080781001356502297),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2953256132011063094),
            name: 'month',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1505465996808339126),
            name: 'total',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6824321225345180718),
            name: 'stringMap',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8520298251366410788),
            name: 'yearId',
            type: 11,
            flags: 520,
            indexId: const IdUid(22, 3285111254826432985),
            relationTarget: 'YearBucket')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(12, 1379333204506242091),
            name: 'days',
            targetId: const IdUid(9, 683627476249142809))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(27, 6296875262409725817),
      name: 'ReactionObjectBox',
      lastPropertyId: const IdUid(3, 3084251000789387728),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8872605469753455803),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2277004378836604615),
            name: 'raw',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3084251000789387728),
            name: 'reaction',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(28, 7159946257272966442),
      name: 'ServiceObjectBox',
      lastPropertyId: const IdUid(4, 6983955291223129061),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 53368238983697963),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3350913400702281562),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const IdUid(39, 1431415059843129232)),
        ModelProperty(
            id: const IdUid(3, 3748033197789458248),
            name: 'company',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6983955291223129061),
            name: 'image',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(31, 8819168080769456448),
      name: 'YearBucket',
      lastPropertyId: const IdUid(4, 4571685762271918812),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7694393523726711659),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4396874587009756950),
            name: 'year',
            type: 6,
            flags: 40,
            indexId: const IdUid(41, 6055987803180152942)),
        ModelProperty(
            id: const IdUid(3, 8280493492344365285),
            name: 'total',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4571685762271918812),
            name: 'stringMap',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(21, 7757894380190894923),
            name: 'months',
            targetId: const IdUid(17, 8443743811430692582))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(32, 6733607803340350093),
      name: 'FileDocument',
      lastPropertyId: const IdUid(8, 8895921145513519914),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8434186805896981212),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6806157077664093777),
            name: 'uri',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6090086732534367808),
            name: 'data',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7865517604033956747),
            name: 'searchString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3907004278123414044),
            name: 'thumbnail',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8368456499863488457),
            name: 'serviceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(42, 5063976898366921410),
            relationTarget: 'ServiceDocument'),
        ModelProperty(
            id: const IdUid(7, 3816932248313874191),
            name: 'relatedDatapointId',
            type: 11,
            flags: 520,
            indexId: const IdUid(43, 5889454731299176230),
            relationTarget: 'DataPoint'),
        ModelProperty(
            id: const IdUid(8, 8895921145513519914),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(54, 3131853789107413309),
            relationTarget: 'ProfileDocument')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(33, 3199854896470237352),
      name: 'ImageDocument',
      lastPropertyId: const IdUid(8, 8912495905167216302),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1393523327987614350),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2202052637700890477),
            name: 'uri',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7039569670137007321),
            name: 'data',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4147824923781718854),
            name: 'searchString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7608363150273988244),
            name: 'mediaTags',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 35485257592251040),
            name: 'serviceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(44, 6715182892859029885),
            relationTarget: 'ServiceDocument'),
        ModelProperty(
            id: const IdUid(7, 6974958562562519753),
            name: 'relatedDatapointId',
            type: 11,
            flags: 520,
            indexId: const IdUid(45, 5981393423004271311),
            relationTarget: 'DataPoint'),
        ModelProperty(
            id: const IdUid(8, 8912495905167216302),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(55, 3567266636117142457),
            relationTarget: 'ProfileDocument')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(34, 6580086254301391016),
      name: 'LinkDocument',
      lastPropertyId: const IdUid(7, 3206673773003138916),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2798261362149453042),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5076610417622606416),
            name: 'uri',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 322578933858145357),
            name: 'data',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 824473207285892145),
            name: 'searchString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3790646864221057617),
            name: 'serviceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(46, 8928626685733371733),
            relationTarget: 'ServiceDocument'),
        ModelProperty(
            id: const IdUid(6, 8761767811309346826),
            name: 'relatedDatapointId',
            type: 11,
            flags: 520,
            indexId: const IdUid(47, 4189976758467396925),
            relationTarget: 'DataPoint'),
        ModelProperty(
            id: const IdUid(7, 3206673773003138916),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(56, 752891130755618211),
            relationTarget: 'ProfileDocument')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(35, 1957467003173086369),
      name: 'ServiceDocument',
      lastPropertyId: const IdUid(5, 6805920536238194313),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4813387913626872878),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4493364700905567042),
            name: 'serviceName',
            type: 9,
            flags: 2080,
            indexId: const IdUid(48, 426496036705934259)),
        ModelProperty(
            id: const IdUid(3, 8486442599321895495),
            name: 'companyName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5939934687164224825),
            name: 'image',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6805920536238194313),
            name: 'totalDatapoints',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(36, 3177292059338449348),
      name: 'VideoDocument',
      lastPropertyId: const IdUid(8, 8658596909673853788),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 9209955834123404426),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2775051002555614165),
            name: 'uri',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5699737781623885431),
            name: 'data',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8822494434286069805),
            name: 'searchString',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5678109207131033485),
            name: 'thumbnail',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5021528341812024427),
            name: 'serviceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(49, 6741754154682230088),
            relationTarget: 'ServiceDocument'),
        ModelProperty(
            id: const IdUid(7, 5505033573211785519),
            name: 'relatedDatapointId',
            type: 11,
            flags: 520,
            indexId: const IdUid(50, 8673068564917753083),
            relationTarget: 'DataPoint'),
        ModelProperty(
            id: const IdUid(8, 8658596909673853788),
            name: 'profileId',
            type: 11,
            flags: 520,
            indexId: const IdUid(60, 3414630470762843373),
            relationTarget: 'ProfileDocument')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(37, 3865849161310121097),
      name: 'ProfileDocument',
      lastPropertyId: const IdUid(6, 8819453598037561695),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3093997201576894807),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 256087195128343915),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6240117894434191533),
            name: 'serviceId',
            type: 11,
            flags: 520,
            indexId: const IdUid(57, 6530405895709690166),
            relationTarget: 'ServiceDocument'),
        ModelProperty(
            id: const IdUid(4, 5022439828866646692),
            name: 'dataPointId',
            type: 11,
            flags: 520,
            indexId: const IdUid(58, 3907260634696439496),
            relationTarget: 'DataPoint'),
        ModelProperty(
            id: const IdUid(5, 7180927662399117170),
            name: 'profilePictureId',
            type: 11,
            flags: 520,
            indexId: const IdUid(59, 6747592160332146215),
            relationTarget: 'ImageDocument')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(37, 3865849161310121097),
      lastIndexId: const IdUid(60, 3414630470762843373),
      lastRelationId: const IdUid(23, 8928559096394660540),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        3795801891482101835,
        4965065373383824861,
        6983740273254513294,
        1283328611130941740,
        8332202587133248767,
        4679681511518207465,
        6203807935129884864,
        6864014972050303949,
        4594153462237313951,
        6874583669793030153,
        8893603910880953301,
        6641517078011420630,
        3525425548103886741,
        2890588493689130638,
        4422998466458530686,
        6422822775287241532,
        979585410149278652,
        8825469226537242840,
        4588463723372096615,
        6900525965299323259,
        2700976137735647892
      ],
      retiredIndexUids: const [2663765426491314377, 6022969553980237651],
      retiredPropertyUids: const [
        7380539589883038904,
        1161285421398873076,
        8584673890680071496,
        1717525746799835852,
        7983259287787115643,
        689181159427260357,
        6971421212874221416,
        6415434583433626402,
        6890023033685409708,
        1340934207956687267,
        8989541874585062205,
        5838383754332345674,
        5763387408553960741,
        8489903348227564331,
        1863658403741545754,
        7022691029375467159,
        5559805354309708458,
        2134071308083692555,
        8141759639395380520,
        2329401923789030544,
        3473875425954359330,
        4587038737294963842,
        5845153104500847454,
        5390962749422182477,
        6413272319641586882,
        7081656944745130586,
        3055866053774260607,
        6346589436253517487,
        677819164907542711,
        8097727479687108287,
        3064341345386234465,
        6737595775503512458,
        7620346141431114207,
        7218887142820700261,
        2263510779286915705,
        7865094490674183280,
        9058463918677088644,
        6321255913409768299,
        8944608361768460619,
        5094306055127876759,
        7728267156881202942,
        5100359719383536224,
        212752859294451977,
        1843981772354976681,
        44882144003263824,
        6269290217850481707,
        5607369100051783529,
        760478250557078985,
        7422830341951292888,
        8917399404295469652,
        1583154278200925883,
        7975200625589782025,
        7976348734004712484,
        3800291994579754042,
        5502358873002749412,
        4266594565949532365,
        7853837452468954563,
        3671764349026177923,
        7707968130135551703,
        1565070178060614451,
        9083404946075652829,
        1659231952142407718,
        6244699297035465669,
        1194203902510102234,
        4482738340817061006,
        6586789343473260490,
        6881944740636824666,
        966864124545939118,
        2847049457723993687,
        3545964479220326745,
        3427907228057284708,
        7683264366051549952,
        6661975064467747787,
        7090421615886951754,
        6056284609273390905,
        1499906337114510141,
        5691658846605708561,
        4412259263586717711,
        8858075377353082434,
        6120028214422899324,
        802238952786042396,
        3218654599778246277,
        5727216288325945877,
        6548220019233959392,
        6182700611658313026,
        1761523229073604874,
        6352445423256088258,
        2917031719448940742,
        3995557678002920059,
        7953796464222747982,
        7250381508700264091,
        7277368604797866201,
        1561077583848149494,
        5980074268235068931,
        6350474792495127741,
        242279111074651490,
        3593925108650189637,
        2850428676845428032,
        8432453017052557900,
        4380324628065450865,
        6647695079427280222,
        8117608141222184699,
        2295932770749946358,
        1031882539606845595,
        4968246254231934873,
        2000726407994311560,
        8517893424015155948,
        3851793013766326603,
        8962200090472829202,
        8111929222335059366,
        4190613666852427577,
        2150474213775782237,
        8621933901640980052,
        3763732327187628443,
        3476597362342068076,
        4711443958470875167,
        2910788714989479201,
        7528848375697250601,
        4081827096114224211,
        8556884087237986948,
        1933872560510870534,
        6932004358102018442,
        3365499526729003104,
        4177385701511000085,
        3944705038088366964,
        7127865273365737283,
        7514897168525488195,
        3777234457643933862,
        6153416804116495573,
        1995625163197737529,
        1241223396905052184,
        8971602501745109094,
        5841588724068215485,
        2226786182737865937,
        3220927113768729282,
        5818661786277041887,
        5706999882624075264,
        6942627146854640397,
        7107103570104096684,
        6054617778805049171,
        364315943966189713,
        1834085916231402586,
        9218281838148496413,
        3372345563176397564,
        2357502960088749328,
        9102808829019884620,
        8220626561167601011,
        8819453598037561695
      ],
      retiredRelationUids: const [
        299039894127599677,
        7636022078493603537,
        4406179733756429902
      ],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    AppSettingsObjectBox: EntityDefinition<AppSettingsObjectBox>(
        model: _entities[0],
        toOneRelations: (AppSettingsObjectBox object) => [],
        toManyRelations: (AppSettingsObjectBox object) => {},
        getId: (AppSettingsObjectBox object) => object.id,
        setId: (AppSettingsObjectBox object, int id) {
          object.id = id;
        },
        objectToFB: (AppSettingsObjectBox object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.darkmode);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AppSettingsObjectBox(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false));

          return object;
        }),
    DataCategory: EntityDefinition<DataCategory>(
        model: _entities[1],
        toOneRelations: (DataCategory object) => [],
        toManyRelations: (DataCategory object) => {
              RelInfo<DataPointName>.toOneBacklink(4, object.id,
                      (DataPointName srcObject) => srcObject.dataCategory):
                  object.dataPointNames
            },
        getId: (DataCategory object) => object.id,
        setId: (DataCategory object, int id) {
          object.id = id;
        },
        objectToFB: (DataCategory object, fb.Builder fbb) {
          final matchingFoldersOffset = fbb.writeList(object.matchingFolders
              .map(fbb.writeString)
              .toList(growable: false));
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.count);
          fbb.addOffset(2, matchingFoldersOffset);
          fbb.addOffset(3, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DataCategory(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              count: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              matchingFolders: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGet(buffer, rootOffset, 8, []));
          InternalToManyAccess.setRelInfo(
              object.dataPointNames,
              store,
              RelInfo<DataPointName>.toOneBacklink(4, object.id,
                  (DataPointName srcObject) => srcObject.dataCategory),
              store.box<DataCategory>());
          return object;
        }),
    DataPoint: EntityDefinition<DataPoint>(
        model: _entities[2],
        toOneRelations: (DataPoint object) => [
              object.dataPointName,
              object.category,
              object.service,
              object.profile
            ],
        toManyRelations: (DataPoint object) => {
              RelInfo<DataPoint>.toMany(5, object.id): object.images,
              RelInfo<DataPoint>.toMany(6, object.id): object.videos,
              RelInfo<DataPoint>.toMany(7, object.id): object.files,
              RelInfo<DataPoint>.toMany(22, object.id): object.links
            },
        getId: (DataPoint object) => object.id,
        setId: (DataPoint object, int id) {
          object.id = id;
        },
        objectToFB: (DataPoint object, fb.Builder fbb) {
          final stringNameOffset = fbb.writeString(object.stringName);
          final valuesOffset = fbb.writeString(object.values);
          final searchStringsOffset = fbb.writeList(object.searchStrings
              .map(fbb.writeString)
              .toList(growable: false));
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.dataPointName.targetId);
          fbb.addOffset(2, stringNameOffset);
          fbb.addInt64(3, object.category.targetId);
          fbb.addInt64(4, object.service.targetId);
          fbb.addOffset(6, valuesOffset);
          fbb.addInt64(7, object.profile.targetId);
          fbb.addOffset(8, searchStringsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DataPoint(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0))
            ..stringName = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..values = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 16, '')
            ..searchStrings = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 20, []);
          object.dataPointName.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.dataPointName.attach(store);
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.category.attach(store);
          object.service.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.service.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.profile.attach(store);
          InternalToManyAccess.setRelInfo(object.images, store,
              RelInfo<DataPoint>.toMany(5, object.id), store.box<DataPoint>());
          InternalToManyAccess.setRelInfo(object.videos, store,
              RelInfo<DataPoint>.toMany(6, object.id), store.box<DataPoint>());
          InternalToManyAccess.setRelInfo(object.files, store,
              RelInfo<DataPoint>.toMany(7, object.id), store.box<DataPoint>());
          InternalToManyAccess.setRelInfo(object.links, store,
              RelInfo<DataPoint>.toMany(22, object.id), store.box<DataPoint>());
          return object;
        }),
    DataPointName: EntityDefinition<DataPointName>(
        model: _entities[3],
        toOneRelations: (DataPointName object) =>
            [object.dataCategory, object.parent, object.service],
        toManyRelations: (DataPointName object) => {
              RelInfo<DataPointName>.toMany(8, object.id): object.children,
              RelInfo<DataPoint>.toOneBacklink(2, object.id,
                      (DataPoint srcObject) => srcObject.dataPointName):
                  object.dataPoints
            },
        getId: (DataPointName object) => object.id,
        setId: (DataPointName object, int id) {
          object.id = id;
        },
        objectToFB: (DataPointName object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.count);
          fbb.addOffset(2, nameOffset);
          fbb.addInt64(3, object.dataCategory.targetId);
          fbb.addInt64(4, object.parent.targetId);
          fbb.addInt64(5, object.service.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DataPointName(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              count: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''));
          object.dataCategory.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.dataCategory.attach(store);
          object.parent.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.parent.attach(store);
          object.service.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.service.attach(store);
          InternalToManyAccess.setRelInfo(
              object.children,
              store,
              RelInfo<DataPointName>.toMany(8, object.id),
              store.box<DataPointName>());
          InternalToManyAccess.setRelInfo(
              object.dataPoints,
              store,
              RelInfo<DataPoint>.toOneBacklink(2, object.id,
                  (DataPoint srcObject) => srcObject.dataPointName),
              store.box<DataPointName>());
          return object;
        }),
    DayBucket: EntityDefinition<DayBucket>(
        model: _entities[4],
        toOneRelations: (DayBucket object) => [object.month],
        toManyRelations: (DayBucket object) =>
            {RelInfo<DayBucket>.toMany(23, object.id): object.dataPoints},
        getId: (DayBucket object) => object.id,
        setId: (DayBucket object, int id) {
          object.id = id;
        },
        objectToFB: (DayBucket object, fb.Builder fbb) {
          final stringMapOffset = fbb.writeString(object.stringMap);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.day);
          fbb.addInt64(2, object.total);
          fbb.addOffset(3, stringMapOffset);
          fbb.addInt64(4, object.month.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = DayBucket(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              total: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              day: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              stringMap: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));
          object.month.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.month.attach(store);
          InternalToManyAccess.setRelInfo(object.dataPoints, store,
              RelInfo<DayBucket>.toMany(23, object.id), store.box<DayBucket>());
          return object;
        }),
    EmailObjectBox: EntityDefinition<EmailObjectBox>(
        model: _entities[5],
        toOneRelations: (EmailObjectBox object) => [],
        toManyRelations: (EmailObjectBox object) => {},
        getId: (EmailObjectBox object) => object.id,
        setId: (EmailObjectBox object, int id) {
          object.id = id;
        },
        objectToFB: (EmailObjectBox object, fb.Builder fbb) {
          final rawOffset = fbb.writeString(object.raw);
          final emailOffset = fbb.writeString(object.email);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, rawOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addBool(3, object.isCurrent);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = EmailObjectBox(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              raw: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              isCurrent: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 10, false));

          return object;
        }),
    MonthBucket: EntityDefinition<MonthBucket>(
        model: _entities[6],
        toOneRelations: (MonthBucket object) => [object.year],
        toManyRelations: (MonthBucket object) =>
            {RelInfo<MonthBucket>.toMany(12, object.id): object.days},
        getId: (MonthBucket object) => object.id,
        setId: (MonthBucket object, int id) {
          object.id = id;
        },
        objectToFB: (MonthBucket object, fb.Builder fbb) {
          final stringMapOffset = fbb.writeString(object.stringMap);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.month);
          fbb.addInt64(2, object.total);
          fbb.addOffset(3, stringMapOffset);
          fbb.addInt64(4, object.year.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = MonthBucket(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              total: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              month: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              stringMap: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));
          object.year.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.year.attach(store);
          InternalToManyAccess.setRelInfo(
              object.days,
              store,
              RelInfo<MonthBucket>.toMany(12, object.id),
              store.box<MonthBucket>());
          return object;
        }),
    ReactionObjectBox: EntityDefinition<ReactionObjectBox>(
        model: _entities[7],
        toOneRelations: (ReactionObjectBox object) => [],
        toManyRelations: (ReactionObjectBox object) => {},
        getId: (ReactionObjectBox object) => object.id,
        setId: (ReactionObjectBox object, int id) {
          object.id = id;
        },
        objectToFB: (ReactionObjectBox object, fb.Builder fbb) {
          final rawOffset = fbb.writeString(object.raw);
          final reactionOffset = fbb.writeString(object.reaction);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, rawOffset);
          fbb.addOffset(2, reactionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ReactionObjectBox(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              raw: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              reaction: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''));

          return object;
        }),
    ServiceObjectBox: EntityDefinition<ServiceObjectBox>(
        model: _entities[8],
        toOneRelations: (ServiceObjectBox object) => [],
        toManyRelations: (ServiceObjectBox object) => {},
        getId: (ServiceObjectBox object) => object.id,
        setId: (ServiceObjectBox object, int id) {
          object.id = id;
        },
        objectToFB: (ServiceObjectBox object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final companyOffset = fbb.writeString(object.company);
          final imageOffset = fbb.writeString(object.image);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, companyOffset);
          fbb.addOffset(3, imageOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ServiceObjectBox(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              company: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              image: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));

          return object;
        }),
    YearBucket: EntityDefinition<YearBucket>(
        model: _entities[9],
        toOneRelations: (YearBucket object) => [],
        toManyRelations: (YearBucket object) =>
            {RelInfo<YearBucket>.toMany(21, object.id): object.months},
        getId: (YearBucket object) => object.id,
        setId: (YearBucket object, int id) {
          object.id = id;
        },
        objectToFB: (YearBucket object, fb.Builder fbb) {
          final stringMapOffset = fbb.writeString(object.stringMap);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.year);
          fbb.addInt64(2, object.total);
          fbb.addOffset(3, stringMapOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = YearBucket(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              total: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              year: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              stringMap: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));
          InternalToManyAccess.setRelInfo(
              object.months,
              store,
              RelInfo<YearBucket>.toMany(21, object.id),
              store.box<YearBucket>());
          return object;
        }),
    FileDocument: EntityDefinition<FileDocument>(
        model: _entities[10],
        toOneRelations: (FileDocument object) =>
            [object.service, object.relatedDatapoint, object.profile],
        toManyRelations: (FileDocument object) => {},
        getId: (FileDocument object) => object.id,
        setId: (FileDocument object, int id) {
          object.id = id;
        },
        objectToFB: (FileDocument object, fb.Builder fbb) {
          final uriOffset = fbb.writeString(object.uri);
          final dataOffset = fbb.writeString(object.data);
          final searchStringOffset = fbb.writeString(object.searchString);
          final thumbnailOffset = object.thumbnail == null
              ? null
              : fbb.writeString(object.thumbnail!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uriOffset);
          fbb.addOffset(2, dataOffset);
          fbb.addOffset(3, searchStringOffset);
          fbb.addOffset(4, thumbnailOffset);
          fbb.addInt64(5, object.service.targetId);
          fbb.addInt64(6, object.relatedDatapoint.targetId);
          fbb.addInt64(7, object.profile.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = FileDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              uri: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              data: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              thumbnail: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              searchString: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));
          object.service.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.service.attach(store);
          object.relatedDatapoint.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.relatedDatapoint.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.profile.attach(store);
          return object;
        }),
    ImageDocument: EntityDefinition<ImageDocument>(
        model: _entities[11],
        toOneRelations: (ImageDocument object) =>
            [object.service, object.relatedDatapoint, object.profile],
        toManyRelations: (ImageDocument object) => {},
        getId: (ImageDocument object) => object.id,
        setId: (ImageDocument object, int id) {
          object.id = id;
        },
        objectToFB: (ImageDocument object, fb.Builder fbb) {
          final uriOffset = fbb.writeString(object.uri);
          final dataOffset = fbb.writeString(object.data);
          final searchStringOffset = fbb.writeString(object.searchString);
          final mediaTagsOffset = object.mediaTags == null
              ? null
              : fbb.writeList(object.mediaTags!
                  .map(fbb.writeString)
                  .toList(growable: false));
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uriOffset);
          fbb.addOffset(2, dataOffset);
          fbb.addOffset(3, searchStringOffset);
          fbb.addOffset(4, mediaTagsOffset);
          fbb.addInt64(5, object.service.targetId);
          fbb.addInt64(6, object.relatedDatapoint.targetId);
          fbb.addInt64(7, object.profile.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ImageDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              uri: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              data: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              searchString: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''))
            ..mediaTags = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGetNullable(buffer, rootOffset, 12);
          object.service.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.service.attach(store);
          object.relatedDatapoint.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.relatedDatapoint.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.profile.attach(store);
          return object;
        }),
    LinkDocument: EntityDefinition<LinkDocument>(
        model: _entities[12],
        toOneRelations: (LinkDocument object) =>
            [object.service, object.relatedDatapoint, object.profile],
        toManyRelations: (LinkDocument object) => {},
        getId: (LinkDocument object) => object.id,
        setId: (LinkDocument object, int id) {
          object.id = id;
        },
        objectToFB: (LinkDocument object, fb.Builder fbb) {
          final uriOffset = fbb.writeString(object.uri);
          final dataOffset = fbb.writeString(object.data);
          final searchStringOffset = object.searchString == null
              ? null
              : fbb.writeString(object.searchString!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uriOffset);
          fbb.addOffset(2, dataOffset);
          fbb.addOffset(3, searchStringOffset);
          fbb.addInt64(4, object.service.targetId);
          fbb.addInt64(5, object.relatedDatapoint.targetId);
          fbb.addInt64(6, object.profile.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = LinkDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              uri: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              data: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              searchString: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10));
          object.service.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.service.attach(store);
          object.relatedDatapoint.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.relatedDatapoint.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.profile.attach(store);
          return object;
        }),
    ServiceDocument: EntityDefinition<ServiceDocument>(
        model: _entities[13],
        toOneRelations: (ServiceDocument object) => [],
        toManyRelations: (ServiceDocument object) => {},
        getId: (ServiceDocument object) => object.id,
        setId: (ServiceDocument object, int id) {
          object.id = id;
        },
        objectToFB: (ServiceDocument object, fb.Builder fbb) {
          final serviceNameOffset = fbb.writeString(object.serviceName);
          final companyNameOffset = fbb.writeString(object.companyName);
          final imageOffset = fbb.writeString(object.image);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, serviceNameOffset);
          fbb.addOffset(2, companyNameOffset);
          fbb.addOffset(3, imageOffset);
          fbb.addInt64(4, object.totalDatapoints);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ServiceDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              serviceName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              companyName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              image: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              totalDatapoints:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));

          return object;
        }),
    VideoDocument: EntityDefinition<VideoDocument>(
        model: _entities[14],
        toOneRelations: (VideoDocument object) =>
            [object.service, object.relatedDatapoint, object.profile],
        toManyRelations: (VideoDocument object) => {},
        getId: (VideoDocument object) => object.id,
        setId: (VideoDocument object, int id) {
          object.id = id;
        },
        objectToFB: (VideoDocument object, fb.Builder fbb) {
          final uriOffset = fbb.writeString(object.uri);
          final dataOffset = fbb.writeString(object.data);
          final searchStringOffset = fbb.writeString(object.searchString);
          final thumbnailOffset = object.thumbnail == null
              ? null
              : fbb.writeString(object.thumbnail!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uriOffset);
          fbb.addOffset(2, dataOffset);
          fbb.addOffset(3, searchStringOffset);
          fbb.addOffset(4, thumbnailOffset);
          fbb.addInt64(5, object.service.targetId);
          fbb.addInt64(6, object.relatedDatapoint.targetId);
          fbb.addInt64(7, object.profile.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = VideoDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              uri: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              data: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              thumbnail: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              searchString: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));
          object.service.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.service.attach(store);
          object.relatedDatapoint.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.relatedDatapoint.attach(store);
          object.profile.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.profile.attach(store);
          return object;
        }),
    ProfileDocument: EntityDefinition<ProfileDocument>(
        model: _entities[15],
        toOneRelations: (ProfileDocument object) =>
            [object.service, object.dataPoint, object.profilePicture],
        toManyRelations: (ProfileDocument object) => {},
        getId: (ProfileDocument object) => object.id,
        setId: (ProfileDocument object, int id) {
          object.id = id;
        },
        objectToFB: (ProfileDocument object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.service.targetId);
          fbb.addInt64(3, object.dataPoint.targetId);
          fbb.addInt64(4, object.profilePicture.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProfileDocument(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));
          object.service.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.service.attach(store);
          object.dataPoint.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.dataPoint.attach(store);
          object.profilePicture.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.profilePicture.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [AppSettingsObjectBox] entity fields to define ObjectBox queries.
class AppSettingsObjectBox_ {
  /// see [AppSettingsObjectBox.id]
  static final id =
      QueryIntegerProperty<AppSettingsObjectBox>(_entities[0].properties[0]);

  /// see [AppSettingsObjectBox.darkmode]
  static final darkmode =
      QueryBooleanProperty<AppSettingsObjectBox>(_entities[0].properties[1]);
}

/// [DataCategory] entity fields to define ObjectBox queries.
class DataCategory_ {
  /// see [DataCategory.id]
  static final id =
      QueryIntegerProperty<DataCategory>(_entities[1].properties[0]);

  /// see [DataCategory.count]
  static final count =
      QueryIntegerProperty<DataCategory>(_entities[1].properties[1]);

  /// see [DataCategory.matchingFolders]
  static final matchingFolders =
      QueryStringVectorProperty<DataCategory>(_entities[1].properties[2]);

  /// see [DataCategory.name]
  static final name =
      QueryStringProperty<DataCategory>(_entities[1].properties[3]);
}

/// [DataPoint] entity fields to define ObjectBox queries.
class DataPoint_ {
  /// see [DataPoint.id]
  static final id = QueryIntegerProperty<DataPoint>(_entities[2].properties[0]);

  /// see [DataPoint.dataPointName]
  static final dataPointName =
      QueryRelationToOne<DataPoint, DataPointName>(_entities[2].properties[1]);

  /// see [DataPoint.stringName]
  static final stringName =
      QueryStringProperty<DataPoint>(_entities[2].properties[2]);

  /// see [DataPoint.category]
  static final category =
      QueryRelationToOne<DataPoint, DataCategory>(_entities[2].properties[3]);

  /// see [DataPoint.service]
  static final service = QueryRelationToOne<DataPoint, ServiceDocument>(
      _entities[2].properties[4]);

  /// see [DataPoint.values]
  static final values =
      QueryStringProperty<DataPoint>(_entities[2].properties[5]);

  /// see [DataPoint.profile]
  static final profile = QueryRelationToOne<DataPoint, ProfileDocument>(
      _entities[2].properties[6]);

  /// see [DataPoint.searchStrings]
  static final searchStrings =
      QueryStringVectorProperty<DataPoint>(_entities[2].properties[7]);

  /// see [DataPoint.images]
  static final images =
      QueryRelationToMany<DataPoint, ImageDocument>(_entities[2].relations[0]);

  /// see [DataPoint.videos]
  static final videos =
      QueryRelationToMany<DataPoint, VideoDocument>(_entities[2].relations[1]);

  /// see [DataPoint.files]
  static final files =
      QueryRelationToMany<DataPoint, FileDocument>(_entities[2].relations[2]);

  /// see [DataPoint.links]
  static final links =
      QueryRelationToMany<DataPoint, LinkDocument>(_entities[2].relations[3]);
}

/// [DataPointName] entity fields to define ObjectBox queries.
class DataPointName_ {
  /// see [DataPointName.id]
  static final id =
      QueryIntegerProperty<DataPointName>(_entities[3].properties[0]);

  /// see [DataPointName.count]
  static final count =
      QueryIntegerProperty<DataPointName>(_entities[3].properties[1]);

  /// see [DataPointName.name]
  static final name =
      QueryStringProperty<DataPointName>(_entities[3].properties[2]);

  /// see [DataPointName.dataCategory]
  static final dataCategory = QueryRelationToOne<DataPointName, DataCategory>(
      _entities[3].properties[3]);

  /// see [DataPointName.parent]
  static final parent = QueryRelationToOne<DataPointName, DataPointName>(
      _entities[3].properties[4]);

  /// see [DataPointName.service]
  static final service = QueryRelationToOne<DataPointName, ServiceDocument>(
      _entities[3].properties[5]);

  /// see [DataPointName.children]
  static final children = QueryRelationToMany<DataPointName, DataPointName>(
      _entities[3].relations[0]);
}

/// [DayBucket] entity fields to define ObjectBox queries.
class DayBucket_ {
  /// see [DayBucket.id]
  static final id = QueryIntegerProperty<DayBucket>(_entities[4].properties[0]);

  /// see [DayBucket.day]
  static final day =
      QueryIntegerProperty<DayBucket>(_entities[4].properties[1]);

  /// see [DayBucket.total]
  static final total =
      QueryIntegerProperty<DayBucket>(_entities[4].properties[2]);

  /// see [DayBucket.stringMap]
  static final stringMap =
      QueryStringProperty<DayBucket>(_entities[4].properties[3]);

  /// see [DayBucket.month]
  static final month =
      QueryRelationToOne<DayBucket, MonthBucket>(_entities[4].properties[4]);

  /// see [DayBucket.dataPoints]
  static final dataPoints =
      QueryRelationToMany<DayBucket, DataPoint>(_entities[4].relations[0]);
}

/// [EmailObjectBox] entity fields to define ObjectBox queries.
class EmailObjectBox_ {
  /// see [EmailObjectBox.id]
  static final id =
      QueryIntegerProperty<EmailObjectBox>(_entities[5].properties[0]);

  /// see [EmailObjectBox.raw]
  static final raw =
      QueryStringProperty<EmailObjectBox>(_entities[5].properties[1]);

  /// see [EmailObjectBox.email]
  static final email =
      QueryStringProperty<EmailObjectBox>(_entities[5].properties[2]);

  /// see [EmailObjectBox.isCurrent]
  static final isCurrent =
      QueryBooleanProperty<EmailObjectBox>(_entities[5].properties[3]);
}

/// [MonthBucket] entity fields to define ObjectBox queries.
class MonthBucket_ {
  /// see [MonthBucket.id]
  static final id =
      QueryIntegerProperty<MonthBucket>(_entities[6].properties[0]);

  /// see [MonthBucket.month]
  static final month =
      QueryIntegerProperty<MonthBucket>(_entities[6].properties[1]);

  /// see [MonthBucket.total]
  static final total =
      QueryIntegerProperty<MonthBucket>(_entities[6].properties[2]);

  /// see [MonthBucket.stringMap]
  static final stringMap =
      QueryStringProperty<MonthBucket>(_entities[6].properties[3]);

  /// see [MonthBucket.year]
  static final year =
      QueryRelationToOne<MonthBucket, YearBucket>(_entities[6].properties[4]);

  /// see [MonthBucket.days]
  static final days =
      QueryRelationToMany<MonthBucket, DayBucket>(_entities[6].relations[0]);
}

/// [ReactionObjectBox] entity fields to define ObjectBox queries.
class ReactionObjectBox_ {
  /// see [ReactionObjectBox.id]
  static final id =
      QueryIntegerProperty<ReactionObjectBox>(_entities[7].properties[0]);

  /// see [ReactionObjectBox.raw]
  static final raw =
      QueryStringProperty<ReactionObjectBox>(_entities[7].properties[1]);

  /// see [ReactionObjectBox.reaction]
  static final reaction =
      QueryStringProperty<ReactionObjectBox>(_entities[7].properties[2]);
}

/// [ServiceObjectBox] entity fields to define ObjectBox queries.
class ServiceObjectBox_ {
  /// see [ServiceObjectBox.id]
  static final id =
      QueryIntegerProperty<ServiceObjectBox>(_entities[8].properties[0]);

  /// see [ServiceObjectBox.name]
  static final name =
      QueryStringProperty<ServiceObjectBox>(_entities[8].properties[1]);

  /// see [ServiceObjectBox.company]
  static final company =
      QueryStringProperty<ServiceObjectBox>(_entities[8].properties[2]);

  /// see [ServiceObjectBox.image]
  static final image =
      QueryStringProperty<ServiceObjectBox>(_entities[8].properties[3]);
}

/// [YearBucket] entity fields to define ObjectBox queries.
class YearBucket_ {
  /// see [YearBucket.id]
  static final id =
      QueryIntegerProperty<YearBucket>(_entities[9].properties[0]);

  /// see [YearBucket.year]
  static final year =
      QueryIntegerProperty<YearBucket>(_entities[9].properties[1]);

  /// see [YearBucket.total]
  static final total =
      QueryIntegerProperty<YearBucket>(_entities[9].properties[2]);

  /// see [YearBucket.stringMap]
  static final stringMap =
      QueryStringProperty<YearBucket>(_entities[9].properties[3]);

  /// see [YearBucket.months]
  static final months =
      QueryRelationToMany<YearBucket, MonthBucket>(_entities[9].relations[0]);
}

/// [FileDocument] entity fields to define ObjectBox queries.
class FileDocument_ {
  /// see [FileDocument.id]
  static final id =
      QueryIntegerProperty<FileDocument>(_entities[10].properties[0]);

  /// see [FileDocument.uri]
  static final uri =
      QueryStringProperty<FileDocument>(_entities[10].properties[1]);

  /// see [FileDocument.data]
  static final data =
      QueryStringProperty<FileDocument>(_entities[10].properties[2]);

  /// see [FileDocument.searchString]
  static final searchString =
      QueryStringProperty<FileDocument>(_entities[10].properties[3]);

  /// see [FileDocument.thumbnail]
  static final thumbnail =
      QueryStringProperty<FileDocument>(_entities[10].properties[4]);

  /// see [FileDocument.service]
  static final service = QueryRelationToOne<FileDocument, ServiceDocument>(
      _entities[10].properties[5]);

  /// see [FileDocument.relatedDatapoint]
  static final relatedDatapoint =
      QueryRelationToOne<FileDocument, DataPoint>(_entities[10].properties[6]);

  /// see [FileDocument.profile]
  static final profile = QueryRelationToOne<FileDocument, ProfileDocument>(
      _entities[10].properties[7]);
}

/// [ImageDocument] entity fields to define ObjectBox queries.
class ImageDocument_ {
  /// see [ImageDocument.id]
  static final id =
      QueryIntegerProperty<ImageDocument>(_entities[11].properties[0]);

  /// see [ImageDocument.uri]
  static final uri =
      QueryStringProperty<ImageDocument>(_entities[11].properties[1]);

  /// see [ImageDocument.data]
  static final data =
      QueryStringProperty<ImageDocument>(_entities[11].properties[2]);

  /// see [ImageDocument.searchString]
  static final searchString =
      QueryStringProperty<ImageDocument>(_entities[11].properties[3]);

  /// see [ImageDocument.mediaTags]
  static final mediaTags =
      QueryStringVectorProperty<ImageDocument>(_entities[11].properties[4]);

  /// see [ImageDocument.service]
  static final service = QueryRelationToOne<ImageDocument, ServiceDocument>(
      _entities[11].properties[5]);

  /// see [ImageDocument.relatedDatapoint]
  static final relatedDatapoint =
      QueryRelationToOne<ImageDocument, DataPoint>(_entities[11].properties[6]);

  /// see [ImageDocument.profile]
  static final profile = QueryRelationToOne<ImageDocument, ProfileDocument>(
      _entities[11].properties[7]);
}

/// [LinkDocument] entity fields to define ObjectBox queries.
class LinkDocument_ {
  /// see [LinkDocument.id]
  static final id =
      QueryIntegerProperty<LinkDocument>(_entities[12].properties[0]);

  /// see [LinkDocument.uri]
  static final uri =
      QueryStringProperty<LinkDocument>(_entities[12].properties[1]);

  /// see [LinkDocument.data]
  static final data =
      QueryStringProperty<LinkDocument>(_entities[12].properties[2]);

  /// see [LinkDocument.searchString]
  static final searchString =
      QueryStringProperty<LinkDocument>(_entities[12].properties[3]);

  /// see [LinkDocument.service]
  static final service = QueryRelationToOne<LinkDocument, ServiceDocument>(
      _entities[12].properties[4]);

  /// see [LinkDocument.relatedDatapoint]
  static final relatedDatapoint =
      QueryRelationToOne<LinkDocument, DataPoint>(_entities[12].properties[5]);

  /// see [LinkDocument.profile]
  static final profile = QueryRelationToOne<LinkDocument, ProfileDocument>(
      _entities[12].properties[6]);
}

/// [ServiceDocument] entity fields to define ObjectBox queries.
class ServiceDocument_ {
  /// see [ServiceDocument.id]
  static final id =
      QueryIntegerProperty<ServiceDocument>(_entities[13].properties[0]);

  /// see [ServiceDocument.serviceName]
  static final serviceName =
      QueryStringProperty<ServiceDocument>(_entities[13].properties[1]);

  /// see [ServiceDocument.companyName]
  static final companyName =
      QueryStringProperty<ServiceDocument>(_entities[13].properties[2]);

  /// see [ServiceDocument.image]
  static final image =
      QueryStringProperty<ServiceDocument>(_entities[13].properties[3]);

  /// see [ServiceDocument.totalDatapoints]
  static final totalDatapoints =
      QueryIntegerProperty<ServiceDocument>(_entities[13].properties[4]);
}

/// [VideoDocument] entity fields to define ObjectBox queries.
class VideoDocument_ {
  /// see [VideoDocument.id]
  static final id =
      QueryIntegerProperty<VideoDocument>(_entities[14].properties[0]);

  /// see [VideoDocument.uri]
  static final uri =
      QueryStringProperty<VideoDocument>(_entities[14].properties[1]);

  /// see [VideoDocument.data]
  static final data =
      QueryStringProperty<VideoDocument>(_entities[14].properties[2]);

  /// see [VideoDocument.searchString]
  static final searchString =
      QueryStringProperty<VideoDocument>(_entities[14].properties[3]);

  /// see [VideoDocument.thumbnail]
  static final thumbnail =
      QueryStringProperty<VideoDocument>(_entities[14].properties[4]);

  /// see [VideoDocument.service]
  static final service = QueryRelationToOne<VideoDocument, ServiceDocument>(
      _entities[14].properties[5]);

  /// see [VideoDocument.relatedDatapoint]
  static final relatedDatapoint =
      QueryRelationToOne<VideoDocument, DataPoint>(_entities[14].properties[6]);

  /// see [VideoDocument.profile]
  static final profile = QueryRelationToOne<VideoDocument, ProfileDocument>(
      _entities[14].properties[7]);
}

/// [ProfileDocument] entity fields to define ObjectBox queries.
class ProfileDocument_ {
  /// see [ProfileDocument.id]
  static final id =
      QueryIntegerProperty<ProfileDocument>(_entities[15].properties[0]);

  /// see [ProfileDocument.name]
  static final name =
      QueryStringProperty<ProfileDocument>(_entities[15].properties[1]);

  /// see [ProfileDocument.service]
  static final service = QueryRelationToOne<ProfileDocument, ServiceDocument>(
      _entities[15].properties[2]);

  /// see [ProfileDocument.dataPoint]
  static final dataPoint = QueryRelationToOne<ProfileDocument, DataPoint>(
      _entities[15].properties[3]);

  /// see [ProfileDocument.profilePicture]
  static final profilePicture =
      QueryRelationToOne<ProfileDocument, ImageDocument>(
          _entities[15].properties[4]);
}
